#!/usr/bin/env python
#
# Created by Pearu Peterson in Febuary 2008
#

import os

def preprocess(source, tmp_cache=[1]):
    result = []
    for line in source.splitlines():
        if line.lstrip().startswith('@'):
            prefix, rest = line.split('@',1)
            i = rest.index('(')
            name = rest[:i]
            tmp_cache[0] += 1
            d = {'TMP':'_tmp%s' % (tmp_cache[0])}
            try:
                for arg in rest.strip()[i+1:-1].split(';'):
                    key, value = arg.split('=',1)
                    d[key.strip()] = value.strip()
            except Exception, msg:
                print `rest`
                print '%s (while processing %r)' % (msg, line.lstrip())
                continue
            try:
                templ = eval(name, globals(), {})
            except NameError, msg:
                templ = '@' + rest
                print 'NameError: %s (while processing %r)' % (msg, line.strip())
            else:
                if '@' in templ:
                    templ = preprocess(templ)
            result.append(prefix + '#' + rest)
            try:
                templ_d = templ % d
            except Exception, msg:
                print '%s (while processing %r)' % (msg, line.lstrip())
                print d, `templ`
                continue
            for l in templ_d.splitlines():
                result.append(prefix + l)
        else:
            result.append(line)
    return '\n'.join(result)

cwd = os.path.abspath(os.path.dirname(__file__))
targetfile_py = os.path.join(cwd,'methods.py')

template = '''\
"""
This file is generated by the sympycore/arithmetic/mk_methods.py script.
DO NOT CHANGE THIS FILE DIRECTLY!!!
"""

from .numbers import Complex, Float, FractionTuple, div

'''

IF_CHECK_INT = 'if %(T)s is int or %(T)s is long:'
ELIF_CHECK_INT = 'elif %(T)s is int or %(T)s is long:'
IF_CHECK_REAL = 'if %(T)s is int or %(T)s is long or %(T)s is FractionTuple or %(T)s is float or %(T)s is Float:'
IF_CHECK_COMPLEX = 'if %(T)s is cls or %(T)s is complex:'

#=======================================================
# Constructor macros
#=======================================================

RETURN_FRACTION = '''\
return cls((%(NUMER)s, %(DENOM)s))
'''

FRACTION_NORMALIZE = '''\
%(RNUMER)s = _x = %(NUMER)s
%(RDENOM)s = _y = %(DENOM)s
while _y:
    _x, _y = _y, _x %(MOD)s _y
if _x != 1:
    %(RNUMER)s //= _x
    %(RDENOM)s //= _x
'''

RETURN_FRACTION2 = '''\
@FRACTION_NORMALIZE(NUMER=%(NUMER)s; DENOM=%(DENOM)s; RNUMER=_p; RDENOM=_q; MOD=%(MOD)s)
if _q == 1:
    return _p
@RETURN_FRACTION(NUMER=_p; DENOM=_q)
'''

RETURN_COMPLEX = '''\
%(TMP)s = new(cls)
%(TMP)s.real = %(REAL)s
%(TMP)s.imag = %(IMAG)s
return %(TMP)s
'''

RETURN_COMPLEX2 = '''\
%(TMP)s = %(IMAG)s
if not %(TMP)s:
    return %(REAL)s
@RETURN_COMPLEX(REAL=%(REAL)s; IMAG=%(TMP)s)
'''

#=======================================================
# ADD macros
#=======================================================

ADD_FRACTION_INT = '''\
p, q = %(LHS)s
@RETURN_FRACTION(NUMER=p+q*(%(RHS)s); DENOM=q)
'''
ADDOP_FRACTION_FRACTION = '''\
p, q = %(LHS)s
r, s = %(RHS)s
%(TMP)s = p*s %(SIGN)s q*r
if not %(TMP)s:
    return 0
@RETURN_FRACTION2(NUMER=%(TMP)s; DENOM=q*s; MOD=%(MOD)s)
'''
ADD_FRACTION_FRACTION = '''\
@ADDOP_FRACTION_FRACTION(LHS=%(LHS)s; RHS=%(RHS)s; SIGN=+; MOD=%%)
'''

ADD_COMPLEX_REAL = '@RETURN_COMPLEX(REAL=%(LHS)s.real + %(RHS)s; IMAG=%(LHS)s.imag)\n'
ADD_COMPLEX_COMPLEX = '@RETURN_COMPLEX2(REAL=%(LHS)s.real + %(RHS)s.real; IMAG=%(LHS)s.imag + %(RHS)s.imag)\n'

#=======================================================
# SUB macros
#=======================================================

SUB_FRACTION_INT = '''\
p, q = %(LHS)s
@RETURN_FRACTION(NUMER=p-q*(%(RHS)s); DENOM=q)
'''
SUB_INT_FRACTION = '''\
p, q = %(RHS)s
@RETURN_FRACTION(NUMER=q*(%(LHS)s) - p; DENOM=q)
'''
SUB_FRACTION_FRACTION = '''\
@ADDOP_FRACTION_FRACTION(LHS=%(LHS)s; RHS=%(RHS)s; SIGN=-; MOD=%%)
'''

SUB_COMPLEX_REAL = '@RETURN_COMPLEX(REAL=%(LHS)s.real - %(RHS)s; IMAG=%(LHS)s.imag)\n'
SUB_COMPLEX_COMPLEX = '@RETURN_COMPLEX2(REAL=%(LHS)s.real - %(RHS)s.real; IMAG=%(LHS)s.imag - %(RHS)s.imag)\n'
SUB_REAL_COMPLEX = '@RETURN_COMPLEX(REAL=%(LHS)s - %(RHS)s.real; IMAG=-%(RHS)s.imag)\n'

#=======================================================
# MUL macros
#=======================================================

MUL_COMPLEX_REAL = '@RETURN_COMPLEX(REAL=%(LHS)s.real*%(RHS)s; IMAG=%(LHS)s.imag*%(RHS)s)\n'
MUL_COMPLEX_COMPLEX = '''\
a, b = %(LHS)s.real, %(LHS)s.imag
c, d = %(RHS)s.real, %(RHS)s.imag
@RETURN_COMPLEX2(REAL=a*c-b*d; IMAG=b*c+a*d)
'''

#=======================================================
# DIV macros
#=======================================================

DIV_VALUE_VALUE = '''\
_p, _q = %(LHS)s, %(RHS)s
if not _q:
    raise ZeroDivisionError(repr(%(LHS)s) + " / " + repr(%(RHS)s))
_tp = type(_p)
@IF_CHECK_INT(T=_tp)
    _tq = type(_q)
    @IF_CHECK_INT(T=_tq)
        @FRACTION_NORMALIZE(NUMER=_p; DENOM=_q; RNUMER=_rp; RDENOM=_rq; MOD=%(MOD)s)
        if _rq == 1:
            %(RESULT)s = _rp
        %(RESULT)s = FractionTuple((_rp, _rq))
    else:
        %(RESULT)s = _p / _q
else:
    %(RESULT)s = _p / _q
'''

DIV_COMPLEX_REAL = '@RETURN_COMPLEX(REAL=div(%(LHS)s.real,%(RHS)s); IMAG=div(%(LHS)s.imag,%(RHS)s))\n'
DIV_COMPLEX_COMPLEX = '''\
a, b = %(LHS)s.real, %(LHS)s.imag
c, d = %(RHS)s.real, %(RHS)s.imag
mag = c*c + d*d
im = b*c-a*d
@DIV_VALUE_VALUE(LHS=a*c+b*d; RHS=mag; RESULT=re; MOD=%(MOD)s)
if not im:
    return re
@DIV_VALUE_VALUE(LHS=im; RHS=mag; RESULT=im; MOD=%(MOD)s)
@RETURN_COMPLEX(REAL=re; IMAG=im)
'''
DIV_REAL_COMPLEX = '''\
%(TMP)s = %(LHS)s
c, d = %(RHS)s.real, %(RHS)s.imag
mag = c*c + d*d
im = div(-%(TMP)s*d, mag)
re = div(%(TMP)s*c, mag)
@RETURN_COMPLEX(REAL=re; IMAG=im)
'''

#=======================================================
# POW macros
#=======================================================

POW_COMPLEX_INT = '''\
a, b = %(LHS)s.real, %(LHS)s.imag
n = %(RHS)s
if not a:
    case = n %% 4
    if not case:
        return b**n
    elif case == 1:
        @RETURN_COMPLEX(REAL=0; IMAG=b**n)
    elif case == 2:
        return -(b**n)
    else:
        @RETURN_COMPLEX(REAL=0; IMAG=-b**n)
ta, tb = type(a), type(b)
m = 1
if ta is FractionTuple:
    if tb is FractionTuple:
        m = (a[1] * b[1]) ** n
        a, b = a[0]*b[1], a[1]*b[0]
    @ELIF_CHECK_INT(T=tb)
        m = a[1] ** n
        a, b = a[0], a[1]*b
elif tb is FractionTuple:
    @IF_CHECK_INT(T=ta)
        m = b[1] ** n
        a, b = a*b[1], b[0]
c, d = 1, 0
while n:
    if n & 1:
        c, d = a*c-b*d, b*c+a*d
        n -= 1
    a, b = a*a-b*b, 2*a*b
    n //= 2
if m==1:
    @RETURN_COMPLEX2(REAL=c; IMAG=d)
if d:
    @RETURN_COMPLEX(REAL=div(c, m); IMAG=div(d, m))
return div(c, m)
'''

def main():
    f = open(targetfile_py, 'w')
    print >> f, template
    print >> f, preprocess('''

def fraction_add(self, other, cls=FractionTuple):
    t = type(other)
    @IF_CHECK_INT(T=t)
        @ADD_FRACTION_INT(LHS=self; RHS=other)
    elif t is cls:
        @ADD_FRACTION_FRACTION(LHS=self; RHS=other)
    return NotImplemented

def fraction_sub(self, other, cls=FractionTuple):
    t = type(other)
    @IF_CHECK_INT(T=t)
        @SUB_FRACTION_INT(LHS=self; RHS=other)
    elif t is cls:
        @SUB_FRACTION_FRACTION(LHS=self; RHS=other)
    return NotImplemented

def fraction_rsub(self, other, cls=FractionTuple):
    t = type(other)
    @IF_CHECK_INT(T=t)
        @SUB_INT_FRACTION(RHS=self; LHS=other)
    return NotImplemented

def complex_add(self, other, new=object.__new__, cls=Complex):
    t = type(other)
    @IF_CHECK_REAL(T=t)
        @ADD_COMPLEX_REAL(LHS=self; RHS=other)
    @IF_CHECK_COMPLEX(T=t)
        @ADD_COMPLEX_COMPLEX(LHS=self; RHS=other)
    return NotImplemented

def complex_sub(self, other, new=object.__new__, cls=Complex):
    t = type(other)
    @IF_CHECK_REAL(T=t)
        @SUB_COMPLEX_REAL(LHS=self; RHS=other)
    @IF_CHECK_COMPLEX(T=t)
        @SUB_COMPLEX_COMPLEX(LHS=self; RHS=other)
    return NotImplemented

def complex_rsub(self, other, new=object.__new__, cls=Complex):
    t = type(other)
    @IF_CHECK_REAL(T=t)
        @SUB_REAL_COMPLEX(LHS=other; RHS=self)
    if t is complex:
        @SUB_COMPLEX_COMPLEX(LHS=other; RHS=self)
    return NotImplemented

def complex_mul(self, other, new=object.__new__, cls=Complex):
    t = type(other)
    @IF_CHECK_REAL(T=t)
        @MUL_COMPLEX_REAL(LHS=self; RHS=other)
    @IF_CHECK_COMPLEX(T=t)
        @MUL_COMPLEX_COMPLEX(LHS=self; RHS=other)
    return NotImplemented

def complex_div(self, other, new=object.__new__, cls=Complex):
    t = type(other)
    @IF_CHECK_REAL(T=t)
        @DIV_COMPLEX_REAL(LHS=self; RHS=other; MOD=%)
    @IF_CHECK_COMPLEX(T=t)
        @DIV_COMPLEX_COMPLEX(LHS=self; RHS=other; MOD=%)
    return NotImplemented

def complex_rdiv(self, other, new=object.__new__, cls=Complex):
    t = type(other)
    @IF_CHECK_REAL(T=t)
        @DIV_REAL_COMPLEX(LHS=other; RHS=self; MOD=%)
    if t is complex:
        @DIV_COMPLEX_COMPLEX(LHS=other; RHS=self; MOD=%)
    return NotImplemented

def complex_pow(self, other, m=None, new=object.__new__, cls=Complex):
    t = type(other)
    @IF_CHECK_INT(T=t)
        if not other:
            return 1
        if other==1:
            return self
        if other==2:
            return self*self
        if other < 0:
            base, exponent = 1/self, -other
        else:
            base, exponent = self, other
        @POW_COMPLEX_INT(LHS=base; RHS=exponent)
    return NotImplemented
    ''')

    f.close()


if __name__=='__main__':
    main()
