#!/usr/bin/env python
#
# Created by Pearu Peterson in Febuary 2008
#

import os

def preprocess(source, tmp_cache=[1]):
    result = []
    for line in source.splitlines():
        if line.lstrip().startswith('@'):
            prefix, rest = line.split('@',1)
            i = rest.index('(')
            name = rest[:i]
            tmp_cache[0] += 1
            d = {'TMP':'_tmp%s' % (tmp_cache[0])}
            for arg in rest.strip()[i+1:-1].split(';'):
                key, value = arg.split('=',1)
                d[key.strip()] = value.strip()
            try:
                templ = eval(name, globals(), {})
            except NameError, msg:
                templ = '@' + rest
                print 'NameError: %s (while processing %r)' % (msg, line.strip())
            else:
                if '@' in templ:
                    templ = preprocess(templ)
            result.append(prefix + '#' + rest)
            try:
                templ_d = templ % d
            except KeyError, msg:
                print 'KeyError: %s (while processing %r)' % (msg, line.lstrip())
                print d, `templ`
                continue
            for l in templ_d.splitlines():
                result.append(prefix + l)
        else:
            result.append(line)
    return '\n'.join(result)

cwd = os.path.abspath(os.path.dirname(__file__))
targetfile_py = os.path.join(cwd,'methods.py')

template = '''\
"""
This file is generated by the sympycore/arithmetic/mk_methods.py script.
DO NOT CHANGE THIS FILE DIRECTLY!!!
"""

from .numbers import Complex, Float, FractionTuple, realtypes

'''

RETURN_COMPLEX = '''\
%(TMP)s = new(cls)
%(TMP)s.real = %(REAL)s
%(TMP)s.imag = %(IMAG)s
return %(TMP)s
'''

RETURN_COMPLEX2 = '''\
%(TMP)s = %(IMAG)s
if not %(TMP)s:
    return %(REAL)s
@RETURN_COMPLEX(REAL=%(REAL)s; IMAG=%(TMP)s)
'''

ADD_COMPLEX_REAL = '@RETURN_COMPLEX(REAL=%(LHS)s.real + %(RHS)s; IMAG=%(LHS)s.imag)\n'
ADD_COMPLEX_COMPLEX = '@RETURN_COMPLEX2(REAL=%(LHS)s.real + %(RHS)s.real; IMAG=%(LHS)s.imag + %(RHS)s.imag)\n'

def main():
    f = open(targetfile_py, 'w')
    print >> f, template
    print >> f, preprocess('''

def complex_add(self, other, new=object.__new__, cls=Complex):
    t = type(other)
    if t is int or t is long or t is FractionTuple or t is float or t is Float:
        @ADD_COMPLEX_REAL(LHS=self; RHS=other)
    if t is cls or t is complex:
        @ADD_COMPLEX_COMPLEX(LHS=self; RHS=other)
    return NotImplemented

    ''')

    f.close()


if __name__=='__main__':
    main()
