#!/usr/bin/env python
#
# Created by Pearu Peterson in Febuary 2008
#

import os

cwd = os.path.abspath(os.path.dirname(__file__))
pairs_ops_py = os.path.join(cwd,'pairs_ops.py')

template = '''\
"""This file is generated by mk_pairs.py script.
Do not change this file directly!
"""

from ..utils import NUMBER, SYMBOL, TERMS, FACTORS, RedirectOperation

'''

ADD_NUMBER_NUMBER = '''\
obj = new(cls)
obj.head = NUMBER
obj.data = %(LHS)s.data + %(RHS)s.data
return obj
'''

ADD_NUMBER_TERMS = '''\
value = %(LHS)s.data
try:
    if not value:
        return %(RHS)s
except RedirectOperation:
    r = value.__add__(%(RHS)s)
    if r is not NotImplemented:
        return cls.convert(r)
pairs = dict(%(RHS)s.data)
one = cls.one
b = pairs.get(one)
if b is None:
    pairs[one] = value
else:
    c = b + value
    try:
        if c:
            pairs[one] = c
        else:
            del pairs[one]
            if not pairs:
                return cls.zero
    except RedirectOperation:
        pairs[one] = c
obj = new(cls)
obj.head = TERMS
obj.data = pairs
return obj
'''

ADD_NUMBER_SYMBOL = '''\
value = %(LHS)s.data
try:
    if not value:
        return %(RHS)s
except RedirectOperation:
    r = value.__add__(%(RHS)s)
    if r is not NotImplemented:
        return cls.convert(r)
obj = new(cls)
obj.head = TERMS
obj.data = {cls.one: value, %(RHS)s: 1}
return obj
'''

ADD_SYMBOL_SYMBOL = '''\
obj = new(cls)
obj.head = TERMS
if %(LHS)s == %(RHS)s:
    obj.data = {%(LHS)s: 2}
else:
    obj.data = {%(LHS)s: 1, %(RHS)s: 1}
return obj
'''

ADD_TERMS_SYMBOL = '''\
pairs = dict(%(LHS)s.data)
b = pairs.get(%(RHS)s)
if b is None:
    pairs[%(RHS)s] = 1
else:
    c = b + 1
    try:
        if c:
            if len(pairs)==1:
                if c==1:
                    return %(RHS)s
            pairs[%(RHS)s] = c
        else:
            del pairs[%(RHS)s]
            if not pairs:
                return cls.zero
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if c==1:
                    return t
                if t==cls.one:
                    return cls.convert(c)
    except RedirectOperation:
        pairs[%(RHS)s] = c
obj = new(cls)
obj.head = TERMS
obj.data = pairs
return obj
'''

ADD_TERMS_TERMS = '''\
pairs = dict(%(LHS)s.data)
get = pairs.get
for t,c in %(RHS)s.data.iteritems():
    b = get(t)
    if b is None:
        pairs[t] = c
    else:
        c = b + c
        try:
            if c:
                pairs[t] = c
            else:
                del pairs[t]
        except RedirectOperation:
            pairs[t] = c
if not pairs:
    return cls.zero
elif len(pairs)==1:
    t, c = pairs.items()[0]
    if c==1:
        return t
    if t==cls.one:
        return cls.convert(c)
obj = new(cls)
obj.head = TERMS
obj.data = pairs
return obj
'''

def preprocess(source):
    result = []
    for line in source.splitlines():
        if line.lstrip().startswith('@'):
            prefix, rest = line.split('@',1)
            i = rest.index('(')
            name = rest[:i]
            d = {}
            for arg in rest.strip()[i+1:-1].split(','):
                key, value = arg.split('=',1)
                d[key.strip()] = value.strip()
            try:
                templ = eval(name, globals(), {})
            except NameError:
                templ = '@' + rest
            else:
                if '@' in templ:
                    templ = preprocess(templ)
            result.append(prefix + '#' + rest)
            for l in (templ % d).splitlines():
                result.append(prefix + l)
        else:
            result.append(line)
    return '\n'.join(result)

def main():
    f = open(pairs_ops_py, 'w')
    print >> f, template
    print >> f, preprocess('''
def add_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    if type(other) is not cls:
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    lhead = self.head
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            @ADD_NUMBER_NUMBER(LHS=self, RHS=other)
        elif rhead is TERMS:
            @ADD_NUMBER_TERMS(LHS=self, RHS=other)
        else:
            @ADD_NUMBER_SYMBOL(LHS=self, RHS=other)
    elif lhead is TERMS:
        if rhead is NUMBER:
            @ADD_NUMBER_TERMS(LHS=other, RHS=self)
        elif rhead is TERMS:
            @ADD_TERMS_TERMS(LHS=self, RHS=other)
        else:
            @ADD_TERMS_SYMBOL(LHS=self, RHS=other)
    else:
        if rhead is NUMBER:
            @ADD_NUMBER_SYMBOL(LHS=other, RHS=self)
        elif rhead is TERMS:
            @ADD_TERMS_SYMBOL(LHS=other, RHS=self)
        else:
            @ADD_SYMBOL_SYMBOL(LHS=self, RHS=other)
    ''')
    
    f.close()


if __name__=='__main__':
    main()
