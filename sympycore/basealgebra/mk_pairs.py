#!/usr/bin/env python
#
# Created by Pearu Peterson in Febuary 2008
#
# TODO: replace NEWINSTANCE usage with RETURN_NEW where applicable

import os

def preprocess(source):
    result = []
    for line in source.splitlines():
        if line.lstrip().startswith('@'):
            prefix, rest = line.split('@',1)
            i = rest.index('(')
            name = rest[:i]
            d = {}
            for arg in rest.strip()[i+1:-1].split(';'):
                key, value = arg.split('=',1)
                d[key.strip()] = value.strip()
            try:
                templ = eval(name, globals(), {})
            except NameError:
                templ = '@' + rest
            else:
                if '@' in templ:
                    templ = preprocess(templ)
            result.append(prefix + '#' + rest)
            try:
                templ_d = templ % d
            except KeyError:
                print templ, d
            for l in templ_d.splitlines():
                result.append(prefix + l)
        else:
            result.append(line)
    return '\n'.join(result)

# FILE INFORMATION

cwd = os.path.abspath(os.path.dirname(__file__))
pairs_ops_py = os.path.join(cwd,'pairs_ops.py')
template = '''\
"""
This file is generated by the sympycore/basealgebra/mk_pairs.py script.
DO NOT CHANGE THIS FILE DIRECTLY!!!
"""

from ..utils import NUMBER, SYMBOL, TERMS, FACTORS, RedirectOperation
'''

# GENERAL MACROS

NEWINSTANCE = '''\
%(OBJ)s = new(cls)
%(OBJ)s.head = %(HEAD)s
%(OBJ)s.data = %(DATA)s
'''
RETURN_NEW = '''\
obj = new(cls)
obj.head = %(HEAD)s
obj.data = %(DATA)s
return obj
'''

ADD_TERM_VALUE_DICT='''\
b = %(DICT_GET)s(%(TERM)s)
if b is None:
    %(DICT)s[%(TERM)s] = %(VALUE)s
else:
    c = b + %(VALUE)s
    try:
        if c:
            %(DICT)s[%(TERM)s] = c
        else:
            del %(DICT)s[%(TERM)s]
    except RedirectOperation:
        %(DICT)s[%(TERM)s] = c
'''

CANONIZE_TERMS_DICT = '''\
if not %(DICT)s:
    return cls.zero
if len(%(DICT)s)==1:
   t, c = %(DICT)s.items()[0]
   if c==1:
       return t
   if t==cls.one:
       return cls.convert(c)
'''


ADD_VALUE_DICT='''\
@ADD_TERM_VALUE_DICT(TERM=one; VALUE=%(VALUE)s; DICT=%(DICT)s; DICT_GET=%(DICT)s.get)
'''

NEG_DICT_VALUES = '''\
%(DICT_OUT)s = dict([(t, -c) for t,c in %(DICT_IN)s.iteritems()])
'''

# NEG MACROS

NEG_NUMBER = '''\
@RETURN_NEW(HEAD=NUMBER; DATA=-%(OP)s.data)
'''
NEG_SYMBOL = '''\
@RETURN_NEW(HEAD=TERMS; DATA={%(OP)s: -1})
'''
NEG_TERMS = '''\
op_pairs = %(OP)s.data
if len(op_pairs)==1:
    t, c = op_pairs.items()[0]
    c = -c
    if c==1:
        return t
    @RETURN_NEW(HEAD=TERMS; DATA={t:c})
@NEG_DICT_VALUES(DICT_IN=%(OP)s.data; DICT_OUT=pairs)
@RETURN_NEW(HEAD=TERMS; DATA=pairs)
'''
NEG_FACTORS = '''\
@NEG_SYMBOL(OP=%(OP)s)
'''

# ADD,SUB,MUL,DIV VALUE/NUMBER MACROS

ADD_VALUE_NUMBER = '''\
@NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=%(VALUE)s + %(RHS)s.data)
return obj
'''
ADD_NUMBER_VALUE = '''\
@NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=%(LHS)s.data + %(VALUE)s)
return obj
'''
MUL_VALUE_NUMBER = '''\
@NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=%(VALUE)s * %(RHS)s.data)
return obj
'''
MUL_NUMBER_VALUE = '''\
@NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=%(LHS)s.data * %(VALUE)s)
return obj
'''
SUB_VALUE_NUMBER = '''\
@NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=%(VALUE)s - %(RHS)s.data)
return obj
'''
SUB_NUMBER_VALUE = '''\
@NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=%(LHS)s.data - %(VALUE)s)
return obj
'''
DIV_VALUE_NUMBER = '''\
@NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=div(%(VALUE)s, %(RHS)s.data))
return obj
'''
DIV_NUMBER_VALUE = '''\
@NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=div(%(LHS)s.data, %(VALUE)s))
return obj
'''

ADD_NUMBER_NUMBER = '''\
@ADD_VALUE_NUMBER(VALUE=%(LHS)s.data; RHS=%(RHS)s)
'''
MUL_NUMBER_NUMBER = '''\
@MUL_VALUE_NUMBER(VALUE=%(LHS)s.data; RHS=%(RHS)s)
'''
SUB_NUMBER_NUMBER = '''\
@SUB_VALUE_NUMBER(VALUE=%(LHS)s.data; RHS=%(RHS)s)
'''
DIV_NUMBER_NUMBER = '''\
@DIV_VALUE_NUMBER(VALUE=%(LHS)s.data; RHS=%(RHS)s)
'''

ADD_VALUE_SYMBOL = '''\
try:
    if not %(VALUE)s:
        return %(RHS)s
except RedirectOperation:
    pass
@NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={cls.one: %(VALUE)s, %(RHS)s: 1})
return obj
'''
SUB_VALUE_SYMBOL = '''\
try:
    if not %(VALUE)s:
        @NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={%(RHS)s: -1})
        return obj
except RedirectOperation:
    pass
@NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={cls.one: %(VALUE)s, %(RHS)s: -1})
return obj
'''
ADD_SYMBOL_VALUE = '''\
@ADD_VALUE_SYMBOL(VALUE=%(VALUE)s; RHS=%(LHS)s)
'''
SUB_SYMBOL_VALUE = '''\
value = -%(VALUE)s
@ADD_SYMBOL_VALUE(OBJ=obj; LHS=%(LHS)s; VALUE=value)
'''
MUL_VALUE_SYMBOL = '''\
try:
    if not %(VALUE)s:
        return cls.zero
except RedirectOperation:
    pass
@NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={%(RHS)s: %(VALUE)s})
return obj
'''
DIV_VALUE_SYMBOL = '''\
try:
    if not %(VALUE)s:
        return cls.zero
except RedirectOperation:
    pass
@NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={%(RHS)s: -1})
@NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={obj2: %(VALUE)s})
return obj
'''
MUL_SYMBOL_VALUE = '''\
@MUL_VALUE_SYMBOL(VALUE=%(VALUE)s; RHS=%(LHS)s)
'''
DIV_SYMBOL_VALUE = '''\
value = div(1, %(VALUE)s)
@MUL_VALUE_SYMBOL(VALUE=value; RHS=%(LHS)s)
'''

ADD_NUMBER_SYMBOL = '''\
value = %(LHS)s.data
@ADD_VALUE_SYMBOL(VALUE=value; RHS=%(RHS)s)
'''
ADD_SYMBOL_NUMBER = '''\
value = %(RHS)s.data
@ADD_SYMBOL_VALUE(VALUE=value; LHS=%(LHS)s)
'''
SUB_NUMBER_SYMBOL = '''\
value = %(LHS)s.data
@SUB_VALUE_SYMBOL(VALUE=value; RHS=%(RHS)s)
'''
SUB_SYMBOL_NUMBER = '''\
value = %(RHS)s.data
@SUB_SYMBOL_VALUE(VALUE=value; LHS=%(LHS)s)
'''
MUL_NUMBER_SYMBOL = '''\
value = %(LHS)s.data
@MUL_VALUE_SYMBOL(VALUE=value; RHS=%(RHS)s)
'''
MUL_SYMBOL_NUMBER = '''\
value = %(RHS)s.data
@MUL_SYMBOL_VALUE(VALUE=value; LHS=%(LHS)s)
'''
DIV_NUMBER_SYMBOL = '''\
value = %(LHS)s.data
@DIV_VALUE_SYMBOL(VALUE=value; RHS=%(RHS)s)
'''
DIV_SYMBOL_NUMBER = '''\
value = %(RHS)s.data
@DIV_SYMBOL_VALUE(VALUE=value; LHS=%(LHS)s)
'''

ADD_VALUE_TERMS = '''\
try:
    if not %(VALUE)s:
        return %(RHS)s
except RedirectOperation:
    pass
pairs = dict(%(RHS)s.data)
one = cls.one
@ADD_VALUE_DICT(DICT=pairs; VALUE=%(VALUE)s)
@NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
return obj
'''
ADD_TERMS_VALUE = '''\
@ADD_VALUE_TERMS(VALUE=%(VALUE)s; RHS=%(LHS)s)
'''
SUB_VALUE_TERMS = '''\
try:
    if not %(VALUE)s:
        @NEG_TERMS(OP=%(RHS)s)
except RedirectOperation:
    pass
@NEG_DICT_VALUES(DICT_IN=%(RHS)s.data; DICT_OUT=pairs)
one = cls.one
@ADD_VALUE_DICT(DICT=pairs; VALUE=%(VALUE)s)
@NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
return obj
'''
SUB_TERMS_VALUE = '''\
value = -%(VALUE)s
@ADD_VALUE_TERMS(VALUE=value; RHS=%(LHS)s)
'''
#MUL_VALUE_TERMS
#MUL_TERMS_VALUE
#DIV_VALUE_TERMS
#DIV_TERMS_VALUE

ADD_NUMBER_TERMS = '''\
value = %(LHS)s.data
@ADD_VALUE_TERMS(VALUE=value; RHS=%(RHS)s)
'''
ADD_TERMS_NUMBER = '''\
value = %(RHS)s.data
@ADD_TERMS_VALUE(VALUE=value; LHS=%(LHS)s)
'''
SUB_NUMBER_TERMS = '''\
value = %(LHS)s.data
@SUB_VALUE_TERMS(VALUE=value; RHS=%(RHS)s)
'''
SUB_TERMS_NUMBER = '''\
value = %(RHS)s.data
@SUB_TERMS_VALUE(VALUE=value; LHS=%(LHS)s)
'''
MUL_NUMBER_TERMS = '''\
value = %(LHS)s.data
@MUL_VALUE_TERMS(VALUE=value; RHS=%(RHS)s)
'''
DIV_TERMS_NUMBER = '''\
value = %(RHS)s.data
@DIV_TERMS_VALUE(VALUE=value; LHS=%(LHS)s)
'''

ADD_SYMBOL_SYMBOL = '''\
if %(LHS)s == %(RHS)s:
    pairs = {%(LHS)s: 2}
else:
    pairs = {%(LHS)s: 1, %(RHS)s: 1}
@NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
return obj
'''
SUB_SYMBOL_SYMBOL = '''\
if %(LHS)s == %(RHS)s:
    return cls.zero
@NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={%(LHS)s: 1, %(RHS)s: -1})
return obj
'''
MUL_SYMBOL_SYMBOL = '''\
if %(LHS)s == %(RHS)s:
    pairs = {%(LHS)s: 2}
else:
    pairs = {%(LHS)s: 1, %(RHS)s: 1}
@NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
return obj
'''
DIV_SYMBOL_SYMBOL = '''\
if %(LHS)s == %(RHS)s:
    return cls.one
@NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA={%(LHS)s: 1, %(RHS)s: -1})
return obj
'''

ADD_TERMS_SYMBOL = '''\
pairs = dict(%(LHS)s.data)
@ADD_TERM_VALUE_DICT(TERM=%(RHS)s; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
@CANONIZE_TERMS_DICT(DICT=pairs)
@RETURN_NEW(HEAD=TERMS; DATA=pairs)
'''
ADD_SYMBOL_TERMS = '''\
@ADD_TERMS_SYMBOL(LHS=%(RHS)s; RHS=%(LHS)s)
'''
SUB_TERMS_SYMBOL = '''\
pairs = dict(%(LHS)s.data)
@ADD_TERM_VALUE_DICT(TERM=%(RHS)s; VALUE=-1; DICT=pairs; DICT_GET=pairs.get)
@CANONIZE_TERMS_DICT(DICT=pairs)
@RETURN_NEW(HEAD=TERMS; DATA=pairs)
'''
SUB_SYMBOL_TERMS = '''\
@NEG_DICT_VALUES(DICT_IN=%(RHS)s.data; DICT_OUT=pairs)
@ADD_TERM_VALUE_DICT(TERM=%(LHS)s; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
@CANONIZE_TERMS_DICT(DICT=pairs)
@RETURN_NEW(HEAD=TERMS; DATA=pairs)
'''

ADD_TERMS_TERMS = '''\
pairs = dict(%(LHS)s.data)
pairs_get = pairs.get
for t,c in %(RHS)s.data.iteritems():
    @ADD_TERM_VALUE_DICT(TERM=t; VALUE=c; DICT=pairs; DICT_GET=pairs_get)
@CANONIZE_TERMS_DICT(DICT=pairs)
@RETURN_NEW(HEAD=TERMS; DATA=pairs)
'''
SUB_TERMS_TERMS = '''\
pairs = dict(%(LHS)s.data)
pairs_get = pairs.get
for t,c in %(RHS)s.data.iteritems():
    @ADD_TERM_VALUE_DICT(TERM=t; VALUE=-c; DICT=pairs; DICT_GET=pairs_get)
@CANONIZE_TERMS_DICT(DICT=pairs)
@RETURN_NEW(HEAD=TERMS; DATA=pairs)
'''


def main():
    f = open(pairs_ops_py, 'w')
    print >> f, template
    print >> f, preprocess('''

def neg_method(self, NUMBER=NUMBER, TERMS=TERMS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if lhead is NUMBER:
        @NEG_NUMBER(OP=self)
    elif lhead is TERMS:
        @NEG_TERMS(OP=self)
    else:
        @NEG_SYMBOL(OP=self)

def add_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                @ADD_VALUE_NUMBER(VALUE=other; RHS=self)
            elif lhead is TERMS:
                @ADD_VALUE_TERMS(VALUE=other; RHS=self)
            else:
                @ADD_VALUE_SYMBOL(VALUE=other; RHS=self)
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            @ADD_NUMBER_NUMBER(LHS=self; RHS=other)
        elif rhead is TERMS:
            @ADD_NUMBER_TERMS(LHS=self; RHS=other)
        else:
            @ADD_NUMBER_SYMBOL(LHS=self; RHS=other)
    elif lhead is TERMS:
        if rhead is NUMBER:
            @ADD_NUMBER_TERMS(LHS=other; RHS=self)
        elif rhead is TERMS:
            @ADD_TERMS_TERMS(LHS=self; RHS=other)
        else:
            @ADD_TERMS_SYMBOL(LHS=self; RHS=other)
    else:
        if rhead is NUMBER:
            @ADD_NUMBER_SYMBOL(LHS=other; RHS=self)
        elif rhead is TERMS:
            @ADD_TERMS_SYMBOL(LHS=other; RHS=self)
        else:
            @ADD_SYMBOL_SYMBOL(LHS=self; RHS=other)

def sub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                @SUB_NUMBER_VALUE(VALUE=other; LHS=self)
            elif lhead is TERMS:
                @SUB_TERMS_VALUE(VALUE=other; LHS=self)
            else:
                @SUB_SYMBOL_VALUE(VALUE=other; LHS=self)
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            @SUB_NUMBER_NUMBER(LHS=self; RHS=other)
        elif rhead is TERMS:
            @SUB_NUMBER_TERMS(LHS=self; RHS=other)
        else:
            @SUB_NUMBER_SYMBOL(LHS=self; RHS=other)
    elif lhead is TERMS:
        if rhead is NUMBER:
            @SUB_TERMS_NUMBER(LHS=self; RHS=other)
        elif rhead is TERMS:
            @SUB_TERMS_TERMS(LHS=self; RHS=other)
        else:
            @SUB_TERMS_SYMBOL(LHS=self; RHS=other)
    else:
        if rhead is NUMBER:
            @SUB_SYMBOL_NUMBER(LHS=self; RHS=other)
        elif rhead is TERMS:
            @SUB_SYMBOL_TERMS(LHS=self; RHS=other)
        else:
            @SUB_SYMBOL_SYMBOL(LHS=self; RHS=other)

def radd_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            @ADD_VALUE_NUMBER(VALUE=other; RHS=self)
        elif lhead is TERMS:
            @ADD_VALUE_TERMS(VALUE=other; RHS=self)
        else:
            @ADD_VALUE_SYMBOL(VALUE=other; RHS=self)
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other + self

def rsub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            @SUB_VALUE_NUMBER(VALUE=other; RHS=self)
        elif lhead is TERMS:
            @SUB_VALUE_TERMS(VALUE=other; RHS=self)
        else:
            @SUB_VALUE_SYMBOL(VALUE=other; RHS=self)
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other - self

    ''')


    f.close()


if __name__=='__main__':
    main()
