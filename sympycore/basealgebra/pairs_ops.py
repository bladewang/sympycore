"""Generated low-level arithmetic methods for CollectingField.

This file is generated by the src/mk_pairs_ops.py script.
See http://sympycore.googlecode.com/ for more information.

DO NOT CHANGE THIS FILE DIRECTLY!!!
"""

from ..core import Expr
from ..utils import NUMBER, SYMBOL, TERMS, FACTORS
from ..arithmetic.numbers import (normalized_fraction, mpq, try_power,
  numbertypes, inttypes_set, numbertypes_set)
from ..arithmetic.infinity import Infinity

def div(a, b, cls):
    if type(b) in inttypes_set:
        if type(a) in inttypes_set:
            if not b:
                if not a:
                    return cls.undefined
                return cls.zoo
            return normalized_fraction(a, b)
        if not b:
            return a * cls.zoo
        if b == 1:
            return a
        return a * mpq((1,b))
    return a / b




def expand_mul_method(cls, self, other):
    lhead, ldata = self.pair
    rhead, rdata = other.pair
    if lhead is FACTORS:
        if rhead is FACTORS:
            #MUL_FACTORS_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            pairs_get = pairs.get
            number = 1
            for t,c in rdata.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=+; USIGN=; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                _tmp9 = pairs_get(t)
                if _tmp9 is None:
                    pairs[t] =  c
                else:
                    _tmp9 = _tmp9 + c
                    if type(_tmp9) is cls and _tmp9.head is NUMBER:
                        _tmp9 = _tmp9.data
                    if _tmp9:
                        if t.head is NUMBER:
                            del pairs[t]
                            z, sym = try_power(t.data, _tmp9)
                            if sym:
                                for t1, c1 in sym:
                                    #NEWINSTANCE(OBJ=tt; HEAD=NUMBER; DATA=t1)
                                    tt = cls(NUMBER, t1)
                                    #ADD_TERM_VALUE_DICT(DICT=pairs; DICT_GET=pairs_get; TERM=tt; VALUE=c1; SIGN=+; USIGN=)
                                    _tmp23 = pairs_get(tt)
                                    if _tmp23 is None:
                                        pairs[tt] =  c1
                                    else:
                                        _tmp23 = _tmp23 + c1
                                        if _tmp23:
                                            pairs[tt] = _tmp23
                                        else:
                                            del pairs[tt]
                            number = number * z
                        else:
                            pairs[t] = _tmp9
                    else:
                        del pairs[t]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   if number==1:
                       return t
                   #RETURN_NEW(HEAD=TERMS; DATA={t: number})
                   #NEWINSTANCE(OBJ=_tmp37; HEAD=TERMS; DATA={t: number})
                   _tmp37 = cls(TERMS, {t: number})
                   return _tmp37
               if t==cls.one:
                   return number
            if number == 1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp51; HEAD=FACTORS; DATA=pairs)
                _tmp51 = cls(FACTORS, pairs)
                return _tmp51
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = cls(FACTORS, pairs)
            #RETURN_NEW(HEAD=TERMS; DATA={obj: number})
            #NEWINSTANCE(OBJ=_tmp72; HEAD=TERMS; DATA={obj: number})
            _tmp72 = cls(TERMS, {obj: number})
            return _tmp72
        elif rhead is NUMBER:
            return self # other must be one
        else:
            #MUL_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=other; RHSDATA=rdata)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp100 = pairs.get(other)
            if _tmp100 is None:
                pairs[other] =  1
            else:
                _tmp100 = _tmp100 + 1
                if _tmp100:
                    pairs[other] = _tmp100
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp114; HEAD=FACTORS; DATA=pairs)
            _tmp114 = cls(FACTORS, pairs)
            return _tmp114
    elif lhead is NUMBER:
        return other # self must be one
    else:
        if rhead is FACTORS:
            #MUL_SYMBOL_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_FACTORS_SYMBOL(LHS=other; LHSDATA=rdata; RHS=self; RHSDATA=ldata)
            pairs = rdata.copy()
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self; RHSDATA=ldata)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp149 = pairs.get(self)
            if _tmp149 is None:
                pairs[self] =  1
            else:
                _tmp149 = _tmp149 + 1
                if _tmp149:
                    pairs[self] = _tmp149
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp163; HEAD=FACTORS; DATA=pairs)
            _tmp163 = cls(FACTORS, pairs)
            return _tmp163
        elif rhead is NUMBER:
            return self # other must be one
        else:
            #MUL_SYMBOL_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp184; HEAD=FACTORS; DATA=pairs)
            _tmp184 = cls(FACTORS, pairs)
            return _tmp184

#def rsub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
#    cls = type(self)
#    lhead, ldata = self.pair
#    if isinstance(other, cls.coefftypes):
#        if lhead is NUMBER:
#            @SUB_VALUE_NUMBER(VALUE=other; RHS=self; RHSDATA=ldata)
#        elif lhead is TERMS:
#            @SUB_VALUE_TERMS(VALUE=other; RHS=self; RHSDATA=ldata)
#        else:
#            @SUB_VALUE_SYMBOL(VALUE=other; RHS=self; RHSDATA=ldata)
#    other = cls.convert(other, False)
#    if other is NotImplemented:
#        return other
#    return other - self

def rdiv_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #DIV_VALUE_NUMBER(VALUE=other; RHS=self; RHSDATA=ldata)
            #RETURN_NEW2(HEAD=NUMBER; DATA=div(other, ldata, cls))
            _tmp205 = div(other, ldata, cls)
            if isinstance(_tmp205, Infinity):
                return _tmp205
            #RETURN_NEW(HEAD=NUMBER; DATA=_tmp205)
            #NEWINSTANCE(OBJ=_tmp212; HEAD=NUMBER; DATA=_tmp205)
            _tmp212 = cls(NUMBER, _tmp205)
            return _tmp212
        elif lhead is TERMS:
            #DIV_VALUE_TERMS(VALUE=other; RHS=self; RHSDATA=ldata)
            _tmp226 = other
            if not _tmp226:
                return cls.zero
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = div(other, c, cls)
                t = 1/t
                if c==1:
                    return t
                if t==cls.one:
                    return cls(NUMBER, c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp233; HEAD=TERMS; DATA={t: c})
                _tmp233 = cls(TERMS, {t: c})
                return _tmp233
            #NEWINSTANCE(OBJ=_tmp226; HEAD=FACTORS; DATA={self: -1})
            _tmp226 = cls(FACTORS, {self: -1})
            if other==1:
                return _tmp226
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp226: other})
            #NEWINSTANCE(OBJ=_tmp254; HEAD=TERMS; DATA={_tmp226: other})
            _tmp254 = cls(TERMS, {_tmp226: other})
            return _tmp254
        elif lhead is FACTORS:
            #DIV_VALUE_FACTORS(VALUE=other; RHS=self; RHSDATA=ldata)
            
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = -c
                if c==1:
                    return t * other
                new_pairs = {t: c}
            else:
                #NEG_DICT_VALUES(DICT_IN=pairs; DICT_OUT=new_pairs)
                new_pairs = dict([(t, -c) for t,c in pairs.iteritems()])
            #NEWINSTANCE(OBJ=_tmp268; HEAD=FACTORS; DATA=new_pairs)
            _tmp268 = cls(FACTORS, new_pairs)
            if other==1:
                return _tmp268
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp268: other})
            #NEWINSTANCE(OBJ=_tmp289; HEAD=TERMS; DATA={_tmp268: other})
            _tmp289 = cls(TERMS, {_tmp268: other})
            return _tmp289
        else:
            #DIV_VALUE_SYMBOL(VALUE=other; RHS=self; RHSDATA=ldata)
            _tmp303 = other
            if not _tmp303:
                return cls.zero
            #NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={self: -1})
            obj2 = cls(FACTORS, {self: -1})
            if _tmp303==1:
                return obj2
            #RETURN_NEW(HEAD=TERMS; DATA={obj2: _tmp303})
            #NEWINSTANCE(OBJ=_tmp317; HEAD=TERMS; DATA={obj2: _tmp303})
            _tmp317 = cls(TERMS, {obj2: _tmp303})
            return _tmp317
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other / self

def pow_method(self, other, z = None, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    type_other = type(other)
    if type_other is cls:
        rhead, rdata = other.pair
        if rhead is NUMBER:
            other = rdata
        type_other = type(other)
    if type_other in inttypes_set:
        if not other:
            return cls.one
        if other==1:
            return self
        if lhead is NUMBER:
            #POW_NUMBER_INT(VALUE=other; LHS=self; LHSDATA=ldata)
            if other < 0:
                #RETURN_NEW(HEAD=NUMBER; DATA=div(1, (ldata)**(-other), cls))
                #NEWINSTANCE(OBJ=_tmp338; HEAD=NUMBER; DATA=div(1, (ldata)**(-other), cls))
                _tmp338 = cls(NUMBER, div(1, (ldata)**(-other), cls))
                return _tmp338
            #RETURN_NEW(HEAD=NUMBER; DATA=(ldata)**(other))
            #NEWINSTANCE(OBJ=_tmp352; HEAD=NUMBER; DATA=(ldata)**(other))
            _tmp352 = cls(NUMBER, (ldata)**(other))
            return _tmp352
        elif lhead is TERMS:
            #POW_TERMS_INT(VALUE=other; LHS=self; LHSDATA=ldata)
            pairs = ldata
            if len(pairs)==1:
                t,c = pairs.items()[0]
                if other < 0:
                    c = div(1, c**(-other), cls)
                else:
                    c = c ** (other)
                t = t**(other)
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                #NEWINSTANCE(OBJ=_tmp373; HEAD=TERMS; DATA={t:c})
                _tmp373 = cls(TERMS, {t:c})
                return _tmp373
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp387; HEAD=FACTORS; DATA={self: other})
            _tmp387 = cls(FACTORS, {self: other})
            return _tmp387
        elif lhead is FACTORS:
            #POW_FACTORS_INT(VALUE=other; LHS=self; LHSDATA=ldata)
            #MUL_DICT_VALUES(DICT_IN=ldata; DICT_OUT=pairs; OP=other)
            pairs = dict([(t, c*other) for t,c in ldata.iteritems()])
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if c==1:
                    return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp415; HEAD=FACTORS; DATA=pairs)
            _tmp415 = cls(FACTORS, pairs)
            return _tmp415
        else:
            #POW_SYMBOL_INT(VALUE=other; LHS=self; LHSDATA=ldata)
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp436; HEAD=FACTORS; DATA={self: other})
            _tmp436 = cls(FACTORS, {self: other})
            return _tmp436
    if lhead is NUMBER and isinstance(other, cls.exptypes):
        #POW_NUMBER_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
        z, sym = try_power(ldata, other)
        if not sym:
            #RETURN_NEW(HEAD=NUMBER; DATA=z)
            #NEWINSTANCE(OBJ=_tmp457; HEAD=NUMBER; DATA=z)
            _tmp457 = cls(NUMBER, z)
            return _tmp457
        factors = {}
        for t,c in sym:
            factors[cls(NUMBER, t)] = c
        #NEWINSTANCE(OBJ=_tmp450; HEAD=FACTORS; DATA=factors)
        _tmp450 = cls(FACTORS, factors)
        if z==1:
            return _tmp450
        #RETURN_NEW(HEAD=TERMS; DATA={_tmp450: z})
        #NEWINSTANCE(OBJ=_tmp478; HEAD=TERMS; DATA={_tmp450: z})
        _tmp478 = cls(TERMS, {_tmp450: z})
        return _tmp478
    if type_other is mpq:
        if lhead is TERMS:
            #POW_TERMS_FRAC(VALUE=other; LHS=self; LHSDATA=ldata)
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if isinstance(c, numbertypes) and not c==-1:
                    if c < 0:
                        z, sym = try_power(-c, other)
                        factors = {-t: other}
                    else:
                        z, sym = try_power(c, other)
                        factors = {t: other}
                    for t,c in sym:
                        factors[cls(NUMBER, t)] = c
                    #NEWINSTANCE(OBJ=_tmp492; HEAD=FACTORS; DATA=factors)
                    _tmp492 = cls(FACTORS, factors)
                    if z==1:
                        return _tmp492
                    #RETURN_NEW(HEAD=TERMS; DATA={_tmp492: z})
                    #NEWINSTANCE(OBJ=_tmp506; HEAD=TERMS; DATA={_tmp492: z})
                    _tmp506 = cls(TERMS, {_tmp492: z})
                    return _tmp506
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp520; HEAD=FACTORS; DATA={self: other})
            _tmp520 = cls(FACTORS, {self: other})
            return _tmp520
        else:
            #POW_SYMBOL_FRAC(VALUE=other; LHS=self; LHSDATA=ldata)
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp541; HEAD=FACTORS; DATA={self: other})
            _tmp541 = cls(FACTORS, {self: other})
            return _tmp541
    if type_other is cls or isinstance(other, cls.exptypes):
        if lhead is NUMBER:
            if ldata==1:
                return self
        elif lhead is FACTORS:
            #POW_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other)
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if type(c) in inttypes_set:
                    #RETURN_NEW(HEAD=FACTORS; DATA={t: other * c})
                    #NEWINSTANCE(OBJ=_tmp562; HEAD=FACTORS; DATA={t: other * c})
                    _tmp562 = cls(FACTORS, {t: other * c})
                    return _tmp562
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp576; HEAD=FACTORS; DATA={self: other})
            _tmp576 = cls(FACTORS, {self: other})
            return _tmp576
        #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
        #NEWINSTANCE(OBJ=_tmp590; HEAD=FACTORS; DATA={self: other})
        _tmp590 = cls(FACTORS, {self: other})
        return _tmp590
    return NotImplemented

def div_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #DIV_NUMBER_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #RETURN_NEW2(HEAD=NUMBER; DATA=div(ldata, other, cls))
                _tmp611 = div(ldata, other, cls)
                if isinstance(_tmp611, Infinity):
                    return _tmp611
                #RETURN_NEW(HEAD=NUMBER; DATA=_tmp611)
                #NEWINSTANCE(OBJ=_tmp618; HEAD=NUMBER; DATA=_tmp611)
                _tmp618 = cls(NUMBER, _tmp611)
                return _tmp618
            elif lhead is TERMS:
                #DIV_TERMS_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_TERMS_VALUE(LHS=self; LHSDATA=ldata; VALUE=div(1,other,cls))
                #MUL_VALUE_TERMS(VALUE=div(1,other,cls); RHS=self; RHSDATA=ldata)
                _tmp646 = div(1,other,cls)
                if not _tmp646:
                    return cls.zero
                pairs = ldata
                if len(pairs)==1:
                    t, c = pairs.items()[0]
                    c = _tmp646 * c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp653; HEAD=TERMS; DATA={t: c})
                    _tmp653 = cls(TERMS, {t: c})
                    return _tmp653
                if _tmp646==1:
                    return self
                pairs = {}
                for t,c in ldata.iteritems():
                    pairs[t] = _tmp646 * c
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                obj = cls(TERMS, pairs)
                coeff, terms = self._coeff_terms
                if terms is not None:
                    c = coeff * _tmp646
                    if not c==1:
                        obj._coeff_terms = (c, terms)
                else:
                    obj._coeff_terms = (_tmp646, self)
                return obj
            elif lhead is FACTORS:
                #DIV_FACTORS_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_FACTORS_VALUE(LHS=self; LHSDATA=ldata; VALUE=div(1,other,cls))
                #MUL_SYMBOL_VALUE(VALUE=div(1,other,cls); LHS=self; LHSDATA=ldata)
                #MUL_VALUE_SYMBOL(VALUE=div(1,other,cls); RHS=self; RHSDATA=ldata)
                _tmp695 = div(1,other,cls)
                if not _tmp695:
                    return cls.zero
                if _tmp695==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp695})
                #NEWINSTANCE(OBJ=_tmp702; HEAD=TERMS; DATA={self: _tmp695})
                _tmp702 = cls(TERMS, {self: _tmp695})
                return _tmp702
            else:
                #DIV_SYMBOL_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_VALUE_SYMBOL(VALUE=div(1, other, cls); RHS=self; RHSDATA=ldata)
                _tmp723 = div(1, other, cls)
                if not _tmp723:
                    return cls.zero
                if _tmp723==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp723})
                #NEWINSTANCE(OBJ=_tmp730; HEAD=TERMS; DATA={self: _tmp723})
                _tmp730 = cls(TERMS, {self: _tmp723})
                return _tmp730
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead, rdata = other.pair
    if lhead is NUMBER:
        if rhead is NUMBER:
            #DIV_NUMBER_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_VALUE_NUMBER(VALUE=ldata; RHS=other; RHSDATA=rdata)
            #RETURN_NEW2(HEAD=NUMBER; DATA=div(ldata, rdata, cls))
            _tmp758 = div(ldata, rdata, cls)
            if isinstance(_tmp758, Infinity):
                return _tmp758
            #RETURN_NEW(HEAD=NUMBER; DATA=_tmp758)
            #NEWINSTANCE(OBJ=_tmp765; HEAD=NUMBER; DATA=_tmp758)
            _tmp765 = cls(NUMBER, _tmp758)
            return _tmp765
        elif rhead is TERMS:
            #DIV_NUMBER_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_VALUE_TERMS(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp786 = ldata
            if not _tmp786:
                return cls.zero
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = div(ldata, c, cls)
                t = 1/t
                if c==1:
                    return t
                if t==cls.one:
                    return cls(NUMBER, c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp793; HEAD=TERMS; DATA={t: c})
                _tmp793 = cls(TERMS, {t: c})
                return _tmp793
            #NEWINSTANCE(OBJ=_tmp786; HEAD=FACTORS; DATA={other: -1})
            _tmp786 = cls(FACTORS, {other: -1})
            if ldata==1:
                return _tmp786
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp786: ldata})
            #NEWINSTANCE(OBJ=_tmp814; HEAD=TERMS; DATA={_tmp786: ldata})
            _tmp814 = cls(TERMS, {_tmp786: ldata})
            return _tmp814
        elif rhead is FACTORS:
            #DIV_NUMBER_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_VALUE_FACTORS(VALUE=ldata; RHS=other; RHSDATA=rdata)
            
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = -c
                if c==1:
                    return t * ldata
                new_pairs = {t: c}
            else:
                #NEG_DICT_VALUES(DICT_IN=pairs; DICT_OUT=new_pairs)
                new_pairs = dict([(t, -c) for t,c in pairs.iteritems()])
            #NEWINSTANCE(OBJ=_tmp835; HEAD=FACTORS; DATA=new_pairs)
            _tmp835 = cls(FACTORS, new_pairs)
            if ldata==1:
                return _tmp835
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp835: ldata})
            #NEWINSTANCE(OBJ=_tmp856; HEAD=TERMS; DATA={_tmp835: ldata})
            _tmp856 = cls(TERMS, {_tmp835: ldata})
            return _tmp856
        else:
            #DIV_NUMBER_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_VALUE_SYMBOL(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp877 = ldata
            if not _tmp877:
                return cls.zero
            #NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={other: -1})
            obj2 = cls(FACTORS, {other: -1})
            if _tmp877==1:
                return obj2
            #RETURN_NEW(HEAD=TERMS; DATA={obj2: _tmp877})
            #NEWINSTANCE(OBJ=_tmp891; HEAD=TERMS; DATA={obj2: _tmp877})
            _tmp891 = cls(TERMS, {obj2: _tmp877})
            return _tmp891
    elif lhead is TERMS:
        if rhead is NUMBER:
            #DIV_TERMS_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_TERMS_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #MUL_TERMS_VALUE(LHS=self; LHSDATA=ldata; VALUE=div(1,rdata,cls))
            #MUL_VALUE_TERMS(VALUE=div(1,rdata,cls); RHS=self; RHSDATA=ldata)
            _tmp926 = div(1,rdata,cls)
            if not _tmp926:
                return cls.zero
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp926 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp933; HEAD=TERMS; DATA={t: c})
                _tmp933 = cls(TERMS, {t: c})
                return _tmp933
            if _tmp926==1:
                return self
            pairs = {}
            for t,c in ldata.iteritems():
                pairs[t] = _tmp926 * c
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = cls(TERMS, pairs)
            coeff, terms = self._coeff_terms
            if terms is not None:
                c = coeff * _tmp926
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp926, self)
            return obj
        elif rhead is TERMS:
            #DIV_TERMS_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            
            if self==other:
                return cls.one
            lpairs = ldata
            rpairs = rdata
            if len(lpairs)==1:
                t1, c1 = lpairs.items()[0]
                if len(rpairs)==1:
                    t2, c2 = rpairs.items()[0]
                    c = div(c1, c2, cls)
                    if t2==t1:
                        return cls(NUMBER, c)
                    if c==1:
                        return t1 / t2
                        #@RETURN_NEW(HEAD=FACTORS; DATA={t1:1, t2:-1})
                    return (t1 / t2) * c
                    #@NEWINSTANCE(OBJ=_tmp954; HEAD=FACTORS; DATA={t1:1, t2:-1})
                else:
                    _tmp954 = t1 / other
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp954:c1})
                #NEWINSTANCE(OBJ=_tmp961; HEAD=TERMS; DATA={_tmp954:c1})
                _tmp961 = cls(TERMS, {_tmp954:c1})
                return _tmp961
            elif len(rpairs)==1:
                t2, c2 = rpairs.items()[0]
                c = div(1, c2, cls)
                if t2==self:
                    return cls(NUMBER, c)
                _tmp954 = self / t2
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp954:c})
                #NEWINSTANCE(OBJ=_tmp975; HEAD=TERMS; DATA={_tmp954:c})
                _tmp975 = cls(TERMS, {_tmp954:c})
                return _tmp975
            #RETURN_NEW(HEAD=FACTORS; DATA={self:1, other:-1})
            #NEWINSTANCE(OBJ=_tmp989; HEAD=FACTORS; DATA={self:1, other:-1})
            _tmp989 = cls(FACTORS, {self:1, other:-1})
            return _tmp989
        elif rhead is FACTORS:
            #DIV_TERMS_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            lpairs = ldata
            if len(lpairs)==1:
                t, c = lpairs.items()[0]
                t = t / other
                if t==cls.one:
                    return cls(NUMBER, c)
                head, data = t.pair
                if head is NUMBER:
                    #RETURN_NEW(HEAD=NUMBER; DATA=data * c)
                    #NEWINSTANCE(OBJ=_tmp1010; HEAD=NUMBER; DATA=data * c)
                    _tmp1010 = cls(NUMBER, data * c)
                    return _tmp1010
                elif head is TERMS:
                    #MUL_TERMS_VALUE(LHS=t; LHSDATA=data; VALUE=c)
                    #MUL_VALUE_TERMS(VALUE=c; RHS=t; RHSDATA=data)
                    _tmp1031 = c
                    if not _tmp1031:
                        return cls.zero
                    pairs = data
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp1031 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp1038; HEAD=TERMS; DATA={t: c})
                        _tmp1038 = cls(TERMS, {t: c})
                        return _tmp1038
                    if _tmp1031==1:
                        return t
                    pairs = {}
                    for t,c in data.iteritems():
                        pairs[t] = _tmp1031 * c
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                    obj = cls(TERMS, pairs)
                    coeff, terms = t._coeff_terms
                    if terms is not None:
                        c = coeff * _tmp1031
                        if not c==1:
                            obj._coeff_terms = (c, terms)
                    else:
                        obj._coeff_terms = (_tmp1031, t)
                    return obj
                else:
                    #MUL_SYMBOL_VALUE(LHS=t; LHSDATA=data; VALUE=c)
                    #MUL_VALUE_SYMBOL(VALUE=c; RHS=t; RHSDATA=data)
                    _tmp1066 = c
                    if not _tmp1066:
                        return cls.zero
                    if _tmp1066==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp1066})
                    #NEWINSTANCE(OBJ=_tmp1073; HEAD=TERMS; DATA={t: _tmp1066})
                    _tmp1073 = cls(TERMS, {t: _tmp1066})
                    return _tmp1073
            #DIV_SYMBOL_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==self:
                    c = 1 - c
                    if not c:
                        return cls.one
                    if c==1:
                        return t
                    else:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp1094; HEAD=FACTORS; DATA={t: c})
                        _tmp1094 = cls(FACTORS, {t: c})
                        return _tmp1094
                #RETURN_NEW(HEAD=FACTORS; DATA={t: -c, self: 1})
                #NEWINSTANCE(OBJ=_tmp1108; HEAD=FACTORS; DATA={t: -c, self: 1})
                _tmp1108 = cls(FACTORS, {t: -c, self: 1})
                return _tmp1108
            #NEG_DICT_VALUES(DICT_IN=rdata; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in rdata.iteritems()])
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self; RHSDATA=ldata)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1136 = pairs.get(self)
            if _tmp1136 is None:
                pairs[self] =  1
            else:
                _tmp1136 = _tmp1136 + 1
                if _tmp1136:
                    pairs[self] = _tmp1136
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1150; HEAD=FACTORS; DATA=pairs)
            _tmp1150 = cls(FACTORS, pairs)
            return _tmp1150
        else:
            #DIV_TERMS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==other:
                    return cls(NUMBER, c)
                if t.head is FACTORS:
                    _tmp1164 = t / other
                    #RETURN_NEW(HEAD=TERMS; DATA={_tmp1164: c})
                    #NEWINSTANCE(OBJ=_tmp1171; HEAD=TERMS; DATA={_tmp1164: c})
                    _tmp1171 = cls(TERMS, {_tmp1164: c})
                    return _tmp1171
                #NEWINSTANCE(OBJ=_tmp1164; HEAD=FACTORS; DATA={t:1, other: -1})
                _tmp1164 = cls(FACTORS, {t:1, other: -1})
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp1164: c})
                #NEWINSTANCE(OBJ=_tmp1192; HEAD=TERMS; DATA={_tmp1164: c})
                _tmp1192 = cls(TERMS, {_tmp1164: c})
                return _tmp1192
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp1206; HEAD=FACTORS; DATA={self: 1, other: -1})
            _tmp1206 = cls(FACTORS, {self: 1, other: -1})
            return _tmp1206
    elif lhead is FACTORS:
        if rhead is NUMBER:
            #DIV_FACTORS_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_FACTORS_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #MUL_FACTORS_VALUE(LHS=self; LHSDATA=ldata; VALUE=div(1,rdata,cls))
            #MUL_SYMBOL_VALUE(VALUE=div(1,rdata,cls); LHS=self; LHSDATA=ldata)
            #MUL_VALUE_SYMBOL(VALUE=div(1,rdata,cls); RHS=self; RHSDATA=ldata)
            _tmp1248 = div(1,rdata,cls)
            if not _tmp1248:
                return cls.zero
            if _tmp1248==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp1248})
            #NEWINSTANCE(OBJ=_tmp1255; HEAD=TERMS; DATA={self: _tmp1248})
            _tmp1255 = cls(TERMS, {self: _tmp1248})
            return _tmp1255
        elif rhead is TERMS:
            #DIV_FACTORS_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            rpairs = rdata
            if len(rpairs)==1:
                t, c = rpairs.items()[0]
                t = self / t
                c = div(1, c, cls)
                if t==cls.one:
                    return cls(NUMBER, c)
                head, data = t.pair
                if head is NUMBER:
                    #RETURN_NEW(HEAD=NUMBER; DATA=data * c)
                    #NEWINSTANCE(OBJ=_tmp1276; HEAD=NUMBER; DATA=data * c)
                    _tmp1276 = cls(NUMBER, data * c)
                    return _tmp1276
                elif head is TERMS:
                    #MUL_TERMS_VALUE(LHS=t; LHSDATA=data; VALUE=c)
                    #MUL_VALUE_TERMS(VALUE=c; RHS=t; RHSDATA=data)
                    _tmp1297 = c
                    if not _tmp1297:
                        return cls.zero
                    pairs = data
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp1297 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp1304; HEAD=TERMS; DATA={t: c})
                        _tmp1304 = cls(TERMS, {t: c})
                        return _tmp1304
                    if _tmp1297==1:
                        return t
                    pairs = {}
                    for t,c in data.iteritems():
                        pairs[t] = _tmp1297 * c
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                    obj = cls(TERMS, pairs)
                    coeff, terms = t._coeff_terms
                    if terms is not None:
                        c = coeff * _tmp1297
                        if not c==1:
                            obj._coeff_terms = (c, terms)
                    else:
                        obj._coeff_terms = (_tmp1297, t)
                    return obj
                else:
                    #MUL_SYMBOL_VALUE(LHS=t; LHSDATA=data; VALUE=c)
                    #MUL_VALUE_SYMBOL(VALUE=c; RHS=t; RHSDATA=data)
                    _tmp1332 = c
                    if not _tmp1332:
                        return cls.zero
                    if _tmp1332==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp1332})
                    #NEWINSTANCE(OBJ=_tmp1339; HEAD=TERMS; DATA={t: _tmp1332})
                    _tmp1339 = cls(TERMS, {t: _tmp1332})
                    return _tmp1339
            #DIV_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #DIV_DICT_SYMBOL(RHS=other; RHSDATA=rdata; DICT=pairs)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1367 = pairs.get(other)
            if _tmp1367 is None:
                pairs[other] =  -1
            else:
                _tmp1367 = _tmp1367 + -1
                if _tmp1367:
                    pairs[other] = _tmp1367
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1381; HEAD=FACTORS; DATA=pairs)
            _tmp1381 = cls(FACTORS, pairs)
            return _tmp1381
        elif rhead is FACTORS:
            #DIV_FACTORS_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            pairs_get = pairs.get
            number = 1
            for t,c in rdata.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=-; USIGN=-; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                _tmp1402 = pairs_get(t)
                if _tmp1402 is None:
                    pairs[t] = - c
                else:
                    _tmp1402 = _tmp1402 - c
                    if type(_tmp1402) is cls and _tmp1402.head is NUMBER:
                        _tmp1402 = _tmp1402.data
                    if _tmp1402:
                        if t.head is NUMBER:
                            del pairs[t]
                            z, sym = try_power(t.data, _tmp1402)
                            if sym:
                                for t1, c1 in sym:
                                    #NEWINSTANCE(OBJ=tt; HEAD=NUMBER; DATA=t1)
                                    tt = cls(NUMBER, t1)
                                    #ADD_TERM_VALUE_DICT(DICT=pairs; DICT_GET=pairs_get; TERM=tt; VALUE=c1; SIGN=+; USIGN=)
                                    _tmp1416 = pairs_get(tt)
                                    if _tmp1416 is None:
                                        pairs[tt] =  c1
                                    else:
                                        _tmp1416 = _tmp1416 + c1
                                        if _tmp1416:
                                            pairs[tt] = _tmp1416
                                        else:
                                            del pairs[tt]
                            number = number * z
                        else:
                            pairs[t] = _tmp1402
                    else:
                        del pairs[t]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   if number==1:
                       return t
                   #RETURN_NEW(HEAD=TERMS; DATA={t: number})
                   #NEWINSTANCE(OBJ=_tmp1430; HEAD=TERMS; DATA={t: number})
                   _tmp1430 = cls(TERMS, {t: number})
                   return _tmp1430
               if t==cls.one:
                   return number
            if number==1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp1444; HEAD=FACTORS; DATA=pairs)
                _tmp1444 = cls(FACTORS, pairs)
                return _tmp1444
            #NEWINSTANCE(OBJ=_tmp1395; HEAD=FACTORS; DATA=pairs)
            _tmp1395 = cls(FACTORS, pairs)
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp1395: number})
            #NEWINSTANCE(OBJ=_tmp1465; HEAD=TERMS; DATA={_tmp1395: number})
            _tmp1465 = cls(TERMS, {_tmp1395: number})
            return _tmp1465
        else:
            #DIV_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #DIV_DICT_SYMBOL(RHS=other; RHSDATA=rdata; DICT=pairs)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1493 = pairs.get(other)
            if _tmp1493 is None:
                pairs[other] =  -1
            else:
                _tmp1493 = _tmp1493 + -1
                if _tmp1493:
                    pairs[other] = _tmp1493
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1507; HEAD=FACTORS; DATA=pairs)
            _tmp1507 = cls(FACTORS, pairs)
            return _tmp1507
    else:
        if rhead is NUMBER:
            #DIV_SYMBOL_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_SYMBOL_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #MUL_VALUE_SYMBOL(VALUE=div(1, rdata, cls); RHS=self; RHSDATA=ldata)
            _tmp1535 = div(1, rdata, cls)
            if not _tmp1535:
                return cls.zero
            if _tmp1535==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp1535})
            #NEWINSTANCE(OBJ=_tmp1542; HEAD=TERMS; DATA={self: _tmp1535})
            _tmp1542 = cls(TERMS, {self: _tmp1535})
            return _tmp1542
        elif rhead is TERMS:
            #DIV_SYMBOL_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = rdata
            if len(pairs)==1:
                t,c = pairs.items()[0]
                if self==t:
                    return cls(NUMBER, div(1, c, cls))
                #NEWINSTANCE(OBJ=_tmp1556; HEAD=FACTORS; DATA={self:1, t:-1})
                _tmp1556 = cls(FACTORS, {self:1, t:-1})
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp1556: div(1, c, cls)})
                #NEWINSTANCE(OBJ=_tmp1570; HEAD=TERMS; DATA={_tmp1556: div(1, c, cls)})
                _tmp1570 = cls(TERMS, {_tmp1556: div(1, c, cls)})
                return _tmp1570
            #RETURN_NEW(HEAD=FACTORS; DATA={self:1, other:-1})
            #NEWINSTANCE(OBJ=_tmp1584; HEAD=FACTORS; DATA={self:1, other:-1})
            _tmp1584 = cls(FACTORS, {self:1, other:-1})
            return _tmp1584
        elif rhead is FACTORS:
            #DIV_SYMBOL_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==self:
                    c = 1 - c
                    if not c:
                        return cls.one
                    if c==1:
                        return t
                    else:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp1605; HEAD=FACTORS; DATA={t: c})
                        _tmp1605 = cls(FACTORS, {t: c})
                        return _tmp1605
                #RETURN_NEW(HEAD=FACTORS; DATA={t: -c, self: 1})
                #NEWINSTANCE(OBJ=_tmp1619; HEAD=FACTORS; DATA={t: -c, self: 1})
                _tmp1619 = cls(FACTORS, {t: -c, self: 1})
                return _tmp1619
            #NEG_DICT_VALUES(DICT_IN=rdata; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in rdata.iteritems()])
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self; RHSDATA=ldata)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1647 = pairs.get(self)
            if _tmp1647 is None:
                pairs[self] =  1
            else:
                _tmp1647 = _tmp1647 + 1
                if _tmp1647:
                    pairs[self] = _tmp1647
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1661; HEAD=FACTORS; DATA=pairs)
            _tmp1661 = cls(FACTORS, pairs)
            return _tmp1661
        else:
            #DIV_SYMBOL_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            if self == other:
                return cls.one
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp1682; HEAD=FACTORS; DATA={self: 1, other: -1})
            _tmp1682 = cls(FACTORS, {self: 1, other: -1})
            return _tmp1682
