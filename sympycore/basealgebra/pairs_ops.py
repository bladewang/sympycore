"""
This file is generated by the sympycore/basealgebra/mk_pairs.py script.
DO NOT CHANGE THIS FILE DIRECTLY!!!
"""

from ..utils import NUMBER, SYMBOL, TERMS, FACTORS, RedirectOperation



def neg_method(self, NUMBER=NUMBER, TERMS=TERMS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if lhead is NUMBER:
        #NEG_NUMBER(OP=self)
        #RETURN_NEW(HEAD=NUMBER; DATA=-self.data)
        obj = new(cls)
        obj.head = NUMBER
        obj.data = -self.data
        return obj
    elif lhead is TERMS:
        #NEG_TERMS(OP=self)
        op_pairs = self.data
        if len(op_pairs)==1:
            t, c = op_pairs.items()[0]
            c = -c
            if c==1:
                return t
            #RETURN_NEW(HEAD=TERMS; DATA={t:c})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {t:c}
            return obj
        #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
        pairs = dict([(t, -c) for t,c in self.data.iteritems()])
        #RETURN_NEW(HEAD=TERMS; DATA=pairs)
        obj = new(cls)
        obj.head = TERMS
        obj.data = pairs
        return obj
    else:
        #NEG_SYMBOL(OP=self)
        #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
        obj = new(cls)
        obj.head = TERMS
        obj.data = {self: -1}
        return obj

def add_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #ADD_VALUE_NUMBER(VALUE=other; RHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=other + self.data)
                obj = new(cls)
                obj.head = NUMBER
                obj.data = other + self.data
                return obj
            elif lhead is TERMS:
                #ADD_VALUE_TERMS(VALUE=other; RHS=self)
                try:
                    if not other:
                        return self
                except RedirectOperation:
                    pass
                pairs = dict(self.data)
                one = cls.one
                #ADD_VALUE_DICT(DICT=pairs; VALUE=other)
                #ADD_TERM_VALUE_DICT(TERM=one; VALUE=other; DICT=pairs; DICT_GET=pairs.get)
                b = pairs.get(one)
                if b is None:
                    pairs[one] = other
                else:
                    c = b + other
                    try:
                        if c:
                            pairs[one] = c
                        else:
                            del pairs[one]
                    except RedirectOperation:
                        pairs[one] = c
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                obj = new(cls)
                obj.head = TERMS
                obj.data = pairs
                return obj
            else:
                #ADD_VALUE_SYMBOL(VALUE=other; RHS=self)
                try:
                    if not other:
                        return self
                except RedirectOperation:
                    pass
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: other, self: 1})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {cls.one: other, self: 1}
                return obj
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #ADD_NUMBER_NUMBER(LHS=self; RHS=other)
            #ADD_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data + other.data)
            obj = new(cls)
            obj.head = NUMBER
            obj.data = self.data + other.data
            return obj
        elif rhead is TERMS:
            #ADD_NUMBER_TERMS(LHS=self; RHS=other)
            value = self.data
            #ADD_VALUE_TERMS(VALUE=value; RHS=other)
            try:
                if not value:
                    return other
            except RedirectOperation:
                pass
            pairs = dict(other.data)
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=value)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=value; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = value
            else:
                c = b + value
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #ADD_NUMBER_SYMBOL(LHS=self; RHS=other)
            value = self.data
            #ADD_VALUE_SYMBOL(VALUE=value; RHS=other)
            try:
                if not value:
                    return other
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: value, other: 1})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {cls.one: value, other: 1}
            return obj
    elif lhead is TERMS:
        if rhead is NUMBER:
            #ADD_NUMBER_TERMS(LHS=other; RHS=self)
            value = other.data
            #ADD_VALUE_TERMS(VALUE=value; RHS=self)
            try:
                if not value:
                    return self
            except RedirectOperation:
                pass
            pairs = dict(self.data)
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=value)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=value; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = value
            else:
                c = b + value
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        elif rhead is TERMS:
            #ADD_TERMS_TERMS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            for t,c in other.data.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=c; DICT=pairs; DICT_GET=pairs_get)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = c
                else:
                    c = b + c
                    try:
                        if c:
                            pairs[t] = c
                        else:
                            del pairs[t]
                    except RedirectOperation:
                        pairs[t] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #ADD_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[other] = c
                    else:
                        del pairs[other]
                except RedirectOperation:
                    pairs[other] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
    else:
        if rhead is NUMBER:
            #ADD_NUMBER_SYMBOL(LHS=other; RHS=self)
            value = other.data
            #ADD_VALUE_SYMBOL(VALUE=value; RHS=self)
            try:
                if not value:
                    return self
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: value, self: 1})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {cls.one: value, self: 1}
            return obj
        elif rhead is TERMS:
            #ADD_TERMS_SYMBOL(LHS=other; RHS=self)
            pairs = dict(other.data)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[self] = c
                    else:
                        del pairs[self]
                except RedirectOperation:
                    pairs[self] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #ADD_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj

def sub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #SUB_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data - other)
                obj = new(cls)
                obj.head = NUMBER
                obj.data = self.data - other
                return obj
            elif lhead is TERMS:
                #SUB_TERMS_VALUE(VALUE=other; LHS=self)
                value = -other
                #ADD_VALUE_TERMS(VALUE=value; RHS=self)
                try:
                    if not value:
                        return self
                except RedirectOperation:
                    pass
                pairs = dict(self.data)
                one = cls.one
                #ADD_VALUE_DICT(DICT=pairs; VALUE=value)
                #ADD_TERM_VALUE_DICT(TERM=one; VALUE=value; DICT=pairs; DICT_GET=pairs.get)
                b = pairs.get(one)
                if b is None:
                    pairs[one] = value
                else:
                    c = b + value
                    try:
                        if c:
                            pairs[one] = c
                        else:
                            del pairs[one]
                    except RedirectOperation:
                        pairs[one] = c
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                obj = new(cls)
                obj.head = TERMS
                obj.data = pairs
                return obj
            else:
                #SUB_SYMBOL_VALUE(VALUE=other; LHS=self)
                value = -other
                #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; VALUE=value)
                #ADD_VALUE_SYMBOL(VALUE=value; RHS=self)
                try:
                    if not value:
                        return self
                except RedirectOperation:
                    pass
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: value, self: 1})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {cls.one: value, self: 1}
                return obj
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #SUB_NUMBER_NUMBER(LHS=self; RHS=other)
            #SUB_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data - other.data)
            obj = new(cls)
            obj.head = NUMBER
            obj.data = self.data - other.data
            return obj
        elif rhead is TERMS:
            #SUB_NUMBER_TERMS(LHS=self; RHS=other)
            value = self.data
            #SUB_VALUE_TERMS(VALUE=value; RHS=other)
            try:
                if not value:
                    #NEG_TERMS(OP=other)
                    op_pairs = other.data
                    if len(op_pairs)==1:
                        t, c = op_pairs.items()[0]
                        c = -c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                        obj = new(cls)
                        obj.head = TERMS
                        obj.data = {t:c}
                        return obj
                    #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
                    pairs = dict([(t, -c) for t,c in other.data.iteritems()])
                    #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = pairs
                    return obj
            except RedirectOperation:
                pass
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=value)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=value; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = value
            else:
                c = b + value
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #SUB_NUMBER_SYMBOL(LHS=self; RHS=other)
            value = self.data
            #SUB_VALUE_SYMBOL(VALUE=value; RHS=other)
            try:
                if not value:
                    #RETURN_NEW(HEAD=TERMS; DATA={other: -1})
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = {other: -1}
                    return obj
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: value, other: -1})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {cls.one: value, other: -1}
            return obj
    elif lhead is TERMS:
        if rhead is NUMBER:
            #SUB_TERMS_NUMBER(LHS=self; RHS=other)
            value = other.data
            #SUB_TERMS_VALUE(VALUE=value; LHS=self)
            value = -value
            #ADD_VALUE_TERMS(VALUE=value; RHS=self)
            try:
                if not value:
                    return self
            except RedirectOperation:
                pass
            pairs = dict(self.data)
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=value)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=value; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = value
            else:
                c = b + value
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        elif rhead is TERMS:
            #SUB_TERMS_TERMS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            for t,c in other.data.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=-c; DICT=pairs; DICT_GET=pairs_get)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = -c
                else:
                    c = b + -c
                    try:
                        if c:
                            pairs[t] = c
                        else:
                            del pairs[t]
                    except RedirectOperation:
                        pairs[t] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #SUB_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = -1
            else:
                c = b + -1
                try:
                    if c:
                        pairs[other] = c
                    else:
                        del pairs[other]
                except RedirectOperation:
                    pairs[other] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
    else:
        if rhead is NUMBER:
            #SUB_SYMBOL_NUMBER(LHS=self; RHS=other)
            value = other.data
            #SUB_SYMBOL_VALUE(VALUE=value; LHS=self)
            value = -value
            #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; VALUE=value)
            #ADD_VALUE_SYMBOL(VALUE=value; RHS=self)
            try:
                if not value:
                    return self
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: value, self: 1})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {cls.one: value, self: 1}
            return obj
        elif rhead is TERMS:
            #SUB_SYMBOL_TERMS(LHS=self; RHS=other)
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[self] = c
                    else:
                        del pairs[self]
                except RedirectOperation:
                    pairs[self] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #SUB_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                return cls.zero
            #RETURN_NEW(HEAD=TERMS; DATA={self: 1, other: -1})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {self: 1, other: -1}
            return obj

def rsub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #SUB_VALUE_NUMBER(VALUE=other; RHS=self)
            #RETURN_NEW(HEAD=NUMBER; DATA=other - self.data)
            obj = new(cls)
            obj.head = NUMBER
            obj.data = other - self.data
            return obj
        elif lhead is TERMS:
            #SUB_VALUE_TERMS(VALUE=other; RHS=self)
            try:
                if not other:
                    #NEG_TERMS(OP=self)
                    op_pairs = self.data
                    if len(op_pairs)==1:
                        t, c = op_pairs.items()[0]
                        c = -c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                        obj = new(cls)
                        obj.head = TERMS
                        obj.data = {t:c}
                        return obj
                    #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
                    pairs = dict([(t, -c) for t,c in self.data.iteritems()])
                    #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = pairs
                    return obj
            except RedirectOperation:
                pass
            #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in self.data.iteritems()])
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=other)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=other; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = other
            else:
                c = b + other
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #SUB_VALUE_SYMBOL(VALUE=other; RHS=self)
            try:
                if not other:
                    #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = {self: -1}
                    return obj
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: other, self: -1})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {cls.one: other, self: -1}
            return obj
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other - self

    
