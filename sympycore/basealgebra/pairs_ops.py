"""
This file is generated by the sympycore/basealgebra/mk_pairs.py script.
DO NOT CHANGE THIS FILE DIRECTLY!!!
"""

from ..utils import NUMBER, SYMBOL, TERMS, FACTORS
from ..arithmetic.numbers import (normalized_fraction,
  FractionTuple, try_power, numbertypes)
from ..arithmetic.infinity import Infinity


def div(a, b, cls):
    tb = type(b)
    if tb is int or tb is long:
        ta = type(a)
        if ta is int or tb is long:
            if not b:
                if not a:
                    return cls.undefined
                return cls.zoo
            return normalized_fraction(a, b)
        if not b:
            return a * cls.zoo
        if b == 1:
            return a
        return FractionTuple((1,b)) * a
    return a / b




def neg_method(self, NUMBER=NUMBER, TERMS=TERMS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if lhead is NUMBER:
        #NEG_NUMBER(OP=self)
        #RETURN_NEW(HEAD=NUMBER; DATA=-self.data)
        #NEWINSTANCE(OBJ=_tmp3; HEAD=NUMBER; DATA=-self.data)
        _tmp3 = new(cls)
        _tmp3.head = NUMBER
        _tmp3.data = -self.data
        return _tmp3
    elif lhead is TERMS:
        #NEG_TERMS(OP=self)
        op_pairs = self.data
        if len(op_pairs)==1:
            t, c = op_pairs.items()[0]
            c = -c
            if c==1:
                return t
            #RETURN_NEW(HEAD=TERMS; DATA={t:c})
            #NEWINSTANCE(OBJ=_tmp6; HEAD=TERMS; DATA={t:c})
            _tmp6 = new(cls)
            _tmp6.head = TERMS
            _tmp6.data = {t:c}
            return _tmp6
        #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
        pairs = dict([(t, -c) for t,c in self.data.iteritems()])
        #RETURN_NEW(HEAD=TERMS; DATA=pairs)
        #NEWINSTANCE(OBJ=_tmp9; HEAD=TERMS; DATA=pairs)
        _tmp9 = new(cls)
        _tmp9.head = TERMS
        _tmp9.data = pairs
        return _tmp9
    else:
        #NEG_SYMBOL(OP=self)
        #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
        #NEWINSTANCE(OBJ=_tmp12; HEAD=TERMS; DATA={self: -1})
        _tmp12 = new(cls)
        _tmp12.head = TERMS
        _tmp12.data = {self: -1}
        return _tmp12

def rsub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #SUB_VALUE_NUMBER(VALUE=other; RHS=self)
            #RETURN_NEW(HEAD=NUMBER; DATA=other - self.data)
            #NEWINSTANCE(OBJ=_tmp15; HEAD=NUMBER; DATA=other - self.data)
            _tmp15 = new(cls)
            _tmp15.head = NUMBER
            _tmp15.data = other - self.data
            return _tmp15
        elif lhead is TERMS:
            #SUB_VALUE_TERMS(VALUE=other; RHS=self)
            _tmp17 = other
            if not _tmp17:
                #NEG_TERMS(OP=self)
                op_pairs = self.data
                if len(op_pairs)==1:
                    t, c = op_pairs.items()[0]
                    c = -c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                    #NEWINSTANCE(OBJ=_tmp19; HEAD=TERMS; DATA={t:c})
                    _tmp19 = new(cls)
                    _tmp19.head = TERMS
                    _tmp19.data = {t:c}
                    return _tmp19
                #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
                pairs = dict([(t, -c) for t,c in self.data.iteritems()])
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp22; HEAD=TERMS; DATA=pairs)
                _tmp22 = new(cls)
                _tmp22.head = TERMS
                _tmp22.data = pairs
                return _tmp22
            #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in self.data.iteritems()])
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp17)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp17; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(cls.one)
            if b is None:
                pairs[cls.one] = _tmp17
            else:
                c = b + _tmp17
                if c:
                    pairs[cls.one] = c
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp27; HEAD=TERMS; DATA=pairs)
            _tmp27 = new(cls)
            _tmp27.head = TERMS
            _tmp27.data = pairs
            return _tmp27
        else:
            #SUB_VALUE_SYMBOL(VALUE=other; RHS=self)
            _tmp29 = other
            if not _tmp29:
                #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
                #NEWINSTANCE(OBJ=_tmp30; HEAD=TERMS; DATA={self: -1})
                _tmp30 = new(cls)
                _tmp30.head = TERMS
                _tmp30.data = {self: -1}
                return _tmp30
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp29, self: -1})
            #NEWINSTANCE(OBJ=_tmp32; HEAD=TERMS; DATA={cls.one: _tmp29, self: -1})
            _tmp32 = new(cls)
            _tmp32.head = TERMS
            _tmp32.data = {cls.one: _tmp29, self: -1}
            return _tmp32
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other - self

def rdiv_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #DIV_VALUE_NUMBER(VALUE=other; RHS=self)
            #RETURN_NEW2(HEAD=NUMBER; DATA=div(other, self.data, cls))
            _tmp35 = div(other, self.data, cls)
            if isinstance(_tmp35, Infinity):
                return _tmp35
            #RETURN_NEW(HEAD=NUMBER; DATA=_tmp35)
            #NEWINSTANCE(OBJ=_tmp36; HEAD=NUMBER; DATA=_tmp35)
            _tmp36 = new(cls)
            _tmp36.head = NUMBER
            _tmp36.data = _tmp35
            return _tmp36
        elif lhead is TERMS:
            #DIV_VALUE_TERMS(VALUE=other; RHS=self)
            _tmp38 = other
            if not _tmp38:
                return cls.zero
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = div(other, c, cls)
                t = 1/t
                if c==1:
                    return t
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp39; HEAD=TERMS; DATA={t: c})
                _tmp39 = new(cls)
                _tmp39.head = TERMS
                _tmp39.data = {t: c}
                return _tmp39
            #NEWINSTANCE(OBJ=_tmp38; HEAD=FACTORS; DATA={self: -1})
            _tmp38 = new(cls)
            _tmp38.head = FACTORS
            _tmp38.data = {self: -1}
            if other==1:
                return _tmp38
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp38: other})
            #NEWINSTANCE(OBJ=_tmp42; HEAD=TERMS; DATA={_tmp38: other})
            _tmp42 = new(cls)
            _tmp42.head = TERMS
            _tmp42.data = {_tmp38: other}
            return _tmp42
        elif lhead is FACTORS:
            #DIV_VALUE_FACTORS(VALUE=other; RHS=self)
            
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = -c
                if c==1:
                    return t * other
                new_pairs = {t: c}
            else:
                #NEG_DICT_VALUES(DICT_IN=pairs; DICT_OUT=new_pairs)
                new_pairs = dict([(t, -c) for t,c in pairs.iteritems()])
            #NEWINSTANCE(OBJ=_tmp44; HEAD=FACTORS; DATA=new_pairs)
            _tmp44 = new(cls)
            _tmp44.head = FACTORS
            _tmp44.data = new_pairs
            if other==1:
                return _tmp44
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp44: other})
            #NEWINSTANCE(OBJ=_tmp47; HEAD=TERMS; DATA={_tmp44: other})
            _tmp47 = new(cls)
            _tmp47.head = TERMS
            _tmp47.data = {_tmp44: other}
            return _tmp47
        else:
            #DIV_VALUE_SYMBOL(VALUE=other; RHS=self)
            _tmp49 = other
            if not _tmp49:
                return cls.zero
            #NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={self: -1})
            obj2 = new(cls)
            obj2.head = FACTORS
            obj2.data = {self: -1}
            if _tmp49==1:
                return obj2
            #RETURN_NEW(HEAD=TERMS; DATA={obj2: _tmp49})
            #NEWINSTANCE(OBJ=_tmp51; HEAD=TERMS; DATA={obj2: _tmp49})
            _tmp51 = new(cls)
            _tmp51.head = TERMS
            _tmp51.data = {obj2: _tmp49}
            return _tmp51
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other / self

def pow_method(self, other, z = None, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    type_other = type(other)
    if type_other is cls and other.head is NUMBER:
        other = other.data
        type_other = type(other)
    if type_other is int or type_other is long:
        if not other:
            return cls.one
        if other==1:
            return self
        if lhead is NUMBER:
            #POW_NUMBER_INT(VALUE=other; LHS=self)
            if other < 0:
                #RETURN_NEW(HEAD=NUMBER; DATA=div(1, (self.data)**(-other), cls))
                #NEWINSTANCE(OBJ=_tmp54; HEAD=NUMBER; DATA=div(1, (self.data)**(-other), cls))
                _tmp54 = new(cls)
                _tmp54.head = NUMBER
                _tmp54.data = div(1, (self.data)**(-other), cls)
                return _tmp54
            #RETURN_NEW(HEAD=NUMBER; DATA=(self.data)**(other))
            #NEWINSTANCE(OBJ=_tmp56; HEAD=NUMBER; DATA=(self.data)**(other))
            _tmp56 = new(cls)
            _tmp56.head = NUMBER
            _tmp56.data = (self.data)**(other)
            return _tmp56
        elif lhead is TERMS:
            #POW_TERMS_INT(VALUE=other; LHS=self)
            pairs = self.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                if other < 0:
                    c = div(1, c**(-other), cls)
                else:
                    c = c ** (other)
                t = t**(other)
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                #NEWINSTANCE(OBJ=_tmp59; HEAD=TERMS; DATA={t:c})
                _tmp59 = new(cls)
                _tmp59.head = TERMS
                _tmp59.data = {t:c}
                return _tmp59
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp61; HEAD=FACTORS; DATA={self: other})
            _tmp61 = new(cls)
            _tmp61.head = FACTORS
            _tmp61.data = {self: other}
            return _tmp61
        elif lhead is FACTORS:
            #POW_FACTORS_INT(VALUE=other; LHS=self)
            #MUL_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs; OP=other)
            pairs = dict([(t, c*other) for t,c in self.data.iteritems()])
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if c==1:
                    return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp65; HEAD=FACTORS; DATA=pairs)
            _tmp65 = new(cls)
            _tmp65.head = FACTORS
            _tmp65.data = pairs
            return _tmp65
        else:
            #POW_SYMBOL_INT(VALUE=other; LHS=self)
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp68; HEAD=FACTORS; DATA={self: other})
            _tmp68 = new(cls)
            _tmp68.head = FACTORS
            _tmp68.data = {self: other}
            return _tmp68
    if lhead is NUMBER and isinstance(other, cls.exptypes):
        #POW_NUMBER_VALUE(VALUE=other; LHS=self)
        z, sym = try_power(self.data, other)
        if not sym:
            #RETURN_NEW(HEAD=NUMBER; DATA=z)
            #NEWINSTANCE(OBJ=_tmp71; HEAD=NUMBER; DATA=z)
            _tmp71 = new(cls)
            _tmp71.head = NUMBER
            _tmp71.data = z
            return _tmp71
        factors = {}
        for t,c in sym:
            factors[cls.convert(t)] = c
        #NEWINSTANCE(OBJ=_tmp70; HEAD=FACTORS; DATA=factors)
        _tmp70 = new(cls)
        _tmp70.head = FACTORS
        _tmp70.data = factors
        if z==1:
            return _tmp70
        #RETURN_NEW(HEAD=TERMS; DATA={_tmp70: z})
        #NEWINSTANCE(OBJ=_tmp74; HEAD=TERMS; DATA={_tmp70: z})
        _tmp74 = new(cls)
        _tmp74.head = TERMS
        _tmp74.data = {_tmp70: z}
        return _tmp74
    if type_other is FractionTuple:
        if lhead is TERMS:
            #POW_TERMS_FRAC(VALUE=other; LHS=self)
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if isinstance(c, numbertypes) and not c==-1:
                    if c < 0:
                        z, sym = try_power(-c, other)
                        factors = {-t: other}
                    else:
                        z, sym = try_power(c, other)
                        factors = {t: other}
                    for t,c in sym:
                        factors[cls.convert(t)] = c
                    #NEWINSTANCE(OBJ=_tmp76; HEAD=FACTORS; DATA=factors)
                    _tmp76 = new(cls)
                    _tmp76.head = FACTORS
                    _tmp76.data = factors
                    if z==1:
                        return _tmp76
                    #RETURN_NEW(HEAD=TERMS; DATA={_tmp76: z})
                    #NEWINSTANCE(OBJ=_tmp78; HEAD=TERMS; DATA={_tmp76: z})
                    _tmp78 = new(cls)
                    _tmp78.head = TERMS
                    _tmp78.data = {_tmp76: z}
                    return _tmp78
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp80; HEAD=FACTORS; DATA={self: other})
            _tmp80 = new(cls)
            _tmp80.head = FACTORS
            _tmp80.data = {self: other}
            return _tmp80
        else:
            #POW_SYMBOL_FRAC(VALUE=other; LHS=self)
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp83; HEAD=FACTORS; DATA={self: other})
            _tmp83 = new(cls)
            _tmp83.head = FACTORS
            _tmp83.data = {self: other}
            return _tmp83
    if type_other is cls or isinstance(other, cls.exptypes):
        if lhead is FACTORS:
            #POW_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                tc = type(c)
                if tc is int or tc is long:
                    #RETURN_NEW(HEAD=FACTORS; DATA={t: other * c})
                    #NEWINSTANCE(OBJ=_tmp86; HEAD=FACTORS; DATA={t: other * c})
                    _tmp86 = new(cls)
                    _tmp86.head = FACTORS
                    _tmp86.data = {t: other * c}
                    return _tmp86
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp88; HEAD=FACTORS; DATA={self: other})
            _tmp88 = new(cls)
            _tmp88.head = FACTORS
            _tmp88.data = {self: other}
            return _tmp88
        #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
        #NEWINSTANCE(OBJ=_tmp90; HEAD=FACTORS; DATA={self: other})
        _tmp90 = new(cls)
        _tmp90.head = FACTORS
        _tmp90.data = {self: other}
        return _tmp90
    return NotImplemented

def add_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #ADD_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data + other)
                #NEWINSTANCE(OBJ=_tmp93; HEAD=NUMBER; DATA=self.data + other)
                _tmp93 = new(cls)
                _tmp93.head = NUMBER
                _tmp93.data = self.data + other
                return _tmp93
            elif lhead is TERMS:
                #ADD_TERMS_VALUE(VALUE=other; LHS=self)
                #ADD_VALUE_TERMS(VALUE=other; RHS=self)
                _tmp96 = other
                if not _tmp96:
                    return self
                pairs = dict(self.data)
                #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp96)
                #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp96; DICT=pairs; DICT_GET=pairs.get)
                b = pairs.get(cls.one)
                if b is None:
                    pairs[cls.one] = _tmp96
                else:
                    c = b + _tmp96
                    if c:
                        pairs[cls.one] = c
                    else:
                        del pairs[cls.one]
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp99; HEAD=TERMS; DATA=pairs)
                _tmp99 = new(cls)
                _tmp99.head = TERMS
                _tmp99.data = pairs
                return _tmp99
            else:
                #ADD_SYMBOL_VALUE(VALUE=other; LHS=self)
                #ADD_VALUE_SYMBOL(VALUE=other; RHS=self)
                _tmp102 = other
                if not _tmp102:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp102, self: 1})
                #NEWINSTANCE(OBJ=_tmp103; HEAD=TERMS; DATA={cls.one: _tmp102, self: 1})
                _tmp103 = new(cls)
                _tmp103.head = TERMS
                _tmp103.data = {cls.one: _tmp102, self: 1}
                return _tmp103
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #ADD_NUMBER_NUMBER(LHS=self; RHS=other)
            #ADD_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data + other.data)
            #NEWINSTANCE(OBJ=_tmp107; HEAD=NUMBER; DATA=self.data + other.data)
            _tmp107 = new(cls)
            _tmp107.head = NUMBER
            _tmp107.data = self.data + other.data
            return _tmp107
        elif rhead is TERMS:
            #ADD_NUMBER_TERMS(LHS=self; RHS=other)
            #ADD_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp110 = self.data
            if not _tmp110:
                return other
            pairs = dict(other.data)
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp110)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp110; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(cls.one)
            if b is None:
                pairs[cls.one] = _tmp110
            else:
                c = b + _tmp110
                if c:
                    pairs[cls.one] = c
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp113; HEAD=TERMS; DATA=pairs)
            _tmp113 = new(cls)
            _tmp113.head = TERMS
            _tmp113.data = pairs
            return _tmp113
        else:
            #ADD_NUMBER_SYMBOL(LHS=self; RHS=other)
            #ADD_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp116 = self.data
            if not _tmp116:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp116, other: 1})
            #NEWINSTANCE(OBJ=_tmp117; HEAD=TERMS; DATA={cls.one: _tmp116, other: 1})
            _tmp117 = new(cls)
            _tmp117.head = TERMS
            _tmp117.data = {cls.one: _tmp116, other: 1}
            return _tmp117
    elif lhead is TERMS:
        if rhead is NUMBER:
            #ADD_TERMS_NUMBER(LHS=self; RHS=other)
            #ADD_TERMS_VALUE(VALUE=other.data; LHS=self)
            #ADD_VALUE_TERMS(VALUE=other.data; RHS=self)
            _tmp121 = other.data
            if not _tmp121:
                return self
            pairs = dict(self.data)
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp121)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp121; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(cls.one)
            if b is None:
                pairs[cls.one] = _tmp121
            else:
                c = b + _tmp121
                if c:
                    pairs[cls.one] = c
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp124; HEAD=TERMS; DATA=pairs)
            _tmp124 = new(cls)
            _tmp124.head = TERMS
            _tmp124.data = pairs
            return _tmp124
        elif rhead is TERMS:
            #ADD_TERMS_TERMS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            for t,c in other.data.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=c; DICT=pairs; DICT_GET=pairs_get)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = c
                else:
                    c = b + c
                    if c:
                        pairs[t] = c
                    else:
                        del pairs[t]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp129; HEAD=TERMS; DATA=pairs)
            _tmp129 = new(cls)
            _tmp129.head = TERMS
            _tmp129.data = pairs
            return _tmp129
        else:
            #ADD_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = 1
            else:
                c = b + 1
                if c:
                    pairs[other] = c
                else:
                    del pairs[other]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp134; HEAD=TERMS; DATA=pairs)
            _tmp134 = new(cls)
            _tmp134.head = TERMS
            _tmp134.data = pairs
            return _tmp134
    else:
        if rhead is NUMBER:
            #ADD_SYMBOL_NUMBER(LHS=self; RHS=other)
            #ADD_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #ADD_VALUE_SYMBOL(VALUE=other.data; RHS=self)
            _tmp138 = other.data
            if not _tmp138:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp138, self: 1})
            #NEWINSTANCE(OBJ=_tmp139; HEAD=TERMS; DATA={cls.one: _tmp138, self: 1})
            _tmp139 = new(cls)
            _tmp139.head = TERMS
            _tmp139.data = {cls.one: _tmp138, self: 1}
            return _tmp139
        elif rhead is TERMS:
            #ADD_SYMBOL_TERMS(LHS=self; RHS=other)
            #ADD_TERMS_SYMBOL(LHS=other; RHS=self)
            pairs = dict(other.data)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                if c:
                    pairs[self] = c
                else:
                    del pairs[self]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp145; HEAD=TERMS; DATA=pairs)
            _tmp145 = new(cls)
            _tmp145.head = TERMS
            _tmp145.data = pairs
            return _tmp145
        else:
            #ADD_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp148; HEAD=TERMS; DATA=pairs)
            _tmp148 = new(cls)
            _tmp148.head = TERMS
            _tmp148.data = pairs
            return _tmp148

def sub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #SUB_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data - other)
                #NEWINSTANCE(OBJ=_tmp151; HEAD=NUMBER; DATA=self.data - other)
                _tmp151 = new(cls)
                _tmp151.head = NUMBER
                _tmp151.data = self.data - other
                return _tmp151
            elif lhead is TERMS:
                #SUB_TERMS_VALUE(VALUE=other; LHS=self)
                #ADD_VALUE_TERMS(VALUE=-other; RHS=self)
                _tmp154 = -other
                if not _tmp154:
                    return self
                pairs = dict(self.data)
                #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp154)
                #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp154; DICT=pairs; DICT_GET=pairs.get)
                b = pairs.get(cls.one)
                if b is None:
                    pairs[cls.one] = _tmp154
                else:
                    c = b + _tmp154
                    if c:
                        pairs[cls.one] = c
                    else:
                        del pairs[cls.one]
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp157; HEAD=TERMS; DATA=pairs)
                _tmp157 = new(cls)
                _tmp157.head = TERMS
                _tmp157.data = pairs
                return _tmp157
            else:
                #SUB_SYMBOL_VALUE(VALUE=other; LHS=self)
                #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; VALUE=-other)
                #ADD_VALUE_SYMBOL(VALUE=-other; RHS=self)
                _tmp161 = -other
                if not _tmp161:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp161, self: 1})
                #NEWINSTANCE(OBJ=_tmp162; HEAD=TERMS; DATA={cls.one: _tmp161, self: 1})
                _tmp162 = new(cls)
                _tmp162.head = TERMS
                _tmp162.data = {cls.one: _tmp161, self: 1}
                return _tmp162
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #SUB_NUMBER_NUMBER(LHS=self; RHS=other)
            #SUB_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data - other.data)
            #NEWINSTANCE(OBJ=_tmp166; HEAD=NUMBER; DATA=self.data - other.data)
            _tmp166 = new(cls)
            _tmp166.head = NUMBER
            _tmp166.data = self.data - other.data
            return _tmp166
        elif rhead is TERMS:
            #SUB_NUMBER_TERMS(LHS=self; RHS=other)
            #SUB_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp169 = self.data
            if not _tmp169:
                #NEG_TERMS(OP=other)
                op_pairs = other.data
                if len(op_pairs)==1:
                    t, c = op_pairs.items()[0]
                    c = -c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                    #NEWINSTANCE(OBJ=_tmp171; HEAD=TERMS; DATA={t:c})
                    _tmp171 = new(cls)
                    _tmp171.head = TERMS
                    _tmp171.data = {t:c}
                    return _tmp171
                #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
                pairs = dict([(t, -c) for t,c in other.data.iteritems()])
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp174; HEAD=TERMS; DATA=pairs)
                _tmp174 = new(cls)
                _tmp174.head = TERMS
                _tmp174.data = pairs
                return _tmp174
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp169)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp169; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(cls.one)
            if b is None:
                pairs[cls.one] = _tmp169
            else:
                c = b + _tmp169
                if c:
                    pairs[cls.one] = c
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp179; HEAD=TERMS; DATA=pairs)
            _tmp179 = new(cls)
            _tmp179.head = TERMS
            _tmp179.data = pairs
            return _tmp179
        else:
            #SUB_NUMBER_SYMBOL(LHS=self; RHS=other)
            #SUB_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp182 = self.data
            if not _tmp182:
                #RETURN_NEW(HEAD=TERMS; DATA={other: -1})
                #NEWINSTANCE(OBJ=_tmp183; HEAD=TERMS; DATA={other: -1})
                _tmp183 = new(cls)
                _tmp183.head = TERMS
                _tmp183.data = {other: -1}
                return _tmp183
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp182, other: -1})
            #NEWINSTANCE(OBJ=_tmp185; HEAD=TERMS; DATA={cls.one: _tmp182, other: -1})
            _tmp185 = new(cls)
            _tmp185.head = TERMS
            _tmp185.data = {cls.one: _tmp182, other: -1}
            return _tmp185
    elif lhead is TERMS:
        if rhead is NUMBER:
            #SUB_TERMS_NUMBER(LHS=self; RHS=other)
            #SUB_TERMS_VALUE(VALUE=other.data; LHS=self)
            #ADD_VALUE_TERMS(VALUE=-other.data; RHS=self)
            _tmp189 = -other.data
            if not _tmp189:
                return self
            pairs = dict(self.data)
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp189)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp189; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(cls.one)
            if b is None:
                pairs[cls.one] = _tmp189
            else:
                c = b + _tmp189
                if c:
                    pairs[cls.one] = c
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp192; HEAD=TERMS; DATA=pairs)
            _tmp192 = new(cls)
            _tmp192.head = TERMS
            _tmp192.data = pairs
            return _tmp192
        elif rhead is TERMS:
            #SUB_TERMS_TERMS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            for t,c in other.data.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=-c; DICT=pairs; DICT_GET=pairs_get)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = -c
                else:
                    c = b + -c
                    if c:
                        pairs[t] = c
                    else:
                        del pairs[t]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp197; HEAD=TERMS; DATA=pairs)
            _tmp197 = new(cls)
            _tmp197.head = TERMS
            _tmp197.data = pairs
            return _tmp197
        else:
            #SUB_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = -1
            else:
                c = b + -1
                if c:
                    pairs[other] = c
                else:
                    del pairs[other]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp202; HEAD=TERMS; DATA=pairs)
            _tmp202 = new(cls)
            _tmp202.head = TERMS
            _tmp202.data = pairs
            return _tmp202
    else:
        if rhead is NUMBER:
            #SUB_SYMBOL_NUMBER(LHS=self; RHS=other)
            #SUB_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; VALUE=-other.data)
            #ADD_VALUE_SYMBOL(VALUE=-other.data; RHS=self)
            _tmp207 = -other.data
            if not _tmp207:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp207, self: 1})
            #NEWINSTANCE(OBJ=_tmp208; HEAD=TERMS; DATA={cls.one: _tmp207, self: 1})
            _tmp208 = new(cls)
            _tmp208.head = TERMS
            _tmp208.data = {cls.one: _tmp207, self: 1}
            return _tmp208
        elif rhead is TERMS:
            #SUB_SYMBOL_TERMS(LHS=self; RHS=other)
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                if c:
                    pairs[self] = c
                else:
                    del pairs[self]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp214; HEAD=TERMS; DATA=pairs)
            _tmp214 = new(cls)
            _tmp214.head = TERMS
            _tmp214.data = pairs
            return _tmp214
        else:
            #SUB_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                return cls.zero
            #RETURN_NEW(HEAD=TERMS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp217; HEAD=TERMS; DATA={self: 1, other: -1})
            _tmp217 = new(cls)
            _tmp217.head = TERMS
            _tmp217.data = {self: 1, other: -1}
            return _tmp217

def mul_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #MUL_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data * other)
                #NEWINSTANCE(OBJ=_tmp220; HEAD=NUMBER; DATA=self.data * other)
                _tmp220 = new(cls)
                _tmp220.head = NUMBER
                _tmp220.data = self.data * other
                return _tmp220
            elif lhead is TERMS:
                #MUL_TERMS_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_TERMS(VALUE=other; RHS=self)
                _tmp223 = other
                if not _tmp223:
                    return cls.zero
                pairs = self.data
                if len(pairs)==1:
                    t, c = pairs.items()[0]
                    c = _tmp223 * c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp224; HEAD=TERMS; DATA={t: c})
                    _tmp224 = new(cls)
                    _tmp224.head = TERMS
                    _tmp224.data = {t: c}
                    return _tmp224
                if _tmp223==1:
                    return self
                pairs = {}
                for t,c in self.data.iteritems():
                    pairs[t] = _tmp223 * c
                #CANONIZE_TERMS_DICT(DICT=pairs)
                if not pairs:
                    return cls.zero
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return cls.convert(c)
                #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
                obj = new(cls)
                obj.head = TERMS
                obj.data = pairs
                coeff, terms = self._coeff_terms
                if terms is not None:
                    c = coeff * _tmp223
                    if not c==1:
                        obj._coeff_terms = (c, terms)
                else:
                    obj._coeff_terms = (_tmp223, self)
                return obj
            elif lhead is FACTORS:
                #MUL_FACTORS_VALUE(VALUE=other; LHS=self)
                #MUL_SYMBOL_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=other; RHS=self)
                _tmp230 = other
                if not _tmp230:
                    return cls.zero
                if _tmp230==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp230})
                #NEWINSTANCE(OBJ=_tmp231; HEAD=TERMS; DATA={self: _tmp230})
                _tmp231 = new(cls)
                _tmp231.head = TERMS
                _tmp231.data = {self: _tmp230}
                return _tmp231
            else:
                #MUL_SYMBOL_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=other; RHS=self)
                _tmp234 = other
                if not _tmp234:
                    return cls.zero
                if _tmp234==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp234})
                #NEWINSTANCE(OBJ=_tmp235; HEAD=TERMS; DATA={self: _tmp234})
                _tmp235 = new(cls)
                _tmp235.head = TERMS
                _tmp235.data = {self: _tmp234}
                return _tmp235
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #MUL_NUMBER_NUMBER(LHS=self; RHS=other)
            #MUL_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data * other.data)
            #NEWINSTANCE(OBJ=_tmp239; HEAD=NUMBER; DATA=self.data * other.data)
            _tmp239 = new(cls)
            _tmp239.head = NUMBER
            _tmp239.data = self.data * other.data
            return _tmp239
        elif rhead is TERMS:
            #MUL_NUMBER_TERMS(LHS=self; RHS=other)
            #MUL_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp242 = self.data
            if not _tmp242:
                return cls.zero
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp242 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp243; HEAD=TERMS; DATA={t: c})
                _tmp243 = new(cls)
                _tmp243.head = TERMS
                _tmp243.data = {t: c}
                return _tmp243
            if _tmp242==1:
                return other
            pairs = {}
            for t,c in other.data.iteritems():
                pairs[t] = _tmp242 * c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            coeff, terms = other._coeff_terms
            if terms is not None:
                c = coeff * _tmp242
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp242, other)
            return obj
        elif rhead is FACTORS:
            #MUL_NUMBER_FACTORS(LHS=self; RHS=other)
            #MUL_SYMBOL_VALUE(VALUE=self.data; LHS=other)
            #MUL_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp249 = self.data
            if not _tmp249:
                return cls.zero
            if _tmp249==1:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={other: _tmp249})
            #NEWINSTANCE(OBJ=_tmp250; HEAD=TERMS; DATA={other: _tmp249})
            _tmp250 = new(cls)
            _tmp250.head = TERMS
            _tmp250.data = {other: _tmp249}
            return _tmp250
        else:
            #MUL_NUMBER_SYMBOL(LHS=self; RHS=other)
            #MUL_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp253 = self.data
            if not _tmp253:
                return cls.zero
            if _tmp253==1:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={other: _tmp253})
            #NEWINSTANCE(OBJ=_tmp254; HEAD=TERMS; DATA={other: _tmp253})
            _tmp254 = new(cls)
            _tmp254.head = TERMS
            _tmp254.data = {other: _tmp253}
            return _tmp254
    elif lhead is TERMS:
        if rhead is NUMBER:
            #MUL_TERMS_NUMBER(LHS=self; RHS=other)
            #MUL_TERMS_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_TERMS(VALUE=other.data; RHS=self)
            _tmp258 = other.data
            if not _tmp258:
                return cls.zero
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp258 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp259; HEAD=TERMS; DATA={t: c})
                _tmp259 = new(cls)
                _tmp259.head = TERMS
                _tmp259.data = {t: c}
                return _tmp259
            if _tmp258==1:
                return self
            pairs = {}
            for t,c in self.data.iteritems():
                pairs[t] = _tmp258 * c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            coeff, terms = self._coeff_terms
            if terms is not None:
                c = coeff * _tmp258
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp258, self)
            return obj
        elif rhead is TERMS:
            #MUL_TERMS_TERMS(LHS=self; RHS=other)
            lpairs = self.data
            rpairs = other.data
            if len(lpairs)==1:
                t1,c1 = lpairs.items()[0]
                if len(rpairs)==1:
                    t2,c2 = rpairs.items()[0]
                    t = t1 * t2
                    c = c1 * c2
                    if t == cls.one:
                        return cls.convert(c)
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp264; HEAD=TERMS; DATA={t: c})
                    _tmp264 = new(cls)
                    _tmp264.head = TERMS
                    _tmp264.data = {t: c}
                    return _tmp264
                coeff, terms = other._coeff_terms
                if terms is None:
                    return (t1 * other) * c1
                return (t1*terms) * (c1*coeff)
            elif len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                coeff, terms = other._coeff_terms
                if terms is None:
                    return (t1 * self) * c1
                return (t1*terms) * (c1*coeff)
            lcoeff, lterms = self._coeff_terms
            rcoeff, rterms = other._coeff_terms
            if lterms is None:
                lterms = self
            if rterms is None:
                rterms = other
            if lterms==rterms:
                #NEWINSTANCE(OBJ=_tmp263; HEAD=FACTORS; DATA={lterms: 2})
                _tmp263 = new(cls)
                _tmp263.head = FACTORS
                _tmp263.data = {lterms: 2}
            else:
                #NEWINSTANCE(OBJ=_tmp263; HEAD=FACTORS; DATA={lterms: 1, rterms: 1})
                _tmp263 = new(cls)
                _tmp263.head = FACTORS
                _tmp263.data = {lterms: 1, rterms: 1}
            c = lcoeff * rcoeff
            if c==1:
                return _tmp263
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp263: c})
            #NEWINSTANCE(OBJ=_tmp268; HEAD=TERMS; DATA={_tmp263: c})
            _tmp268 = new(cls)
            _tmp268.head = TERMS
            _tmp268.data = {_tmp263: c}
            return _tmp268
        elif rhead is FACTORS:
            #MUL_TERMS_FACTORS(LHS=self; RHS=other)
            #MUL_FACTORS_TERMS(LHS=other; RHS=self)
            rpairs = self.data
            if len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                t = t1 * other
                #RETURN_NEW(HEAD=TERMS; DATA={t: c1})
                #NEWINSTANCE(OBJ=_tmp272; HEAD=TERMS; DATA={t: c1})
                _tmp272 = new(cls)
                _tmp272.head = TERMS
                _tmp272.data = {t: c1}
                return _tmp272
            coeff, terms = self._coeff_terms
            if terms is None:
                #MUL_FACTORS_SYMBOL(LHS=other; RHS=self)
                pairs = dict(other.data)
                #MUL_DICT_SYMBOL(DICT=pairs; RHS=self)
                #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
                b = pairs.get(self)
                if b is None:
                    pairs[self] = 1
                else:
                    c = b + 1
                    if c:
                        pairs[self] = c
                    else:
                        del pairs[self]
                #CANONIZE_FACTORS_DICT1(DICT=pairs)
                if not pairs:
                    return cls.one
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return t
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp278; HEAD=FACTORS; DATA=pairs)
                _tmp278 = new(cls)
                _tmp278.head = FACTORS
                _tmp278.data = pairs
                return _tmp278
            return (other * terms) * coeff
        else:
            #MUL_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = self.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                t = t * other
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp281; HEAD=TERMS; DATA={t: c})
                _tmp281 = new(cls)
                _tmp281.head = TERMS
                _tmp281.data = {t: c}
                return _tmp281
            coeff, terms = self._coeff_terms
            if terms is not None:
                #NEWINSTANCE(OBJ=_tmp280; HEAD=FACTORS; DATA={terms:1, other:1})
                _tmp280 = new(cls)
                _tmp280.head = FACTORS
                _tmp280.data = {terms:1, other:1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp280:coeff})
                #NEWINSTANCE(OBJ=_tmp284; HEAD=TERMS; DATA={_tmp280:coeff})
                _tmp284 = new(cls)
                _tmp284.head = TERMS
                _tmp284.data = {_tmp280:coeff}
                return _tmp284
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: 1})
            #NEWINSTANCE(OBJ=_tmp286; HEAD=FACTORS; DATA={self: 1, other: 1})
            _tmp286 = new(cls)
            _tmp286.head = FACTORS
            _tmp286.data = {self: 1, other: 1}
            return _tmp286
    elif lhead is FACTORS:
        if rhead is NUMBER:
            #MUL_FACTORS_NUMBER(LHS=self; RHS=other)
            #MUL_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=other.data; RHS=self)
            _tmp290 = other.data
            if not _tmp290:
                return cls.zero
            if _tmp290==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp290})
            #NEWINSTANCE(OBJ=_tmp291; HEAD=TERMS; DATA={self: _tmp290})
            _tmp291 = new(cls)
            _tmp291.head = TERMS
            _tmp291.data = {self: _tmp290}
            return _tmp291
        elif rhead is TERMS:
            #MUL_FACTORS_TERMS(LHS=self; RHS=other)
            rpairs = other.data
            if len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                t = t1 * self
                #RETURN_NEW(HEAD=TERMS; DATA={t: c1})
                #NEWINSTANCE(OBJ=_tmp294; HEAD=TERMS; DATA={t: c1})
                _tmp294 = new(cls)
                _tmp294.head = TERMS
                _tmp294.data = {t: c1}
                return _tmp294
            coeff, terms = other._coeff_terms
            if terms is None:
                #MUL_FACTORS_SYMBOL(LHS=self; RHS=other)
                pairs = dict(self.data)
                #MUL_DICT_SYMBOL(DICT=pairs; RHS=other)
                #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
                b = pairs.get(other)
                if b is None:
                    pairs[other] = 1
                else:
                    c = b + 1
                    if c:
                        pairs[other] = c
                    else:
                        del pairs[other]
                #CANONIZE_FACTORS_DICT1(DICT=pairs)
                if not pairs:
                    return cls.one
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return t
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp300; HEAD=FACTORS; DATA=pairs)
                _tmp300 = new(cls)
                _tmp300.head = FACTORS
                _tmp300.data = pairs
                return _tmp300
            return (self * terms) * coeff
        elif rhead is FACTORS:
            #MUL_FACTORS_FACTORS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            number = 1
            for t,c in other.data.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=+; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = + c
                else:
                    _tmp303 = b + c
                    if type(_tmp303) is cls and _tmp303.head is NUMBER:
                        _tmp303 = _tmp303.data
                    if _tmp303:
                        if t.head is NUMBER:
                            r = t ** _tmp303
                            if r.head is NUMBER:
                                number *= r
                                del pairs[t]
                            else:
                                pairs[t] = _tmp303
                        else:
                            pairs[t] = _tmp303
                    else:
                        del pairs[t]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t * number
               if t==cls.one:
                   return number
            if number is 1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp305; HEAD=FACTORS; DATA=pairs)
                _tmp305 = new(cls)
                _tmp305.head = FACTORS
                _tmp305.data = pairs
                return _tmp305
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = new(cls)
            obj.head = FACTORS
            obj.data = pairs
            return obj * number
        else:
            #MUL_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=other)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = 1
            else:
                c = b + 1
                if c:
                    pairs[other] = c
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp312; HEAD=FACTORS; DATA=pairs)
            _tmp312 = new(cls)
            _tmp312.head = FACTORS
            _tmp312.data = pairs
            return _tmp312
    else:
        if rhead is NUMBER:
            #MUL_SYMBOL_NUMBER(LHS=self; RHS=other)
            #MUL_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=other.data; RHS=self)
            _tmp316 = other.data
            if not _tmp316:
                return cls.zero
            if _tmp316==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp316})
            #NEWINSTANCE(OBJ=_tmp317; HEAD=TERMS; DATA={self: _tmp316})
            _tmp317 = new(cls)
            _tmp317.head = TERMS
            _tmp317.data = {self: _tmp316}
            return _tmp317
        elif rhead is TERMS:
            #MUL_SYMBOL_TERMS(LHS=self; RHS=other)
            #MUL_TERMS_SYMBOL(LHS=other; RHS=self)
            pairs = other.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                t = t * self
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp321; HEAD=TERMS; DATA={t: c})
                _tmp321 = new(cls)
                _tmp321.head = TERMS
                _tmp321.data = {t: c}
                return _tmp321
            coeff, terms = other._coeff_terms
            if terms is not None:
                #NEWINSTANCE(OBJ=_tmp320; HEAD=FACTORS; DATA={terms:1, self:1})
                _tmp320 = new(cls)
                _tmp320.head = FACTORS
                _tmp320.data = {terms:1, self:1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp320:coeff})
                #NEWINSTANCE(OBJ=_tmp324; HEAD=TERMS; DATA={_tmp320:coeff})
                _tmp324 = new(cls)
                _tmp324.head = TERMS
                _tmp324.data = {_tmp320:coeff}
                return _tmp324
            #RETURN_NEW(HEAD=FACTORS; DATA={other: 1, self: 1})
            #NEWINSTANCE(OBJ=_tmp326; HEAD=FACTORS; DATA={other: 1, self: 1})
            _tmp326 = new(cls)
            _tmp326.head = FACTORS
            _tmp326.data = {other: 1, self: 1}
            return _tmp326
        elif rhead is FACTORS:
            #MUL_SYMBOL_FACTORS(LHS=self; RHS=other)
            #MUL_FACTORS_SYMBOL(LHS=other; RHS=self)
            pairs = dict(other.data)
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                if c:
                    pairs[self] = c
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp333; HEAD=FACTORS; DATA=pairs)
            _tmp333 = new(cls)
            _tmp333.head = FACTORS
            _tmp333.data = pairs
            return _tmp333
        else:
            #MUL_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp336; HEAD=FACTORS; DATA=pairs)
            _tmp336 = new(cls)
            _tmp336.head = FACTORS
            _tmp336.data = pairs
            return _tmp336

def div_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #DIV_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW2(HEAD=NUMBER; DATA=div(self.data, other, cls))
                _tmp339 = div(self.data, other, cls)
                if isinstance(_tmp339, Infinity):
                    return _tmp339
                #RETURN_NEW(HEAD=NUMBER; DATA=_tmp339)
                #NEWINSTANCE(OBJ=_tmp340; HEAD=NUMBER; DATA=_tmp339)
                _tmp340 = new(cls)
                _tmp340.head = NUMBER
                _tmp340.data = _tmp339
                return _tmp340
            elif lhead is TERMS:
                #DIV_TERMS_VALUE(VALUE=other; LHS=self)
                #MUL_TERMS_VALUE(LHS=self; VALUE=div(1,other,cls))
                #MUL_VALUE_TERMS(VALUE=div(1,other,cls); RHS=self)
                _tmp344 = div(1,other,cls)
                if not _tmp344:
                    return cls.zero
                pairs = self.data
                if len(pairs)==1:
                    t, c = pairs.items()[0]
                    c = _tmp344 * c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp345; HEAD=TERMS; DATA={t: c})
                    _tmp345 = new(cls)
                    _tmp345.head = TERMS
                    _tmp345.data = {t: c}
                    return _tmp345
                if _tmp344==1:
                    return self
                pairs = {}
                for t,c in self.data.iteritems():
                    pairs[t] = _tmp344 * c
                #CANONIZE_TERMS_DICT(DICT=pairs)
                if not pairs:
                    return cls.zero
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return cls.convert(c)
                #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
                obj = new(cls)
                obj.head = TERMS
                obj.data = pairs
                coeff, terms = self._coeff_terms
                if terms is not None:
                    c = coeff * _tmp344
                    if not c==1:
                        obj._coeff_terms = (c, terms)
                else:
                    obj._coeff_terms = (_tmp344, self)
                return obj
            elif lhead is FACTORS:
                #DIV_FACTORS_VALUE(VALUE=other; LHS=self)
                #MUL_FACTORS_VALUE(LHS=self; VALUE=div(1,other,cls))
                #MUL_SYMBOL_VALUE(VALUE=div(1,other,cls); LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=div(1,other,cls); RHS=self)
                _tmp352 = div(1,other,cls)
                if not _tmp352:
                    return cls.zero
                if _tmp352==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp352})
                #NEWINSTANCE(OBJ=_tmp353; HEAD=TERMS; DATA={self: _tmp352})
                _tmp353 = new(cls)
                _tmp353.head = TERMS
                _tmp353.data = {self: _tmp352}
                return _tmp353
            else:
                #DIV_SYMBOL_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=div(1, other, cls); RHS=self)
                _tmp356 = div(1, other, cls)
                if not _tmp356:
                    return cls.zero
                if _tmp356==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp356})
                #NEWINSTANCE(OBJ=_tmp357; HEAD=TERMS; DATA={self: _tmp356})
                _tmp357 = new(cls)
                _tmp357.head = TERMS
                _tmp357.data = {self: _tmp356}
                return _tmp357
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #DIV_NUMBER_NUMBER(LHS=self; RHS=other)
            #DIV_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW2(HEAD=NUMBER; DATA=div(self.data, other.data, cls))
            _tmp361 = div(self.data, other.data, cls)
            if isinstance(_tmp361, Infinity):
                return _tmp361
            #RETURN_NEW(HEAD=NUMBER; DATA=_tmp361)
            #NEWINSTANCE(OBJ=_tmp362; HEAD=NUMBER; DATA=_tmp361)
            _tmp362 = new(cls)
            _tmp362.head = NUMBER
            _tmp362.data = _tmp361
            return _tmp362
        elif rhead is TERMS:
            #DIV_NUMBER_TERMS(LHS=self; RHS=other)
            #DIV_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp365 = self.data
            if not _tmp365:
                return cls.zero
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = div(self.data, c, cls)
                t = 1/t
                if c==1:
                    return t
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp366; HEAD=TERMS; DATA={t: c})
                _tmp366 = new(cls)
                _tmp366.head = TERMS
                _tmp366.data = {t: c}
                return _tmp366
            #NEWINSTANCE(OBJ=_tmp365; HEAD=FACTORS; DATA={other: -1})
            _tmp365 = new(cls)
            _tmp365.head = FACTORS
            _tmp365.data = {other: -1}
            if self.data==1:
                return _tmp365
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp365: self.data})
            #NEWINSTANCE(OBJ=_tmp369; HEAD=TERMS; DATA={_tmp365: self.data})
            _tmp369 = new(cls)
            _tmp369.head = TERMS
            _tmp369.data = {_tmp365: self.data}
            return _tmp369
        elif rhead is FACTORS:
            #DIV_NUMBER_FACTORS(LHS=self; RHS=other)
            #DIV_VALUE_FACTORS(VALUE=self.data; RHS=other)
            
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = -c
                if c==1:
                    return t * self.data
                new_pairs = {t: c}
            else:
                #NEG_DICT_VALUES(DICT_IN=pairs; DICT_OUT=new_pairs)
                new_pairs = dict([(t, -c) for t,c in pairs.iteritems()])
            #NEWINSTANCE(OBJ=_tmp372; HEAD=FACTORS; DATA=new_pairs)
            _tmp372 = new(cls)
            _tmp372.head = FACTORS
            _tmp372.data = new_pairs
            if self.data==1:
                return _tmp372
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp372: self.data})
            #NEWINSTANCE(OBJ=_tmp375; HEAD=TERMS; DATA={_tmp372: self.data})
            _tmp375 = new(cls)
            _tmp375.head = TERMS
            _tmp375.data = {_tmp372: self.data}
            return _tmp375
        else:
            #DIV_NUMBER_SYMBOL(LHS=self; RHS=other)
            #DIV_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp378 = self.data
            if not _tmp378:
                return cls.zero
            #NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={other: -1})
            obj2 = new(cls)
            obj2.head = FACTORS
            obj2.data = {other: -1}
            if _tmp378==1:
                return obj2
            #RETURN_NEW(HEAD=TERMS; DATA={obj2: _tmp378})
            #NEWINSTANCE(OBJ=_tmp380; HEAD=TERMS; DATA={obj2: _tmp378})
            _tmp380 = new(cls)
            _tmp380.head = TERMS
            _tmp380.data = {obj2: _tmp378}
            return _tmp380
    elif lhead is TERMS:
        if rhead is NUMBER:
            #DIV_TERMS_NUMBER(LHS=self; RHS=other)
            #DIV_TERMS_VALUE(VALUE=other.data; LHS=self)
            #MUL_TERMS_VALUE(LHS=self; VALUE=div(1,other.data,cls))
            #MUL_VALUE_TERMS(VALUE=div(1,other.data,cls); RHS=self)
            _tmp385 = div(1,other.data,cls)
            if not _tmp385:
                return cls.zero
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp385 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp386; HEAD=TERMS; DATA={t: c})
                _tmp386 = new(cls)
                _tmp386.head = TERMS
                _tmp386.data = {t: c}
                return _tmp386
            if _tmp385==1:
                return self
            pairs = {}
            for t,c in self.data.iteritems():
                pairs[t] = _tmp385 * c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            coeff, terms = self._coeff_terms
            if terms is not None:
                c = coeff * _tmp385
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp385, self)
            return obj
        elif rhead is TERMS:
            #DIV_TERMS_TERMS(LHS=self; RHS=other)
            
            if self==other:
                return cls.one
            lpairs = self.data
            rpairs = other.data
            if len(lpairs)==1:
                t1, c1 = lpairs.items()[0]
                if len(rpairs)==1:
                    t2, c2 = rpairs.items()[0]
                    c = div(c1, c2, cls)
                    if t2==t1:
                        return cls.convert(c)
                    if c==1:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t1:1, t2:-1})
                        #NEWINSTANCE(OBJ=_tmp391; HEAD=FACTORS; DATA={t1:1, t2:-1})
                        _tmp391 = new(cls)
                        _tmp391.head = FACTORS
                        _tmp391.data = {t1:1, t2:-1}
                        return _tmp391
                    #NEWINSTANCE(OBJ=_tmp390; HEAD=FACTORS; DATA={t1:1, t2:-1})
                    _tmp390 = new(cls)
                    _tmp390.head = FACTORS
                    _tmp390.data = {t1:1, t2:-1}
                else:
                    #NEWINSTANCE(OBJ=_tmp390; HEAD=FACTORS; DATA={t1:1, other:-1})
                    _tmp390 = new(cls)
                    _tmp390.head = FACTORS
                    _tmp390.data = {t1:1, other:-1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp390:c1})
                #NEWINSTANCE(OBJ=_tmp395; HEAD=TERMS; DATA={_tmp390:c1})
                _tmp395 = new(cls)
                _tmp395.head = TERMS
                _tmp395.data = {_tmp390:c1}
                return _tmp395
            elif len(rpairs)==1:
                t2, c2 = rpairs.items()[0]
                c = div(1, c2, cls)
                if t2==self:
                    return cls.convert(c)
                _tmp390 = self / t2
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp390:c})
                #NEWINSTANCE(OBJ=_tmp397; HEAD=TERMS; DATA={_tmp390:c})
                _tmp397 = new(cls)
                _tmp397.head = TERMS
                _tmp397.data = {_tmp390:c}
                return _tmp397
            #RETURN_NEW(HEAD=FACTORS; DATA={self:1, other:-1})
            #NEWINSTANCE(OBJ=_tmp399; HEAD=FACTORS; DATA={self:1, other:-1})
            _tmp399 = new(cls)
            _tmp399.head = FACTORS
            _tmp399.data = {self:1, other:-1}
            return _tmp399
        elif rhead is FACTORS:
            #DIV_TERMS_FACTORS(LHS=self; RHS=other)
            lpairs = self.data
            if len(lpairs)==1:
                t, c = lpairs.items()[0]
                t = t / other
                if t==cls.one:
                    return cls.convert(c)
                head = t.head
                if head is NUMBER:
                    #RETURN_NEW(HEAD=NUMBER; DATA=t.data * c)
                    #NEWINSTANCE(OBJ=_tmp402; HEAD=NUMBER; DATA=t.data * c)
                    _tmp402 = new(cls)
                    _tmp402.head = NUMBER
                    _tmp402.data = t.data * c
                    return _tmp402
                elif head is TERMS:
                    #MUL_TERMS_VALUE(LHS=t; VALUE=c)
                    #MUL_VALUE_TERMS(VALUE=c; RHS=t)
                    _tmp405 = c
                    if not _tmp405:
                        return cls.zero
                    pairs = t.data
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp405 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp406; HEAD=TERMS; DATA={t: c})
                        _tmp406 = new(cls)
                        _tmp406.head = TERMS
                        _tmp406.data = {t: c}
                        return _tmp406
                    if _tmp405==1:
                        return t
                    pairs = {}
                    for t,c in t.data.iteritems():
                        pairs[t] = _tmp405 * c
                    #CANONIZE_TERMS_DICT(DICT=pairs)
                    if not pairs:
                        return cls.zero
                    if len(pairs)==1:
                       t, c = pairs.items()[0]
                       if c==1:
                           return t
                       if t==cls.one:
                           return cls.convert(c)
                    #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = pairs
                    coeff, terms = t._coeff_terms
                    if terms is not None:
                        c = coeff * _tmp405
                        if not c==1:
                            obj._coeff_terms = (c, terms)
                    else:
                        obj._coeff_terms = (_tmp405, t)
                    return obj
                else:
                    #MUL_SYMBOL_VALUE(LHS=t; VALUE=c)
                    #MUL_VALUE_SYMBOL(VALUE=c; RHS=t)
                    _tmp411 = c
                    if not _tmp411:
                        return cls.zero
                    if _tmp411==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp411})
                    #NEWINSTANCE(OBJ=_tmp412; HEAD=TERMS; DATA={t: _tmp411})
                    _tmp412 = new(cls)
                    _tmp412.head = TERMS
                    _tmp412.data = {t: _tmp411}
                    return _tmp412
            #DIV_SYMBOL_FACTORS(LHS=self; RHS=other)
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==self:
                    c = 1 - c
                    if not c:
                        return cls.one
                    if c==1:
                        return t
                    else:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp415; HEAD=FACTORS; DATA={t: c})
                        _tmp415 = new(cls)
                        _tmp415.head = FACTORS
                        _tmp415.data = {t: c}
                        return _tmp415
                #RETURN_NEW(HEAD=FACTORS; DATA={t: -c, self: 1})
                #NEWINSTANCE(OBJ=_tmp417; HEAD=FACTORS; DATA={t: -c, self: 1})
                _tmp417 = new(cls)
                _tmp417.head = FACTORS
                _tmp417.data = {t: -c, self: 1}
                return _tmp417
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                if c:
                    pairs[self] = c
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp423; HEAD=FACTORS; DATA=pairs)
            _tmp423 = new(cls)
            _tmp423.head = FACTORS
            _tmp423.data = pairs
            return _tmp423
        else:
            #DIV_TERMS_SYMBOL(LHS=self; RHS=other)
            
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==other:
                    return cls.convert(c)
                #NEWINSTANCE(OBJ=_tmp425; HEAD=FACTORS; DATA={t:1, other: -1})
                _tmp425 = new(cls)
                _tmp425.head = FACTORS
                _tmp425.data = {t:1, other: -1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp425: c})
                #NEWINSTANCE(OBJ=_tmp427; HEAD=TERMS; DATA={_tmp425: c})
                _tmp427 = new(cls)
                _tmp427.head = TERMS
                _tmp427.data = {_tmp425: c}
                return _tmp427
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp429; HEAD=FACTORS; DATA={self: 1, other: -1})
            _tmp429 = new(cls)
            _tmp429.head = FACTORS
            _tmp429.data = {self: 1, other: -1}
            return _tmp429
    elif lhead is FACTORS:
        if rhead is NUMBER:
            #DIV_FACTORS_NUMBER(LHS=self; RHS=other)
            #DIV_FACTORS_VALUE(VALUE=other.data; LHS=self)
            #MUL_FACTORS_VALUE(LHS=self; VALUE=div(1,other.data,cls))
            #MUL_SYMBOL_VALUE(VALUE=div(1,other.data,cls); LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=div(1,other.data,cls); RHS=self)
            _tmp435 = div(1,other.data,cls)
            if not _tmp435:
                return cls.zero
            if _tmp435==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp435})
            #NEWINSTANCE(OBJ=_tmp436; HEAD=TERMS; DATA={self: _tmp435})
            _tmp436 = new(cls)
            _tmp436.head = TERMS
            _tmp436.data = {self: _tmp435}
            return _tmp436
        elif rhead is TERMS:
            #DIV_FACTORS_TERMS(LHS=self; RHS=other)
            rpairs = other.data
            if len(rpairs)==1:
                t, c = rpairs.items()[0]
                t = self / t
                c = div(1, c, cls)
                if t==cls.one:
                    return cls.convert(c)
                head = t.head
                if head is NUMBER:
                    #RETURN_NEW(HEAD=NUMBER; DATA=t.data * c)
                    #NEWINSTANCE(OBJ=_tmp439; HEAD=NUMBER; DATA=t.data * c)
                    _tmp439 = new(cls)
                    _tmp439.head = NUMBER
                    _tmp439.data = t.data * c
                    return _tmp439
                elif head is TERMS:
                    #MUL_TERMS_VALUE(LHS=t; VALUE=c)
                    #MUL_VALUE_TERMS(VALUE=c; RHS=t)
                    _tmp442 = c
                    if not _tmp442:
                        return cls.zero
                    pairs = t.data
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp442 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp443; HEAD=TERMS; DATA={t: c})
                        _tmp443 = new(cls)
                        _tmp443.head = TERMS
                        _tmp443.data = {t: c}
                        return _tmp443
                    if _tmp442==1:
                        return t
                    pairs = {}
                    for t,c in t.data.iteritems():
                        pairs[t] = _tmp442 * c
                    #CANONIZE_TERMS_DICT(DICT=pairs)
                    if not pairs:
                        return cls.zero
                    if len(pairs)==1:
                       t, c = pairs.items()[0]
                       if c==1:
                           return t
                       if t==cls.one:
                           return cls.convert(c)
                    #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = pairs
                    coeff, terms = t._coeff_terms
                    if terms is not None:
                        c = coeff * _tmp442
                        if not c==1:
                            obj._coeff_terms = (c, terms)
                    else:
                        obj._coeff_terms = (_tmp442, t)
                    return obj
                else:
                    #MUL_SYMBOL_VALUE(LHS=t; VALUE=c)
                    #MUL_VALUE_SYMBOL(VALUE=c; RHS=t)
                    _tmp448 = c
                    if not _tmp448:
                        return cls.zero
                    if _tmp448==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp448})
                    #NEWINSTANCE(OBJ=_tmp449; HEAD=TERMS; DATA={t: _tmp448})
                    _tmp449 = new(cls)
                    _tmp449.head = TERMS
                    _tmp449.data = {t: _tmp448}
                    return _tmp449
            #DIV_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #DIV_DICT_SYMBOL(RHS=other; DICT=pairs)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = -1
            else:
                c = b + -1
                if c:
                    pairs[other] = c
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp455; HEAD=FACTORS; DATA=pairs)
            _tmp455 = new(cls)
            _tmp455.head = FACTORS
            _tmp455.data = pairs
            return _tmp455
        elif rhead is FACTORS:
            #DIV_FACTORS_FACTORS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            number = 1
            for t,c in other.data.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=-; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = - c
                else:
                    _tmp458 = b - c
                    if type(_tmp458) is cls and _tmp458.head is NUMBER:
                        _tmp458 = _tmp458.data
                    if _tmp458:
                        if t.head is NUMBER:
                            r = t ** _tmp458
                            if r.head is NUMBER:
                                number *= r
                                del pairs[t]
                            else:
                                pairs[t] = _tmp458
                        else:
                            pairs[t] = _tmp458
                    else:
                        del pairs[t]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t * number
               if t==cls.one:
                   return number
            if number==1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp460; HEAD=FACTORS; DATA=pairs)
                _tmp460 = new(cls)
                _tmp460.head = FACTORS
                _tmp460.data = pairs
                return _tmp460
            #NEWINSTANCE(OBJ=_tmp457; HEAD=FACTORS; DATA=pairs)
            _tmp457 = new(cls)
            _tmp457.head = FACTORS
            _tmp457.data = pairs
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp457: number})
            #NEWINSTANCE(OBJ=_tmp463; HEAD=TERMS; DATA={_tmp457: number})
            _tmp463 = new(cls)
            _tmp463.head = TERMS
            _tmp463.data = {_tmp457: number}
            return _tmp463
        else:
            #DIV_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #DIV_DICT_SYMBOL(RHS=other; DICT=pairs)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = -1
            else:
                c = b + -1
                if c:
                    pairs[other] = c
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp469; HEAD=FACTORS; DATA=pairs)
            _tmp469 = new(cls)
            _tmp469.head = FACTORS
            _tmp469.data = pairs
            return _tmp469
    else:
        if rhead is NUMBER:
            #DIV_SYMBOL_NUMBER(LHS=self; RHS=other)
            #DIV_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=div(1, other.data, cls); RHS=self)
            _tmp473 = div(1, other.data, cls)
            if not _tmp473:
                return cls.zero
            if _tmp473==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp473})
            #NEWINSTANCE(OBJ=_tmp474; HEAD=TERMS; DATA={self: _tmp473})
            _tmp474 = new(cls)
            _tmp474.head = TERMS
            _tmp474.data = {self: _tmp473}
            return _tmp474
        elif rhead is TERMS:
            #DIV_SYMBOL_TERMS(LHS=self; RHS=other)
            pairs = other.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                if self==t:
                    return cls.convert(div(1, c, cls))
                #NEWINSTANCE(OBJ=_tmp476; HEAD=FACTORS; DATA={self:1, t:-1})
                _tmp476 = new(cls)
                _tmp476.head = FACTORS
                _tmp476.data = {self:1, t:-1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp476: div(1, c, cls)})
                #NEWINSTANCE(OBJ=_tmp478; HEAD=TERMS; DATA={_tmp476: div(1, c, cls)})
                _tmp478 = new(cls)
                _tmp478.head = TERMS
                _tmp478.data = {_tmp476: div(1, c, cls)}
                return _tmp478
            #RETURN_NEW(HEAD=FACTORS; DATA={self:1, other:-1})
            #NEWINSTANCE(OBJ=_tmp480; HEAD=FACTORS; DATA={self:1, other:-1})
            _tmp480 = new(cls)
            _tmp480.head = FACTORS
            _tmp480.data = {self:1, other:-1}
            return _tmp480
        elif rhead is FACTORS:
            #DIV_SYMBOL_FACTORS(LHS=self; RHS=other)
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==self:
                    c = 1 - c
                    if not c:
                        return cls.one
                    if c==1:
                        return t
                    else:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp483; HEAD=FACTORS; DATA={t: c})
                        _tmp483 = new(cls)
                        _tmp483.head = FACTORS
                        _tmp483.data = {t: c}
                        return _tmp483
                #RETURN_NEW(HEAD=FACTORS; DATA={t: -c, self: 1})
                #NEWINSTANCE(OBJ=_tmp485; HEAD=FACTORS; DATA={t: -c, self: 1})
                _tmp485 = new(cls)
                _tmp485.head = FACTORS
                _tmp485.data = {t: -c, self: 1}
                return _tmp485
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                if c:
                    pairs[self] = c
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp491; HEAD=FACTORS; DATA=pairs)
            _tmp491 = new(cls)
            _tmp491.head = FACTORS
            _tmp491.data = pairs
            return _tmp491
        else:
            #DIV_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                return cls.one
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp494; HEAD=FACTORS; DATA={self: 1, other: -1})
            _tmp494 = new(cls)
            _tmp494.head = FACTORS
            _tmp494.data = {self: 1, other: -1}
            return _tmp494
