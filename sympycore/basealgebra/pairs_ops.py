"""
This file is generated by the sympycore/basealgebra/mk_pairs.py script.
DO NOT CHANGE THIS FILE DIRECTLY!!!
"""

from ..utils import NUMBER, SYMBOL, TERMS, FACTORS, RedirectOperation
from ..arithmetic.numbers import (ExtendedNumber, normalized_fraction,
 FractionTuple, try_power, numbertypes)

def div(a, b, cls):
    tb = type(b)
    if tb is int or tb is long:
        ta = type(a)
        if ta is int or tb is long:
            if not b:
                if not a:
                    return cls.undefined
                return cls.zoo
            return normalized_fraction(a, b)
        if not b:
            return a / b
        if b == 1:
            return a
        return FractionTuple((1,b)) * a
    return a / b




def neg_method(self, NUMBER=NUMBER, TERMS=TERMS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if lhead is NUMBER:
        #NEG_NUMBER(OP=self)
        #RETURN_NEW(HEAD=NUMBER; DATA=-self.data)
        #NEWINSTANCE(OBJ=_tmp3; HEAD=NUMBER; DATA=-self.data)
        _tmp3 = new(cls)
        _tmp3.head = NUMBER
        _tmp3.data = -self.data
        return _tmp3
    elif lhead is TERMS:
        #NEG_TERMS(OP=self)
        op_pairs = self.data
        if len(op_pairs)==1:
            t, c = op_pairs.items()[0]
            c = -c
            if c==1:
                return t
            #RETURN_NEW(HEAD=TERMS; DATA={t:c})
            #NEWINSTANCE(OBJ=_tmp6; HEAD=TERMS; DATA={t:c})
            _tmp6 = new(cls)
            _tmp6.head = TERMS
            _tmp6.data = {t:c}
            return _tmp6
        #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
        pairs = dict([(t, -c) for t,c in self.data.iteritems()])
        #RETURN_NEW(HEAD=TERMS; DATA=pairs)
        #NEWINSTANCE(OBJ=_tmp9; HEAD=TERMS; DATA=pairs)
        _tmp9 = new(cls)
        _tmp9.head = TERMS
        _tmp9.data = pairs
        return _tmp9
    else:
        #NEG_SYMBOL(OP=self)
        #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
        #NEWINSTANCE(OBJ=_tmp12; HEAD=TERMS; DATA={self: -1})
        _tmp12 = new(cls)
        _tmp12.head = TERMS
        _tmp12.data = {self: -1}
        return _tmp12

def rsub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #SUB_VALUE_NUMBER(VALUE=other; RHS=self)
            #RETURN_NEW(HEAD=NUMBER; DATA=other - self.data)
            #NEWINSTANCE(OBJ=_tmp15; HEAD=NUMBER; DATA=other - self.data)
            _tmp15 = new(cls)
            _tmp15.head = NUMBER
            _tmp15.data = other - self.data
            return _tmp15
        elif lhead is TERMS:
            #SUB_VALUE_TERMS(VALUE=other; RHS=self)
            _tmp17 = other
            try:
                if not _tmp17:
                    #NEG_TERMS(OP=self)
                    op_pairs = self.data
                    if len(op_pairs)==1:
                        t, c = op_pairs.items()[0]
                        c = -c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                        #NEWINSTANCE(OBJ=_tmp19; HEAD=TERMS; DATA={t:c})
                        _tmp19 = new(cls)
                        _tmp19.head = TERMS
                        _tmp19.data = {t:c}
                        return _tmp19
                    #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
                    pairs = dict([(t, -c) for t,c in self.data.iteritems()])
                    #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                    #NEWINSTANCE(OBJ=_tmp22; HEAD=TERMS; DATA=pairs)
                    _tmp22 = new(cls)
                    _tmp22.head = TERMS
                    _tmp22.data = pairs
                    return _tmp22
            except RedirectOperation:
                pass
            #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in self.data.iteritems()])
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp17)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp17; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = _tmp17
            else:
                c = b + _tmp17
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp27; HEAD=TERMS; DATA=pairs)
            _tmp27 = new(cls)
            _tmp27.head = TERMS
            _tmp27.data = pairs
            return _tmp27
        else:
            #SUB_VALUE_SYMBOL(VALUE=other; RHS=self)
            _tmp29 = other
            try:
                if not _tmp29:
                    #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
                    #NEWINSTANCE(OBJ=_tmp30; HEAD=TERMS; DATA={self: -1})
                    _tmp30 = new(cls)
                    _tmp30.head = TERMS
                    _tmp30.data = {self: -1}
                    return _tmp30
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp29, self: -1})
            #NEWINSTANCE(OBJ=_tmp32; HEAD=TERMS; DATA={cls.one: _tmp29, self: -1})
            _tmp32 = new(cls)
            _tmp32.head = TERMS
            _tmp32.data = {cls.one: _tmp29, self: -1}
            return _tmp32
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other - self

def rdiv_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #DIV_VALUE_NUMBER(VALUE=other; RHS=self)
            rhs = self.data
            if not rhs:
                return other * cls.zoo
            #RETURN_NEW(HEAD=NUMBER; DATA=div(other, rhs, cls))
            #NEWINSTANCE(OBJ=_tmp35; HEAD=NUMBER; DATA=div(other, rhs, cls))
            _tmp35 = new(cls)
            _tmp35.head = NUMBER
            _tmp35.data = div(other, rhs, cls)
            return _tmp35
        elif lhead is TERMS:
            #DIV_VALUE_TERMS(VALUE=other; RHS=self)
            #MUL_ZERO_OP(VALUE=other; OP=self)
            try:
                if not other:
                    if self.has_active():
                        #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                        #NEWINSTANCE(OBJ=_tmp39; HEAD=TERMS; DATA={self: 0})
                        _tmp39 = new(cls)
                        _tmp39.head = TERMS
                        _tmp39.data = {self: 0}
                        return _tmp39
                    else:
                        return cls.zero
            except RedirectOperation:
                pass
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = div(other, c, cls)
                t = 1/t
                if c==1:
                    return t
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp41; HEAD=TERMS; DATA={t: c})
                _tmp41 = new(cls)
                _tmp41.head = TERMS
                _tmp41.data = {t: c}
                return _tmp41
            #NEWINSTANCE(OBJ=_tmp37; HEAD=FACTORS; DATA={self: -1})
            _tmp37 = new(cls)
            _tmp37.head = FACTORS
            _tmp37.data = {self: -1}
            if other==1:
                return _tmp37
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp37: other})
            #NEWINSTANCE(OBJ=_tmp44; HEAD=TERMS; DATA={_tmp37: other})
            _tmp44 = new(cls)
            _tmp44.head = TERMS
            _tmp44.data = {_tmp37: other}
            return _tmp44
        elif lhead is FACTORS:
            #DIV_VALUE_FACTORS(VALUE=other; RHS=self)
            
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = -c
                if c==1:
                    return t * other
                new_pairs = {t: c}
            else:
                #NEG_DICT_VALUES(DICT_IN=pairs; DICT_OUT=new_pairs)
                new_pairs = dict([(t, -c) for t,c in pairs.iteritems()])
            #NEWINSTANCE(OBJ=_tmp46; HEAD=FACTORS; DATA=new_pairs)
            _tmp46 = new(cls)
            _tmp46.head = FACTORS
            _tmp46.data = new_pairs
            if other==1:
                return _tmp46
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp46: other})
            #NEWINSTANCE(OBJ=_tmp49; HEAD=TERMS; DATA={_tmp46: other})
            _tmp49 = new(cls)
            _tmp49.head = TERMS
            _tmp49.data = {_tmp46: other}
            return _tmp49
        else:
            #DIV_VALUE_SYMBOL(VALUE=other; RHS=self)
            _tmp51 = other
            if not _tmp51:
                return cls.zero
            #NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={self: -1})
            obj2 = new(cls)
            obj2.head = FACTORS
            obj2.data = {self: -1}
            if _tmp51==1:
                return obj2
            #RETURN_NEW(HEAD=TERMS; DATA={obj2: _tmp51})
            #NEWINSTANCE(OBJ=_tmp53; HEAD=TERMS; DATA={obj2: _tmp51})
            _tmp53 = new(cls)
            _tmp53.head = TERMS
            _tmp53.data = {obj2: _tmp51}
            return _tmp53
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other / self

def pow_method(self, other, z = None, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    type_other = type(other)
    if type_other is cls and other.head is NUMBER:
        other = other.data
        type_other = type(other)
    if type_other is int or type_other is long:
        if not other:
            return cls.one
        if other==1:
            return self
        if lhead is NUMBER:
            #POW_NUMBER_INT(VALUE=other; LHS=self)
            if other < 0:
                #RETURN_NEW(HEAD=NUMBER; DATA=div(1, (self.data)**(-other), cls))
                #NEWINSTANCE(OBJ=_tmp56; HEAD=NUMBER; DATA=div(1, (self.data)**(-other), cls))
                _tmp56 = new(cls)
                _tmp56.head = NUMBER
                _tmp56.data = div(1, (self.data)**(-other), cls)
                return _tmp56
            #RETURN_NEW(HEAD=NUMBER; DATA=(self.data)**(other))
            #NEWINSTANCE(OBJ=_tmp58; HEAD=NUMBER; DATA=(self.data)**(other))
            _tmp58 = new(cls)
            _tmp58.head = NUMBER
            _tmp58.data = (self.data)**(other)
            return _tmp58
        elif lhead is TERMS:
            #POW_TERMS_INT(VALUE=other; LHS=self)
            pairs = self.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                if other < 0:
                    c = div(1, c**(-other), cls)
                else:
                    c = c ** (other)
                t = t**(other)
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                #NEWINSTANCE(OBJ=_tmp61; HEAD=TERMS; DATA={t:c})
                _tmp61 = new(cls)
                _tmp61.head = TERMS
                _tmp61.data = {t:c}
                return _tmp61
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp63; HEAD=FACTORS; DATA={self: other})
            _tmp63 = new(cls)
            _tmp63.head = FACTORS
            _tmp63.data = {self: other}
            return _tmp63
        elif lhead is FACTORS:
            #POW_FACTORS_INT(VALUE=other; LHS=self)
            #MUL_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs; OP=other)
            pairs = dict([(t, c*other) for t,c in self.data.iteritems()])
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if c==1:
                    return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp67; HEAD=FACTORS; DATA=pairs)
            _tmp67 = new(cls)
            _tmp67.head = FACTORS
            _tmp67.data = pairs
            return _tmp67
        else:
            #POW_SYMBOL_INT(VALUE=other; LHS=self)
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp70; HEAD=FACTORS; DATA={self: other})
            _tmp70 = new(cls)
            _tmp70.head = FACTORS
            _tmp70.data = {self: other}
            return _tmp70
    if lhead is NUMBER and isinstance(other, cls.exptypes):
        #POW_NUMBER_VALUE(VALUE=other; LHS=self)
        z, sym = try_power(self.data, other)
        if not sym:
            #RETURN_NEW(HEAD=NUMBER; DATA=z)
            #NEWINSTANCE(OBJ=_tmp73; HEAD=NUMBER; DATA=z)
            _tmp73 = new(cls)
            _tmp73.head = NUMBER
            _tmp73.data = z
            return _tmp73
        factors = {}
        for t,c in sym:
            factors[cls.convert(t)] = c
        #NEWINSTANCE(OBJ=_tmp72; HEAD=FACTORS; DATA=factors)
        _tmp72 = new(cls)
        _tmp72.head = FACTORS
        _tmp72.data = factors
        if z==1:
            return _tmp72
        #RETURN_NEW(HEAD=TERMS; DATA={_tmp72: z})
        #NEWINSTANCE(OBJ=_tmp76; HEAD=TERMS; DATA={_tmp72: z})
        _tmp76 = new(cls)
        _tmp76.head = TERMS
        _tmp76.data = {_tmp72: z}
        return _tmp76
    if type_other is FractionTuple:
        if lhead is TERMS:
            #POW_TERMS_FRAC(VALUE=other; LHS=self)
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if isinstance(c, numbertypes) and not c==-1:
                    if c < 0:
                        z, sym = try_power(-c, other)
                        factors = {-t: other}
                    else:
                        z, sym = try_power(c, other)
                        factors = {t: other}
                    for t,c in sym:
                        factors[cls.convert(t)] = c
                    #NEWINSTANCE(OBJ=_tmp78; HEAD=FACTORS; DATA=factors)
                    _tmp78 = new(cls)
                    _tmp78.head = FACTORS
                    _tmp78.data = factors
                    if z==1:
                        return _tmp78
                    #RETURN_NEW(HEAD=TERMS; DATA={_tmp78: z})
                    #NEWINSTANCE(OBJ=_tmp80; HEAD=TERMS; DATA={_tmp78: z})
                    _tmp80 = new(cls)
                    _tmp80.head = TERMS
                    _tmp80.data = {_tmp78: z}
                    return _tmp80
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp82; HEAD=FACTORS; DATA={self: other})
            _tmp82 = new(cls)
            _tmp82.head = FACTORS
            _tmp82.data = {self: other}
            return _tmp82
        else:
            #POW_SYMBOL_FRAC(VALUE=other; LHS=self)
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp85; HEAD=FACTORS; DATA={self: other})
            _tmp85 = new(cls)
            _tmp85.head = FACTORS
            _tmp85.data = {self: other}
            return _tmp85
    if type_other is cls or isinstance(other, cls.exptypes):
        if lhead is FACTORS:
            #POW_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                tc = type(c)
                if tc is int or tc is long:
                    #RETURN_NEW(HEAD=FACTORS; DATA={t: other * c})
                    #NEWINSTANCE(OBJ=_tmp88; HEAD=FACTORS; DATA={t: other * c})
                    _tmp88 = new(cls)
                    _tmp88.head = FACTORS
                    _tmp88.data = {t: other * c}
                    return _tmp88
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp90; HEAD=FACTORS; DATA={self: other})
            _tmp90 = new(cls)
            _tmp90.head = FACTORS
            _tmp90.data = {self: other}
            return _tmp90
        #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
        #NEWINSTANCE(OBJ=_tmp92; HEAD=FACTORS; DATA={self: other})
        _tmp92 = new(cls)
        _tmp92.head = FACTORS
        _tmp92.data = {self: other}
        return _tmp92
    return NotImplemented

def add_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #ADD_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data + other)
                #NEWINSTANCE(OBJ=_tmp95; HEAD=NUMBER; DATA=self.data + other)
                _tmp95 = new(cls)
                _tmp95.head = NUMBER
                _tmp95.data = self.data + other
                return _tmp95
            elif lhead is TERMS:
                #ADD_TERMS_VALUE(VALUE=other; LHS=self)
                #ADD_VALUE_TERMS(VALUE=other; RHS=self)
                _tmp98 = other
                try:
                    if not _tmp98:
                        return self
                except RedirectOperation:
                    pass
                pairs = dict(self.data)
                one = cls.one
                #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp98)
                #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp98; DICT=pairs; DICT_GET=pairs.get)
                b = pairs.get(one)
                if b is None:
                    pairs[one] = _tmp98
                else:
                    c = b + _tmp98
                    try:
                        if c:
                            pairs[one] = c
                        else:
                            del pairs[one]
                    except RedirectOperation:
                        pairs[one] = c
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp101; HEAD=TERMS; DATA=pairs)
                _tmp101 = new(cls)
                _tmp101.head = TERMS
                _tmp101.data = pairs
                return _tmp101
            else:
                #ADD_SYMBOL_VALUE(VALUE=other; LHS=self)
                #ADD_VALUE_SYMBOL(VALUE=other; RHS=self)
                _tmp104 = other
                try:
                    if not _tmp104:
                        return self
                except RedirectOperation:
                    pass
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp104, self: 1})
                #NEWINSTANCE(OBJ=_tmp105; HEAD=TERMS; DATA={cls.one: _tmp104, self: 1})
                _tmp105 = new(cls)
                _tmp105.head = TERMS
                _tmp105.data = {cls.one: _tmp104, self: 1}
                return _tmp105
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #ADD_NUMBER_NUMBER(LHS=self; RHS=other)
            #ADD_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data + other.data)
            #NEWINSTANCE(OBJ=_tmp109; HEAD=NUMBER; DATA=self.data + other.data)
            _tmp109 = new(cls)
            _tmp109.head = NUMBER
            _tmp109.data = self.data + other.data
            return _tmp109
        elif rhead is TERMS:
            #ADD_NUMBER_TERMS(LHS=self; RHS=other)
            #ADD_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp112 = self.data
            try:
                if not _tmp112:
                    return other
            except RedirectOperation:
                pass
            pairs = dict(other.data)
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp112)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp112; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = _tmp112
            else:
                c = b + _tmp112
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp115; HEAD=TERMS; DATA=pairs)
            _tmp115 = new(cls)
            _tmp115.head = TERMS
            _tmp115.data = pairs
            return _tmp115
        else:
            #ADD_NUMBER_SYMBOL(LHS=self; RHS=other)
            #ADD_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp118 = self.data
            try:
                if not _tmp118:
                    return other
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp118, other: 1})
            #NEWINSTANCE(OBJ=_tmp119; HEAD=TERMS; DATA={cls.one: _tmp118, other: 1})
            _tmp119 = new(cls)
            _tmp119.head = TERMS
            _tmp119.data = {cls.one: _tmp118, other: 1}
            return _tmp119
    elif lhead is TERMS:
        if rhead is NUMBER:
            #ADD_TERMS_NUMBER(LHS=self; RHS=other)
            #ADD_TERMS_VALUE(VALUE=other.data; LHS=self)
            #ADD_VALUE_TERMS(VALUE=other.data; RHS=self)
            _tmp123 = other.data
            try:
                if not _tmp123:
                    return self
            except RedirectOperation:
                pass
            pairs = dict(self.data)
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp123)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp123; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = _tmp123
            else:
                c = b + _tmp123
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp126; HEAD=TERMS; DATA=pairs)
            _tmp126 = new(cls)
            _tmp126.head = TERMS
            _tmp126.data = pairs
            return _tmp126
        elif rhead is TERMS:
            #ADD_TERMS_TERMS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            for t,c in other.data.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=c; DICT=pairs; DICT_GET=pairs_get)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = c
                else:
                    c = b + c
                    try:
                        if c:
                            pairs[t] = c
                        else:
                            del pairs[t]
                    except RedirectOperation:
                        pairs[t] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp131; HEAD=TERMS; DATA=pairs)
            _tmp131 = new(cls)
            _tmp131.head = TERMS
            _tmp131.data = pairs
            return _tmp131
        else:
            #ADD_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[other] = c
                    else:
                        del pairs[other]
                except RedirectOperation:
                    pairs[other] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp136; HEAD=TERMS; DATA=pairs)
            _tmp136 = new(cls)
            _tmp136.head = TERMS
            _tmp136.data = pairs
            return _tmp136
    else:
        if rhead is NUMBER:
            #ADD_SYMBOL_NUMBER(LHS=self; RHS=other)
            #ADD_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #ADD_VALUE_SYMBOL(VALUE=other.data; RHS=self)
            _tmp140 = other.data
            try:
                if not _tmp140:
                    return self
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp140, self: 1})
            #NEWINSTANCE(OBJ=_tmp141; HEAD=TERMS; DATA={cls.one: _tmp140, self: 1})
            _tmp141 = new(cls)
            _tmp141.head = TERMS
            _tmp141.data = {cls.one: _tmp140, self: 1}
            return _tmp141
        elif rhead is TERMS:
            #ADD_SYMBOL_TERMS(LHS=self; RHS=other)
            #ADD_TERMS_SYMBOL(LHS=other; RHS=self)
            pairs = dict(other.data)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[self] = c
                    else:
                        del pairs[self]
                except RedirectOperation:
                    pairs[self] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp147; HEAD=TERMS; DATA=pairs)
            _tmp147 = new(cls)
            _tmp147.head = TERMS
            _tmp147.data = pairs
            return _tmp147
        else:
            #ADD_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp150; HEAD=TERMS; DATA=pairs)
            _tmp150 = new(cls)
            _tmp150.head = TERMS
            _tmp150.data = pairs
            return _tmp150

def sub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #SUB_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data - other)
                #NEWINSTANCE(OBJ=_tmp153; HEAD=NUMBER; DATA=self.data - other)
                _tmp153 = new(cls)
                _tmp153.head = NUMBER
                _tmp153.data = self.data - other
                return _tmp153
            elif lhead is TERMS:
                #SUB_TERMS_VALUE(VALUE=other; LHS=self)
                #ADD_VALUE_TERMS(VALUE=-other; RHS=self)
                _tmp156 = -other
                try:
                    if not _tmp156:
                        return self
                except RedirectOperation:
                    pass
                pairs = dict(self.data)
                one = cls.one
                #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp156)
                #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp156; DICT=pairs; DICT_GET=pairs.get)
                b = pairs.get(one)
                if b is None:
                    pairs[one] = _tmp156
                else:
                    c = b + _tmp156
                    try:
                        if c:
                            pairs[one] = c
                        else:
                            del pairs[one]
                    except RedirectOperation:
                        pairs[one] = c
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp159; HEAD=TERMS; DATA=pairs)
                _tmp159 = new(cls)
                _tmp159.head = TERMS
                _tmp159.data = pairs
                return _tmp159
            else:
                #SUB_SYMBOL_VALUE(VALUE=other; LHS=self)
                #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; VALUE=-other)
                #ADD_VALUE_SYMBOL(VALUE=-other; RHS=self)
                _tmp163 = -other
                try:
                    if not _tmp163:
                        return self
                except RedirectOperation:
                    pass
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp163, self: 1})
                #NEWINSTANCE(OBJ=_tmp164; HEAD=TERMS; DATA={cls.one: _tmp163, self: 1})
                _tmp164 = new(cls)
                _tmp164.head = TERMS
                _tmp164.data = {cls.one: _tmp163, self: 1}
                return _tmp164
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #SUB_NUMBER_NUMBER(LHS=self; RHS=other)
            #SUB_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data - other.data)
            #NEWINSTANCE(OBJ=_tmp168; HEAD=NUMBER; DATA=self.data - other.data)
            _tmp168 = new(cls)
            _tmp168.head = NUMBER
            _tmp168.data = self.data - other.data
            return _tmp168
        elif rhead is TERMS:
            #SUB_NUMBER_TERMS(LHS=self; RHS=other)
            #SUB_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp171 = self.data
            try:
                if not _tmp171:
                    #NEG_TERMS(OP=other)
                    op_pairs = other.data
                    if len(op_pairs)==1:
                        t, c = op_pairs.items()[0]
                        c = -c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                        #NEWINSTANCE(OBJ=_tmp173; HEAD=TERMS; DATA={t:c})
                        _tmp173 = new(cls)
                        _tmp173.head = TERMS
                        _tmp173.data = {t:c}
                        return _tmp173
                    #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
                    pairs = dict([(t, -c) for t,c in other.data.iteritems()])
                    #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                    #NEWINSTANCE(OBJ=_tmp176; HEAD=TERMS; DATA=pairs)
                    _tmp176 = new(cls)
                    _tmp176.head = TERMS
                    _tmp176.data = pairs
                    return _tmp176
            except RedirectOperation:
                pass
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp171)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp171; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = _tmp171
            else:
                c = b + _tmp171
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp181; HEAD=TERMS; DATA=pairs)
            _tmp181 = new(cls)
            _tmp181.head = TERMS
            _tmp181.data = pairs
            return _tmp181
        else:
            #SUB_NUMBER_SYMBOL(LHS=self; RHS=other)
            #SUB_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp184 = self.data
            try:
                if not _tmp184:
                    #RETURN_NEW(HEAD=TERMS; DATA={other: -1})
                    #NEWINSTANCE(OBJ=_tmp185; HEAD=TERMS; DATA={other: -1})
                    _tmp185 = new(cls)
                    _tmp185.head = TERMS
                    _tmp185.data = {other: -1}
                    return _tmp185
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp184, other: -1})
            #NEWINSTANCE(OBJ=_tmp187; HEAD=TERMS; DATA={cls.one: _tmp184, other: -1})
            _tmp187 = new(cls)
            _tmp187.head = TERMS
            _tmp187.data = {cls.one: _tmp184, other: -1}
            return _tmp187
    elif lhead is TERMS:
        if rhead is NUMBER:
            #SUB_TERMS_NUMBER(LHS=self; RHS=other)
            #SUB_TERMS_VALUE(VALUE=other.data; LHS=self)
            #ADD_VALUE_TERMS(VALUE=-other.data; RHS=self)
            _tmp191 = -other.data
            try:
                if not _tmp191:
                    return self
            except RedirectOperation:
                pass
            pairs = dict(self.data)
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp191)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp191; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = _tmp191
            else:
                c = b + _tmp191
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp194; HEAD=TERMS; DATA=pairs)
            _tmp194 = new(cls)
            _tmp194.head = TERMS
            _tmp194.data = pairs
            return _tmp194
        elif rhead is TERMS:
            #SUB_TERMS_TERMS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            for t,c in other.data.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=-c; DICT=pairs; DICT_GET=pairs_get)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = -c
                else:
                    c = b + -c
                    try:
                        if c:
                            pairs[t] = c
                        else:
                            del pairs[t]
                    except RedirectOperation:
                        pairs[t] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp199; HEAD=TERMS; DATA=pairs)
            _tmp199 = new(cls)
            _tmp199.head = TERMS
            _tmp199.data = pairs
            return _tmp199
        else:
            #SUB_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = -1
            else:
                c = b + -1
                try:
                    if c:
                        pairs[other] = c
                    else:
                        del pairs[other]
                except RedirectOperation:
                    pairs[other] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp204; HEAD=TERMS; DATA=pairs)
            _tmp204 = new(cls)
            _tmp204.head = TERMS
            _tmp204.data = pairs
            return _tmp204
    else:
        if rhead is NUMBER:
            #SUB_SYMBOL_NUMBER(LHS=self; RHS=other)
            #SUB_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; VALUE=-other.data)
            #ADD_VALUE_SYMBOL(VALUE=-other.data; RHS=self)
            _tmp209 = -other.data
            try:
                if not _tmp209:
                    return self
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp209, self: 1})
            #NEWINSTANCE(OBJ=_tmp210; HEAD=TERMS; DATA={cls.one: _tmp209, self: 1})
            _tmp210 = new(cls)
            _tmp210.head = TERMS
            _tmp210.data = {cls.one: _tmp209, self: 1}
            return _tmp210
        elif rhead is TERMS:
            #SUB_SYMBOL_TERMS(LHS=self; RHS=other)
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[self] = c
                    else:
                        del pairs[self]
                except RedirectOperation:
                    pairs[self] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp216; HEAD=TERMS; DATA=pairs)
            _tmp216 = new(cls)
            _tmp216.head = TERMS
            _tmp216.data = pairs
            return _tmp216
        else:
            #SUB_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                return cls.zero
            #RETURN_NEW(HEAD=TERMS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp219; HEAD=TERMS; DATA={self: 1, other: -1})
            _tmp219 = new(cls)
            _tmp219.head = TERMS
            _tmp219.data = {self: 1, other: -1}
            return _tmp219

def mul_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #MUL_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data * other)
                #NEWINSTANCE(OBJ=_tmp222; HEAD=NUMBER; DATA=self.data * other)
                _tmp222 = new(cls)
                _tmp222.head = NUMBER
                _tmp222.data = self.data * other
                return _tmp222
            elif lhead is TERMS:
                #MUL_TERMS_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_TERMS(VALUE=other; RHS=self)
                _tmp225 = other
                pairs = self.data
                #MUL_ZERO_OP(VALUE=_tmp225; OP=self)
                try:
                    if not _tmp225:
                        if self.has_active():
                            #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                            #NEWINSTANCE(OBJ=_tmp227; HEAD=TERMS; DATA={self: 0})
                            _tmp227 = new(cls)
                            _tmp227.head = TERMS
                            _tmp227.data = {self: 0}
                            return _tmp227
                        else:
                            return cls.zero
                except RedirectOperation:
                    pass
                    if len(pairs) > 1:
                        #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp225})
                        #NEWINSTANCE(OBJ=_tmp229; HEAD=TERMS; DATA={self: _tmp225})
                        _tmp229 = new(cls)
                        _tmp229.head = TERMS
                        _tmp229.data = {self: _tmp225}
                        return _tmp229
                if len(pairs)==1:
                    t, c = pairs.items()[0]
                    c = _tmp225 * c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp231; HEAD=TERMS; DATA={t: c})
                    _tmp231 = new(cls)
                    _tmp231.head = TERMS
                    _tmp231.data = {t: c}
                    return _tmp231
                if _tmp225==1:
                    return self
                pairs = {}
                for t,c in self.data.iteritems():
                    c = _tmp225 * c
                    try:
                        if c or t.has_active():
                            pairs[t] = c
                    except RedirectOperation:
                        pairs[t] = c
                #CANONIZE_TERMS_DICT(DICT=pairs)
                if not pairs:
                    return cls.zero
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return cls.convert(c)
                #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
                obj = new(cls)
                obj.head = TERMS
                obj.data = pairs
                coeff, terms = self._coeff_terms
                if terms is not None:
                    c = coeff * _tmp225
                    if not c==1:
                        obj._coeff_terms = (c, terms)
                else:
                    obj._coeff_terms = (_tmp225, self)
                return obj
            elif lhead is FACTORS:
                #MUL_FACTORS_VALUE(VALUE=other; LHS=self)
                #MUL_SYMBOL_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=other; RHS=self)
                _tmp237 = other
                #MUL_ZERO_OP(VALUE=_tmp237; OP=self)
                try:
                    if not _tmp237:
                        if self.has_active():
                            #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                            #NEWINSTANCE(OBJ=_tmp239; HEAD=TERMS; DATA={self: 0})
                            _tmp239 = new(cls)
                            _tmp239.head = TERMS
                            _tmp239.data = {self: 0}
                            return _tmp239
                        else:
                            return cls.zero
                except RedirectOperation:
                    pass
                if _tmp237==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp237})
                #NEWINSTANCE(OBJ=_tmp241; HEAD=TERMS; DATA={self: _tmp237})
                _tmp241 = new(cls)
                _tmp241.head = TERMS
                _tmp241.data = {self: _tmp237}
                return _tmp241
            else:
                #MUL_SYMBOL_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=other; RHS=self)
                _tmp244 = other
                #MUL_ZERO_OP(VALUE=_tmp244; OP=self)
                try:
                    if not _tmp244:
                        if self.has_active():
                            #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                            #NEWINSTANCE(OBJ=_tmp246; HEAD=TERMS; DATA={self: 0})
                            _tmp246 = new(cls)
                            _tmp246.head = TERMS
                            _tmp246.data = {self: 0}
                            return _tmp246
                        else:
                            return cls.zero
                except RedirectOperation:
                    pass
                if _tmp244==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp244})
                #NEWINSTANCE(OBJ=_tmp248; HEAD=TERMS; DATA={self: _tmp244})
                _tmp248 = new(cls)
                _tmp248.head = TERMS
                _tmp248.data = {self: _tmp244}
                return _tmp248
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #MUL_NUMBER_NUMBER(LHS=self; RHS=other)
            #MUL_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data * other.data)
            #NEWINSTANCE(OBJ=_tmp252; HEAD=NUMBER; DATA=self.data * other.data)
            _tmp252 = new(cls)
            _tmp252.head = NUMBER
            _tmp252.data = self.data * other.data
            return _tmp252
        elif rhead is TERMS:
            #MUL_NUMBER_TERMS(LHS=self; RHS=other)
            #MUL_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp255 = self.data
            pairs = other.data
            #MUL_ZERO_OP(VALUE=_tmp255; OP=other)
            try:
                if not _tmp255:
                    if other.has_active():
                        #RETURN_NEW(HEAD=TERMS; DATA={other: 0})
                        #NEWINSTANCE(OBJ=_tmp257; HEAD=TERMS; DATA={other: 0})
                        _tmp257 = new(cls)
                        _tmp257.head = TERMS
                        _tmp257.data = {other: 0}
                        return _tmp257
                    else:
                        return cls.zero
            except RedirectOperation:
                pass
                if len(pairs) > 1:
                    #RETURN_NEW(HEAD=TERMS; DATA={other: _tmp255})
                    #NEWINSTANCE(OBJ=_tmp259; HEAD=TERMS; DATA={other: _tmp255})
                    _tmp259 = new(cls)
                    _tmp259.head = TERMS
                    _tmp259.data = {other: _tmp255}
                    return _tmp259
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp255 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp261; HEAD=TERMS; DATA={t: c})
                _tmp261 = new(cls)
                _tmp261.head = TERMS
                _tmp261.data = {t: c}
                return _tmp261
            if _tmp255==1:
                return other
            pairs = {}
            for t,c in other.data.iteritems():
                c = _tmp255 * c
                try:
                    if c or t.has_active():
                        pairs[t] = c
                except RedirectOperation:
                    pairs[t] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            coeff, terms = other._coeff_terms
            if terms is not None:
                c = coeff * _tmp255
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp255, other)
            return obj
        elif rhead is FACTORS:
            #MUL_NUMBER_FACTORS(LHS=self; RHS=other)
            #MUL_SYMBOL_VALUE(VALUE=self.data; LHS=other)
            #MUL_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp267 = self.data
            #MUL_ZERO_OP(VALUE=_tmp267; OP=other)
            try:
                if not _tmp267:
                    if other.has_active():
                        #RETURN_NEW(HEAD=TERMS; DATA={other: 0})
                        #NEWINSTANCE(OBJ=_tmp269; HEAD=TERMS; DATA={other: 0})
                        _tmp269 = new(cls)
                        _tmp269.head = TERMS
                        _tmp269.data = {other: 0}
                        return _tmp269
                    else:
                        return cls.zero
            except RedirectOperation:
                pass
            if _tmp267==1:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={other: _tmp267})
            #NEWINSTANCE(OBJ=_tmp271; HEAD=TERMS; DATA={other: _tmp267})
            _tmp271 = new(cls)
            _tmp271.head = TERMS
            _tmp271.data = {other: _tmp267}
            return _tmp271
        else:
            #MUL_NUMBER_SYMBOL(LHS=self; RHS=other)
            #MUL_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp274 = self.data
            #MUL_ZERO_OP(VALUE=_tmp274; OP=other)
            try:
                if not _tmp274:
                    if other.has_active():
                        #RETURN_NEW(HEAD=TERMS; DATA={other: 0})
                        #NEWINSTANCE(OBJ=_tmp276; HEAD=TERMS; DATA={other: 0})
                        _tmp276 = new(cls)
                        _tmp276.head = TERMS
                        _tmp276.data = {other: 0}
                        return _tmp276
                    else:
                        return cls.zero
            except RedirectOperation:
                pass
            if _tmp274==1:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={other: _tmp274})
            #NEWINSTANCE(OBJ=_tmp278; HEAD=TERMS; DATA={other: _tmp274})
            _tmp278 = new(cls)
            _tmp278.head = TERMS
            _tmp278.data = {other: _tmp274}
            return _tmp278
    elif lhead is TERMS:
        if rhead is NUMBER:
            #MUL_TERMS_NUMBER(LHS=self; RHS=other)
            #MUL_TERMS_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_TERMS(VALUE=other.data; RHS=self)
            _tmp282 = other.data
            pairs = self.data
            #MUL_ZERO_OP(VALUE=_tmp282; OP=self)
            try:
                if not _tmp282:
                    if self.has_active():
                        #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                        #NEWINSTANCE(OBJ=_tmp284; HEAD=TERMS; DATA={self: 0})
                        _tmp284 = new(cls)
                        _tmp284.head = TERMS
                        _tmp284.data = {self: 0}
                        return _tmp284
                    else:
                        return cls.zero
            except RedirectOperation:
                pass
                if len(pairs) > 1:
                    #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp282})
                    #NEWINSTANCE(OBJ=_tmp286; HEAD=TERMS; DATA={self: _tmp282})
                    _tmp286 = new(cls)
                    _tmp286.head = TERMS
                    _tmp286.data = {self: _tmp282}
                    return _tmp286
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp282 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp288; HEAD=TERMS; DATA={t: c})
                _tmp288 = new(cls)
                _tmp288.head = TERMS
                _tmp288.data = {t: c}
                return _tmp288
            if _tmp282==1:
                return self
            pairs = {}
            for t,c in self.data.iteritems():
                c = _tmp282 * c
                try:
                    if c or t.has_active():
                        pairs[t] = c
                except RedirectOperation:
                    pairs[t] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            coeff, terms = self._coeff_terms
            if terms is not None:
                c = coeff * _tmp282
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp282, self)
            return obj
        elif rhead is TERMS:
            #MUL_TERMS_TERMS(LHS=self; RHS=other)
            lpairs = self.data
            rpairs = other.data
            if len(lpairs)==1:
                t1,c1 = lpairs.items()[0]
                if len(rpairs)==1:
                    t2,c2 = rpairs.items()[0]
                    t = t1 * t2
                    c = c1 * c2
                    if t == cls.one:
                        return cls.convert(c)
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp293; HEAD=TERMS; DATA={t: c})
                    _tmp293 = new(cls)
                    _tmp293.head = TERMS
                    _tmp293.data = {t: c}
                    return _tmp293
                coeff, terms = other._coeff_terms
                if terms is None:
                    return (t1 * other) * c1
                return (t1*terms) * (c1*coeff)
            elif len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                coeff, terms = other._coeff_terms
                if terms is None:
                    return (t1 * self) * c1
                return (t1*terms) * (c1*coeff)
            lcoeff, lterms = self._coeff_terms
            rcoeff, rterms = other._coeff_terms
            if lterms is None:
                lterms = self
            if rterms is None:
                rterms = other
            if lterms==rterms:
                #NEWINSTANCE(OBJ=_tmp292; HEAD=FACTORS; DATA={lterms: 2})
                _tmp292 = new(cls)
                _tmp292.head = FACTORS
                _tmp292.data = {lterms: 2}
            else:
                #NEWINSTANCE(OBJ=_tmp292; HEAD=FACTORS; DATA={lterms: 1, rterms: 1})
                _tmp292 = new(cls)
                _tmp292.head = FACTORS
                _tmp292.data = {lterms: 1, rterms: 1}
            c = lcoeff * rcoeff
            if c==1:
                return _tmp292
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp292: c})
            #NEWINSTANCE(OBJ=_tmp297; HEAD=TERMS; DATA={_tmp292: c})
            _tmp297 = new(cls)
            _tmp297.head = TERMS
            _tmp297.data = {_tmp292: c}
            return _tmp297
        elif rhead is FACTORS:
            #MUL_TERMS_FACTORS(LHS=self; RHS=other)
            #MUL_FACTORS_TERMS(LHS=other; RHS=self)
            rpairs = self.data
            if len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                t = t1 * other
                #RETURN_NEW(HEAD=TERMS; DATA={t: c1})
                #NEWINSTANCE(OBJ=_tmp301; HEAD=TERMS; DATA={t: c1})
                _tmp301 = new(cls)
                _tmp301.head = TERMS
                _tmp301.data = {t: c1}
                return _tmp301
            coeff, terms = self._coeff_terms
            if terms is None:
                #MUL_FACTORS_SYMBOL(LHS=other; RHS=self)
                pairs = dict(other.data)
                #MUL_DICT_SYMBOL(DICT=pairs; RHS=self)
                #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
                b = pairs.get(self)
                if b is None:
                    pairs[self] = 1
                else:
                    c = b + 1
                    try:
                        if c:
                            pairs[self] = c
                        else:
                            del pairs[self]
                    except RedirectOperation:
                        pairs[self] = c
                #CANONIZE_FACTORS_DICT1(DICT=pairs)
                if not pairs:
                    return cls.one
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return t
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp307; HEAD=FACTORS; DATA=pairs)
                _tmp307 = new(cls)
                _tmp307.head = FACTORS
                _tmp307.data = pairs
                return _tmp307
            return (other * terms) * coeff
        else:
            #MUL_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = self.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                t = t * other
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp310; HEAD=TERMS; DATA={t: c})
                _tmp310 = new(cls)
                _tmp310.head = TERMS
                _tmp310.data = {t: c}
                return _tmp310
            coeff, terms = self._coeff_terms
            if terms is not None:
                #NEWINSTANCE(OBJ=_tmp309; HEAD=FACTORS; DATA={terms:1, other:1})
                _tmp309 = new(cls)
                _tmp309.head = FACTORS
                _tmp309.data = {terms:1, other:1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp309:coeff})
                #NEWINSTANCE(OBJ=_tmp313; HEAD=TERMS; DATA={_tmp309:coeff})
                _tmp313 = new(cls)
                _tmp313.head = TERMS
                _tmp313.data = {_tmp309:coeff}
                return _tmp313
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: 1})
            #NEWINSTANCE(OBJ=_tmp315; HEAD=FACTORS; DATA={self: 1, other: 1})
            _tmp315 = new(cls)
            _tmp315.head = FACTORS
            _tmp315.data = {self: 1, other: 1}
            return _tmp315
    elif lhead is FACTORS:
        if rhead is NUMBER:
            #MUL_FACTORS_NUMBER(LHS=self; RHS=other)
            #MUL_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=other.data; RHS=self)
            _tmp319 = other.data
            #MUL_ZERO_OP(VALUE=_tmp319; OP=self)
            try:
                if not _tmp319:
                    if self.has_active():
                        #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                        #NEWINSTANCE(OBJ=_tmp321; HEAD=TERMS; DATA={self: 0})
                        _tmp321 = new(cls)
                        _tmp321.head = TERMS
                        _tmp321.data = {self: 0}
                        return _tmp321
                    else:
                        return cls.zero
            except RedirectOperation:
                pass
            if _tmp319==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp319})
            #NEWINSTANCE(OBJ=_tmp323; HEAD=TERMS; DATA={self: _tmp319})
            _tmp323 = new(cls)
            _tmp323.head = TERMS
            _tmp323.data = {self: _tmp319}
            return _tmp323
        elif rhead is TERMS:
            #MUL_FACTORS_TERMS(LHS=self; RHS=other)
            rpairs = other.data
            if len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                t = t1 * self
                #RETURN_NEW(HEAD=TERMS; DATA={t: c1})
                #NEWINSTANCE(OBJ=_tmp326; HEAD=TERMS; DATA={t: c1})
                _tmp326 = new(cls)
                _tmp326.head = TERMS
                _tmp326.data = {t: c1}
                return _tmp326
            coeff, terms = other._coeff_terms
            if terms is None:
                #MUL_FACTORS_SYMBOL(LHS=self; RHS=other)
                pairs = dict(self.data)
                #MUL_DICT_SYMBOL(DICT=pairs; RHS=other)
                #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
                b = pairs.get(other)
                if b is None:
                    pairs[other] = 1
                else:
                    c = b + 1
                    try:
                        if c:
                            pairs[other] = c
                        else:
                            del pairs[other]
                    except RedirectOperation:
                        pairs[other] = c
                #CANONIZE_FACTORS_DICT1(DICT=pairs)
                if not pairs:
                    return cls.one
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return t
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp332; HEAD=FACTORS; DATA=pairs)
                _tmp332 = new(cls)
                _tmp332.head = FACTORS
                _tmp332.data = pairs
                return _tmp332
            return (self * terms) * coeff
        elif rhead is FACTORS:
            #MUL_FACTORS_FACTORS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            number = 1
            for t,c in other.data.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=+; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = + c
                else:
                    _tmp335 = b + c
                    if type(_tmp335) is cls and _tmp335.head is NUMBER:
                        _tmp335 = _tmp335.data
                    try:
                        if _tmp335:
                            if t.head is NUMBER:
                                r = t ** _tmp335
                                if r.head is NUMBER:
                                    number *= r
                                    del pairs[t]
                                else:
                                    pairs[t] = _tmp335
                            else:
                                pairs[t] = _tmp335
                        else:
                            del pairs[t]
                    except RedirectOperation:
                        pairs[t] = _tmp335
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t * number
               if t==cls.one:
                   return number
            if number is 1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp337; HEAD=FACTORS; DATA=pairs)
                _tmp337 = new(cls)
                _tmp337.head = FACTORS
                _tmp337.data = pairs
                return _tmp337
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = new(cls)
            obj.head = FACTORS
            obj.data = pairs
            return obj * number
        else:
            #MUL_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=other)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[other] = c
                    else:
                        del pairs[other]
                except RedirectOperation:
                    pairs[other] = c
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp344; HEAD=FACTORS; DATA=pairs)
            _tmp344 = new(cls)
            _tmp344.head = FACTORS
            _tmp344.data = pairs
            return _tmp344
    else:
        if rhead is NUMBER:
            #MUL_SYMBOL_NUMBER(LHS=self; RHS=other)
            #MUL_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=other.data; RHS=self)
            _tmp348 = other.data
            #MUL_ZERO_OP(VALUE=_tmp348; OP=self)
            try:
                if not _tmp348:
                    if self.has_active():
                        #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                        #NEWINSTANCE(OBJ=_tmp350; HEAD=TERMS; DATA={self: 0})
                        _tmp350 = new(cls)
                        _tmp350.head = TERMS
                        _tmp350.data = {self: 0}
                        return _tmp350
                    else:
                        return cls.zero
            except RedirectOperation:
                pass
            if _tmp348==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp348})
            #NEWINSTANCE(OBJ=_tmp352; HEAD=TERMS; DATA={self: _tmp348})
            _tmp352 = new(cls)
            _tmp352.head = TERMS
            _tmp352.data = {self: _tmp348}
            return _tmp352
        elif rhead is TERMS:
            #MUL_SYMBOL_TERMS(LHS=self; RHS=other)
            #MUL_TERMS_SYMBOL(LHS=other; RHS=self)
            pairs = other.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                t = t * self
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp356; HEAD=TERMS; DATA={t: c})
                _tmp356 = new(cls)
                _tmp356.head = TERMS
                _tmp356.data = {t: c}
                return _tmp356
            coeff, terms = other._coeff_terms
            if terms is not None:
                #NEWINSTANCE(OBJ=_tmp355; HEAD=FACTORS; DATA={terms:1, self:1})
                _tmp355 = new(cls)
                _tmp355.head = FACTORS
                _tmp355.data = {terms:1, self:1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp355:coeff})
                #NEWINSTANCE(OBJ=_tmp359; HEAD=TERMS; DATA={_tmp355:coeff})
                _tmp359 = new(cls)
                _tmp359.head = TERMS
                _tmp359.data = {_tmp355:coeff}
                return _tmp359
            #RETURN_NEW(HEAD=FACTORS; DATA={other: 1, self: 1})
            #NEWINSTANCE(OBJ=_tmp361; HEAD=FACTORS; DATA={other: 1, self: 1})
            _tmp361 = new(cls)
            _tmp361.head = FACTORS
            _tmp361.data = {other: 1, self: 1}
            return _tmp361
        elif rhead is FACTORS:
            #MUL_SYMBOL_FACTORS(LHS=self; RHS=other)
            #MUL_FACTORS_SYMBOL(LHS=other; RHS=self)
            pairs = dict(other.data)
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[self] = c
                    else:
                        del pairs[self]
                except RedirectOperation:
                    pairs[self] = c
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp368; HEAD=FACTORS; DATA=pairs)
            _tmp368 = new(cls)
            _tmp368.head = FACTORS
            _tmp368.data = pairs
            return _tmp368
        else:
            #MUL_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp371; HEAD=FACTORS; DATA=pairs)
            _tmp371 = new(cls)
            _tmp371.head = FACTORS
            _tmp371.data = pairs
            return _tmp371

def div_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #DIV_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=div(self.data, other, cls))
                #NEWINSTANCE(OBJ=_tmp374; HEAD=NUMBER; DATA=div(self.data, other, cls))
                _tmp374 = new(cls)
                _tmp374.head = NUMBER
                _tmp374.data = div(self.data, other, cls)
                return _tmp374
            elif lhead is TERMS:
                #DIV_TERMS_VALUE(VALUE=other; LHS=self)
                #MUL_TERMS_VALUE(LHS=self; VALUE=div(1,other,cls))
                #MUL_VALUE_TERMS(VALUE=div(1,other,cls); RHS=self)
                _tmp378 = div(1,other,cls)
                pairs = self.data
                #MUL_ZERO_OP(VALUE=_tmp378; OP=self)
                try:
                    if not _tmp378:
                        if self.has_active():
                            #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                            #NEWINSTANCE(OBJ=_tmp380; HEAD=TERMS; DATA={self: 0})
                            _tmp380 = new(cls)
                            _tmp380.head = TERMS
                            _tmp380.data = {self: 0}
                            return _tmp380
                        else:
                            return cls.zero
                except RedirectOperation:
                    pass
                    if len(pairs) > 1:
                        #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp378})
                        #NEWINSTANCE(OBJ=_tmp382; HEAD=TERMS; DATA={self: _tmp378})
                        _tmp382 = new(cls)
                        _tmp382.head = TERMS
                        _tmp382.data = {self: _tmp378}
                        return _tmp382
                if len(pairs)==1:
                    t, c = pairs.items()[0]
                    c = _tmp378 * c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp384; HEAD=TERMS; DATA={t: c})
                    _tmp384 = new(cls)
                    _tmp384.head = TERMS
                    _tmp384.data = {t: c}
                    return _tmp384
                if _tmp378==1:
                    return self
                pairs = {}
                for t,c in self.data.iteritems():
                    c = _tmp378 * c
                    try:
                        if c or t.has_active():
                            pairs[t] = c
                    except RedirectOperation:
                        pairs[t] = c
                #CANONIZE_TERMS_DICT(DICT=pairs)
                if not pairs:
                    return cls.zero
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return cls.convert(c)
                #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
                obj = new(cls)
                obj.head = TERMS
                obj.data = pairs
                coeff, terms = self._coeff_terms
                if terms is not None:
                    c = coeff * _tmp378
                    if not c==1:
                        obj._coeff_terms = (c, terms)
                else:
                    obj._coeff_terms = (_tmp378, self)
                return obj
            elif lhead is FACTORS:
                #DIV_FACTORS_VALUE(VALUE=other; LHS=self)
                #MUL_FACTORS_VALUE(LHS=self; VALUE=div(1,other,cls))
                #MUL_SYMBOL_VALUE(VALUE=div(1,other,cls); LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=div(1,other,cls); RHS=self)
                _tmp391 = div(1,other,cls)
                #MUL_ZERO_OP(VALUE=_tmp391; OP=self)
                try:
                    if not _tmp391:
                        if self.has_active():
                            #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                            #NEWINSTANCE(OBJ=_tmp393; HEAD=TERMS; DATA={self: 0})
                            _tmp393 = new(cls)
                            _tmp393.head = TERMS
                            _tmp393.data = {self: 0}
                            return _tmp393
                        else:
                            return cls.zero
                except RedirectOperation:
                    pass
                if _tmp391==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp391})
                #NEWINSTANCE(OBJ=_tmp395; HEAD=TERMS; DATA={self: _tmp391})
                _tmp395 = new(cls)
                _tmp395.head = TERMS
                _tmp395.data = {self: _tmp391}
                return _tmp395
            else:
                #DIV_SYMBOL_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=div(1, other, cls); RHS=self)
                _tmp398 = div(1, other, cls)
                #MUL_ZERO_OP(VALUE=_tmp398; OP=self)
                try:
                    if not _tmp398:
                        if self.has_active():
                            #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                            #NEWINSTANCE(OBJ=_tmp400; HEAD=TERMS; DATA={self: 0})
                            _tmp400 = new(cls)
                            _tmp400.head = TERMS
                            _tmp400.data = {self: 0}
                            return _tmp400
                        else:
                            return cls.zero
                except RedirectOperation:
                    pass
                if _tmp398==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp398})
                #NEWINSTANCE(OBJ=_tmp402; HEAD=TERMS; DATA={self: _tmp398})
                _tmp402 = new(cls)
                _tmp402.head = TERMS
                _tmp402.data = {self: _tmp398}
                return _tmp402
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #DIV_NUMBER_NUMBER(LHS=self; RHS=other)
            #DIV_VALUE_NUMBER(VALUE=self.data; RHS=other)
            rhs = other.data
            if not rhs:
                return self.data * cls.zoo
            #RETURN_NEW(HEAD=NUMBER; DATA=div(self.data, rhs, cls))
            #NEWINSTANCE(OBJ=_tmp406; HEAD=NUMBER; DATA=div(self.data, rhs, cls))
            _tmp406 = new(cls)
            _tmp406.head = NUMBER
            _tmp406.data = div(self.data, rhs, cls)
            return _tmp406
        elif rhead is TERMS:
            #DIV_NUMBER_TERMS(LHS=self; RHS=other)
            #DIV_VALUE_TERMS(VALUE=self.data; RHS=other)
            #MUL_ZERO_OP(VALUE=self.data; OP=other)
            try:
                if not self.data:
                    if other.has_active():
                        #RETURN_NEW(HEAD=TERMS; DATA={other: 0})
                        #NEWINSTANCE(OBJ=_tmp411; HEAD=TERMS; DATA={other: 0})
                        _tmp411 = new(cls)
                        _tmp411.head = TERMS
                        _tmp411.data = {other: 0}
                        return _tmp411
                    else:
                        return cls.zero
            except RedirectOperation:
                pass
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = div(self.data, c, cls)
                t = 1/t
                if c==1:
                    return t
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp413; HEAD=TERMS; DATA={t: c})
                _tmp413 = new(cls)
                _tmp413.head = TERMS
                _tmp413.data = {t: c}
                return _tmp413
            #NEWINSTANCE(OBJ=_tmp409; HEAD=FACTORS; DATA={other: -1})
            _tmp409 = new(cls)
            _tmp409.head = FACTORS
            _tmp409.data = {other: -1}
            if self.data==1:
                return _tmp409
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp409: self.data})
            #NEWINSTANCE(OBJ=_tmp416; HEAD=TERMS; DATA={_tmp409: self.data})
            _tmp416 = new(cls)
            _tmp416.head = TERMS
            _tmp416.data = {_tmp409: self.data}
            return _tmp416
        elif rhead is FACTORS:
            #DIV_NUMBER_FACTORS(LHS=self; RHS=other)
            #DIV_VALUE_FACTORS(VALUE=self.data; RHS=other)
            
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = -c
                if c==1:
                    return t * self.data
                new_pairs = {t: c}
            else:
                #NEG_DICT_VALUES(DICT_IN=pairs; DICT_OUT=new_pairs)
                new_pairs = dict([(t, -c) for t,c in pairs.iteritems()])
            #NEWINSTANCE(OBJ=_tmp419; HEAD=FACTORS; DATA=new_pairs)
            _tmp419 = new(cls)
            _tmp419.head = FACTORS
            _tmp419.data = new_pairs
            if self.data==1:
                return _tmp419
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp419: self.data})
            #NEWINSTANCE(OBJ=_tmp422; HEAD=TERMS; DATA={_tmp419: self.data})
            _tmp422 = new(cls)
            _tmp422.head = TERMS
            _tmp422.data = {_tmp419: self.data}
            return _tmp422
        else:
            #DIV_NUMBER_SYMBOL(LHS=self; RHS=other)
            #DIV_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp425 = self.data
            if not _tmp425:
                return cls.zero
            #NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={other: -1})
            obj2 = new(cls)
            obj2.head = FACTORS
            obj2.data = {other: -1}
            if _tmp425==1:
                return obj2
            #RETURN_NEW(HEAD=TERMS; DATA={obj2: _tmp425})
            #NEWINSTANCE(OBJ=_tmp427; HEAD=TERMS; DATA={obj2: _tmp425})
            _tmp427 = new(cls)
            _tmp427.head = TERMS
            _tmp427.data = {obj2: _tmp425}
            return _tmp427
    elif lhead is TERMS:
        if rhead is NUMBER:
            #DIV_TERMS_NUMBER(LHS=self; RHS=other)
            #DIV_TERMS_VALUE(VALUE=other.data; LHS=self)
            #MUL_TERMS_VALUE(LHS=self; VALUE=div(1,other.data,cls))
            #MUL_VALUE_TERMS(VALUE=div(1,other.data,cls); RHS=self)
            _tmp432 = div(1,other.data,cls)
            pairs = self.data
            #MUL_ZERO_OP(VALUE=_tmp432; OP=self)
            try:
                if not _tmp432:
                    if self.has_active():
                        #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                        #NEWINSTANCE(OBJ=_tmp434; HEAD=TERMS; DATA={self: 0})
                        _tmp434 = new(cls)
                        _tmp434.head = TERMS
                        _tmp434.data = {self: 0}
                        return _tmp434
                    else:
                        return cls.zero
            except RedirectOperation:
                pass
                if len(pairs) > 1:
                    #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp432})
                    #NEWINSTANCE(OBJ=_tmp436; HEAD=TERMS; DATA={self: _tmp432})
                    _tmp436 = new(cls)
                    _tmp436.head = TERMS
                    _tmp436.data = {self: _tmp432}
                    return _tmp436
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp432 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp438; HEAD=TERMS; DATA={t: c})
                _tmp438 = new(cls)
                _tmp438.head = TERMS
                _tmp438.data = {t: c}
                return _tmp438
            if _tmp432==1:
                return self
            pairs = {}
            for t,c in self.data.iteritems():
                c = _tmp432 * c
                try:
                    if c or t.has_active():
                        pairs[t] = c
                except RedirectOperation:
                    pairs[t] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            coeff, terms = self._coeff_terms
            if terms is not None:
                c = coeff * _tmp432
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp432, self)
            return obj
        elif rhead is TERMS:
            #DIV_TERMS_TERMS(LHS=self; RHS=other)
            
            if self==other:
                return cls.one
            lpairs = self.data
            rpairs = other.data
            if len(lpairs)==1:
                t1, c1 = lpairs.items()[0]
                if len(rpairs)==1:
                    t2, c2 = rpairs.items()[0]
                    c = div(c1, c2, cls)
                    if t2==t1:
                        return cls.convert(c)
                    if c==1:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t1:1, t2:-1})
                        #NEWINSTANCE(OBJ=_tmp443; HEAD=FACTORS; DATA={t1:1, t2:-1})
                        _tmp443 = new(cls)
                        _tmp443.head = FACTORS
                        _tmp443.data = {t1:1, t2:-1}
                        return _tmp443
                    #NEWINSTANCE(OBJ=_tmp442; HEAD=FACTORS; DATA={t1:1, t2:-1})
                    _tmp442 = new(cls)
                    _tmp442.head = FACTORS
                    _tmp442.data = {t1:1, t2:-1}
                else:
                    #NEWINSTANCE(OBJ=_tmp442; HEAD=FACTORS; DATA={t1:1, other:-1})
                    _tmp442 = new(cls)
                    _tmp442.head = FACTORS
                    _tmp442.data = {t1:1, other:-1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp442:c1})
                #NEWINSTANCE(OBJ=_tmp447; HEAD=TERMS; DATA={_tmp442:c1})
                _tmp447 = new(cls)
                _tmp447.head = TERMS
                _tmp447.data = {_tmp442:c1}
                return _tmp447
            elif len(rpairs)==1:
                t2, c2 = rpairs.items()[0]
                c = div(1, c2, cls)
                if t2==self:
                    return cls.convert(c)
                _tmp442 = self / t2
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp442:c})
                #NEWINSTANCE(OBJ=_tmp449; HEAD=TERMS; DATA={_tmp442:c})
                _tmp449 = new(cls)
                _tmp449.head = TERMS
                _tmp449.data = {_tmp442:c}
                return _tmp449
            #RETURN_NEW(HEAD=FACTORS; DATA={self:1, other:-1})
            #NEWINSTANCE(OBJ=_tmp451; HEAD=FACTORS; DATA={self:1, other:-1})
            _tmp451 = new(cls)
            _tmp451.head = FACTORS
            _tmp451.data = {self:1, other:-1}
            return _tmp451
        elif rhead is FACTORS:
            #DIV_TERMS_FACTORS(LHS=self; RHS=other)
            lpairs = self.data
            if len(lpairs)==1:
                t, c = lpairs.items()[0]
                t = t / other
                if t==cls.one:
                    return cls.convert(c)
                head = t.head
                if head is NUMBER:
                    #RETURN_NEW(HEAD=NUMBER; DATA=t.data * c)
                    #NEWINSTANCE(OBJ=_tmp454; HEAD=NUMBER; DATA=t.data * c)
                    _tmp454 = new(cls)
                    _tmp454.head = NUMBER
                    _tmp454.data = t.data * c
                    return _tmp454
                elif head is TERMS:
                    #MUL_TERMS_VALUE(LHS=t; VALUE=c)
                    #MUL_VALUE_TERMS(VALUE=c; RHS=t)
                    _tmp457 = c
                    pairs = t.data
                    #MUL_ZERO_OP(VALUE=_tmp457; OP=t)
                    try:
                        if not _tmp457:
                            if t.has_active():
                                #RETURN_NEW(HEAD=TERMS; DATA={t: 0})
                                #NEWINSTANCE(OBJ=_tmp459; HEAD=TERMS; DATA={t: 0})
                                _tmp459 = new(cls)
                                _tmp459.head = TERMS
                                _tmp459.data = {t: 0}
                                return _tmp459
                            else:
                                return cls.zero
                    except RedirectOperation:
                        pass
                        if len(pairs) > 1:
                            #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp457})
                            #NEWINSTANCE(OBJ=_tmp461; HEAD=TERMS; DATA={t: _tmp457})
                            _tmp461 = new(cls)
                            _tmp461.head = TERMS
                            _tmp461.data = {t: _tmp457}
                            return _tmp461
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp457 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp463; HEAD=TERMS; DATA={t: c})
                        _tmp463 = new(cls)
                        _tmp463.head = TERMS
                        _tmp463.data = {t: c}
                        return _tmp463
                    if _tmp457==1:
                        return t
                    pairs = {}
                    for t,c in t.data.iteritems():
                        c = _tmp457 * c
                        try:
                            if c or t.has_active():
                                pairs[t] = c
                        except RedirectOperation:
                            pairs[t] = c
                    #CANONIZE_TERMS_DICT(DICT=pairs)
                    if not pairs:
                        return cls.zero
                    if len(pairs)==1:
                       t, c = pairs.items()[0]
                       if c==1:
                           return t
                       if t==cls.one:
                           return cls.convert(c)
                    #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = pairs
                    coeff, terms = t._coeff_terms
                    if terms is not None:
                        c = coeff * _tmp457
                        if not c==1:
                            obj._coeff_terms = (c, terms)
                    else:
                        obj._coeff_terms = (_tmp457, t)
                    return obj
                else:
                    #MUL_SYMBOL_VALUE(LHS=t; VALUE=c)
                    #MUL_VALUE_SYMBOL(VALUE=c; RHS=t)
                    _tmp468 = c
                    #MUL_ZERO_OP(VALUE=_tmp468; OP=t)
                    try:
                        if not _tmp468:
                            if t.has_active():
                                #RETURN_NEW(HEAD=TERMS; DATA={t: 0})
                                #NEWINSTANCE(OBJ=_tmp470; HEAD=TERMS; DATA={t: 0})
                                _tmp470 = new(cls)
                                _tmp470.head = TERMS
                                _tmp470.data = {t: 0}
                                return _tmp470
                            else:
                                return cls.zero
                    except RedirectOperation:
                        pass
                    if _tmp468==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp468})
                    #NEWINSTANCE(OBJ=_tmp472; HEAD=TERMS; DATA={t: _tmp468})
                    _tmp472 = new(cls)
                    _tmp472.head = TERMS
                    _tmp472.data = {t: _tmp468}
                    return _tmp472
            #DIV_SYMBOL_FACTORS(LHS=self; RHS=other)
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==self:
                    c = 1 - c
                    try:
                        if not c:
                            return cls.one
                    except RedirectOperation:
                        pass
                    if c==1:
                        return t
                    else:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp475; HEAD=FACTORS; DATA={t: c})
                        _tmp475 = new(cls)
                        _tmp475.head = FACTORS
                        _tmp475.data = {t: c}
                        return _tmp475
                #RETURN_NEW(HEAD=FACTORS; DATA={t: -c, self: 1})
                #NEWINSTANCE(OBJ=_tmp477; HEAD=FACTORS; DATA={t: -c, self: 1})
                _tmp477 = new(cls)
                _tmp477.head = FACTORS
                _tmp477.data = {t: -c, self: 1}
                return _tmp477
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[self] = c
                    else:
                        del pairs[self]
                except RedirectOperation:
                    pairs[self] = c
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp483; HEAD=FACTORS; DATA=pairs)
            _tmp483 = new(cls)
            _tmp483.head = FACTORS
            _tmp483.data = pairs
            return _tmp483
        else:
            #DIV_TERMS_SYMBOL(LHS=self; RHS=other)
            
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==other:
                    return cls.convert(c)
                #NEWINSTANCE(OBJ=_tmp485; HEAD=FACTORS; DATA={t:1, other: -1})
                _tmp485 = new(cls)
                _tmp485.head = FACTORS
                _tmp485.data = {t:1, other: -1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp485: c})
                #NEWINSTANCE(OBJ=_tmp487; HEAD=TERMS; DATA={_tmp485: c})
                _tmp487 = new(cls)
                _tmp487.head = TERMS
                _tmp487.data = {_tmp485: c}
                return _tmp487
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp489; HEAD=FACTORS; DATA={self: 1, other: -1})
            _tmp489 = new(cls)
            _tmp489.head = FACTORS
            _tmp489.data = {self: 1, other: -1}
            return _tmp489
    elif lhead is FACTORS:
        if rhead is NUMBER:
            #DIV_FACTORS_NUMBER(LHS=self; RHS=other)
            #DIV_FACTORS_VALUE(VALUE=other.data; LHS=self)
            #MUL_FACTORS_VALUE(LHS=self; VALUE=div(1,other.data,cls))
            #MUL_SYMBOL_VALUE(VALUE=div(1,other.data,cls); LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=div(1,other.data,cls); RHS=self)
            _tmp495 = div(1,other.data,cls)
            #MUL_ZERO_OP(VALUE=_tmp495; OP=self)
            try:
                if not _tmp495:
                    if self.has_active():
                        #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                        #NEWINSTANCE(OBJ=_tmp497; HEAD=TERMS; DATA={self: 0})
                        _tmp497 = new(cls)
                        _tmp497.head = TERMS
                        _tmp497.data = {self: 0}
                        return _tmp497
                    else:
                        return cls.zero
            except RedirectOperation:
                pass
            if _tmp495==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp495})
            #NEWINSTANCE(OBJ=_tmp499; HEAD=TERMS; DATA={self: _tmp495})
            _tmp499 = new(cls)
            _tmp499.head = TERMS
            _tmp499.data = {self: _tmp495}
            return _tmp499
        elif rhead is TERMS:
            #DIV_FACTORS_TERMS(LHS=self; RHS=other)
            rpairs = other.data
            if len(rpairs)==1:
                t, c = rpairs.items()[0]
                t = self / t
                c = div(1, c, cls)
                if t==cls.one:
                    return cls.convert(c)
                head = t.head
                if head is NUMBER:
                    #RETURN_NEW(HEAD=NUMBER; DATA=t.data * c)
                    #NEWINSTANCE(OBJ=_tmp502; HEAD=NUMBER; DATA=t.data * c)
                    _tmp502 = new(cls)
                    _tmp502.head = NUMBER
                    _tmp502.data = t.data * c
                    return _tmp502
                elif head is TERMS:
                    #MUL_TERMS_VALUE(LHS=t; VALUE=c)
                    #MUL_VALUE_TERMS(VALUE=c; RHS=t)
                    _tmp505 = c
                    pairs = t.data
                    #MUL_ZERO_OP(VALUE=_tmp505; OP=t)
                    try:
                        if not _tmp505:
                            if t.has_active():
                                #RETURN_NEW(HEAD=TERMS; DATA={t: 0})
                                #NEWINSTANCE(OBJ=_tmp507; HEAD=TERMS; DATA={t: 0})
                                _tmp507 = new(cls)
                                _tmp507.head = TERMS
                                _tmp507.data = {t: 0}
                                return _tmp507
                            else:
                                return cls.zero
                    except RedirectOperation:
                        pass
                        if len(pairs) > 1:
                            #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp505})
                            #NEWINSTANCE(OBJ=_tmp509; HEAD=TERMS; DATA={t: _tmp505})
                            _tmp509 = new(cls)
                            _tmp509.head = TERMS
                            _tmp509.data = {t: _tmp505}
                            return _tmp509
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp505 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp511; HEAD=TERMS; DATA={t: c})
                        _tmp511 = new(cls)
                        _tmp511.head = TERMS
                        _tmp511.data = {t: c}
                        return _tmp511
                    if _tmp505==1:
                        return t
                    pairs = {}
                    for t,c in t.data.iteritems():
                        c = _tmp505 * c
                        try:
                            if c or t.has_active():
                                pairs[t] = c
                        except RedirectOperation:
                            pairs[t] = c
                    #CANONIZE_TERMS_DICT(DICT=pairs)
                    if not pairs:
                        return cls.zero
                    if len(pairs)==1:
                       t, c = pairs.items()[0]
                       if c==1:
                           return t
                       if t==cls.one:
                           return cls.convert(c)
                    #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = pairs
                    coeff, terms = t._coeff_terms
                    if terms is not None:
                        c = coeff * _tmp505
                        if not c==1:
                            obj._coeff_terms = (c, terms)
                    else:
                        obj._coeff_terms = (_tmp505, t)
                    return obj
                else:
                    #MUL_SYMBOL_VALUE(LHS=t; VALUE=c)
                    #MUL_VALUE_SYMBOL(VALUE=c; RHS=t)
                    _tmp516 = c
                    #MUL_ZERO_OP(VALUE=_tmp516; OP=t)
                    try:
                        if not _tmp516:
                            if t.has_active():
                                #RETURN_NEW(HEAD=TERMS; DATA={t: 0})
                                #NEWINSTANCE(OBJ=_tmp518; HEAD=TERMS; DATA={t: 0})
                                _tmp518 = new(cls)
                                _tmp518.head = TERMS
                                _tmp518.data = {t: 0}
                                return _tmp518
                            else:
                                return cls.zero
                    except RedirectOperation:
                        pass
                    if _tmp516==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp516})
                    #NEWINSTANCE(OBJ=_tmp520; HEAD=TERMS; DATA={t: _tmp516})
                    _tmp520 = new(cls)
                    _tmp520.head = TERMS
                    _tmp520.data = {t: _tmp516}
                    return _tmp520
            #DIV_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #DIV_DICT_SYMBOL(RHS=other; DICT=pairs)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = -1
            else:
                c = b + -1
                try:
                    if c:
                        pairs[other] = c
                    else:
                        del pairs[other]
                except RedirectOperation:
                    pairs[other] = c
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp526; HEAD=FACTORS; DATA=pairs)
            _tmp526 = new(cls)
            _tmp526.head = FACTORS
            _tmp526.data = pairs
            return _tmp526
        elif rhead is FACTORS:
            #DIV_FACTORS_FACTORS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            number = 1
            for t,c in other.data.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=-; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = - c
                else:
                    _tmp529 = b - c
                    if type(_tmp529) is cls and _tmp529.head is NUMBER:
                        _tmp529 = _tmp529.data
                    try:
                        if _tmp529:
                            if t.head is NUMBER:
                                r = t ** _tmp529
                                if r.head is NUMBER:
                                    number *= r
                                    del pairs[t]
                                else:
                                    pairs[t] = _tmp529
                            else:
                                pairs[t] = _tmp529
                        else:
                            del pairs[t]
                    except RedirectOperation:
                        pairs[t] = _tmp529
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t * number
               if t==cls.one:
                   return number
            if number==1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp531; HEAD=FACTORS; DATA=pairs)
                _tmp531 = new(cls)
                _tmp531.head = FACTORS
                _tmp531.data = pairs
                return _tmp531
            #NEWINSTANCE(OBJ=_tmp528; HEAD=FACTORS; DATA=pairs)
            _tmp528 = new(cls)
            _tmp528.head = FACTORS
            _tmp528.data = pairs
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp528: number})
            #NEWINSTANCE(OBJ=_tmp534; HEAD=TERMS; DATA={_tmp528: number})
            _tmp534 = new(cls)
            _tmp534.head = TERMS
            _tmp534.data = {_tmp528: number}
            return _tmp534
        else:
            #DIV_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #DIV_DICT_SYMBOL(RHS=other; DICT=pairs)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = -1
            else:
                c = b + -1
                try:
                    if c:
                        pairs[other] = c
                    else:
                        del pairs[other]
                except RedirectOperation:
                    pairs[other] = c
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp540; HEAD=FACTORS; DATA=pairs)
            _tmp540 = new(cls)
            _tmp540.head = FACTORS
            _tmp540.data = pairs
            return _tmp540
    else:
        if rhead is NUMBER:
            #DIV_SYMBOL_NUMBER(LHS=self; RHS=other)
            #DIV_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=div(1, other.data, cls); RHS=self)
            _tmp544 = div(1, other.data, cls)
            #MUL_ZERO_OP(VALUE=_tmp544; OP=self)
            try:
                if not _tmp544:
                    if self.has_active():
                        #RETURN_NEW(HEAD=TERMS; DATA={self: 0})
                        #NEWINSTANCE(OBJ=_tmp546; HEAD=TERMS; DATA={self: 0})
                        _tmp546 = new(cls)
                        _tmp546.head = TERMS
                        _tmp546.data = {self: 0}
                        return _tmp546
                    else:
                        return cls.zero
            except RedirectOperation:
                pass
            if _tmp544==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp544})
            #NEWINSTANCE(OBJ=_tmp548; HEAD=TERMS; DATA={self: _tmp544})
            _tmp548 = new(cls)
            _tmp548.head = TERMS
            _tmp548.data = {self: _tmp544}
            return _tmp548
        elif rhead is TERMS:
            #DIV_SYMBOL_TERMS(LHS=self; RHS=other)
            pairs = other.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                if self==t:
                    return cls.convert(div(1, c, cls))
                #NEWINSTANCE(OBJ=_tmp550; HEAD=FACTORS; DATA={self:1, t:-1})
                _tmp550 = new(cls)
                _tmp550.head = FACTORS
                _tmp550.data = {self:1, t:-1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp550: div(1, c, cls)})
                #NEWINSTANCE(OBJ=_tmp552; HEAD=TERMS; DATA={_tmp550: div(1, c, cls)})
                _tmp552 = new(cls)
                _tmp552.head = TERMS
                _tmp552.data = {_tmp550: div(1, c, cls)}
                return _tmp552
            #RETURN_NEW(HEAD=FACTORS; DATA={self:1, other:-1})
            #NEWINSTANCE(OBJ=_tmp554; HEAD=FACTORS; DATA={self:1, other:-1})
            _tmp554 = new(cls)
            _tmp554.head = FACTORS
            _tmp554.data = {self:1, other:-1}
            return _tmp554
        elif rhead is FACTORS:
            #DIV_SYMBOL_FACTORS(LHS=self; RHS=other)
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==self:
                    c = 1 - c
                    try:
                        if not c:
                            return cls.one
                    except RedirectOperation:
                        pass
                    if c==1:
                        return t
                    else:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp557; HEAD=FACTORS; DATA={t: c})
                        _tmp557 = new(cls)
                        _tmp557.head = FACTORS
                        _tmp557.data = {t: c}
                        return _tmp557
                #RETURN_NEW(HEAD=FACTORS; DATA={t: -c, self: 1})
                #NEWINSTANCE(OBJ=_tmp559; HEAD=FACTORS; DATA={t: -c, self: 1})
                _tmp559 = new(cls)
                _tmp559.head = FACTORS
                _tmp559.data = {t: -c, self: 1}
                return _tmp559
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[self] = c
                    else:
                        del pairs[self]
                except RedirectOperation:
                    pairs[self] = c
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp565; HEAD=FACTORS; DATA=pairs)
            _tmp565 = new(cls)
            _tmp565.head = FACTORS
            _tmp565.data = pairs
            return _tmp565
        else:
            #DIV_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                return cls.one
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp568; HEAD=FACTORS; DATA={self: 1, other: -1})
            _tmp568 = new(cls)
            _tmp568.head = FACTORS
            _tmp568.data = {self: 1, other: -1}
            return _tmp568
