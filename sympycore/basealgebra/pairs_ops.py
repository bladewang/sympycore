"""Generated low-level arithmetic methods for CollectingField.

This file is generated by the src/mk_pairs_ops.py script.
See http://sympycore.googlecode.com/ for more information.

DO NOT CHANGE THIS FILE DIRECTLY!!!
"""

from ..core import Expr
from ..utils import NUMBER, SYMBOL, TERMS, FACTORS
from ..arithmetic.numbers import (normalized_fraction, mpq, try_power,
  numbertypes, inttypes_set, numbertypes_set)
from ..arithmetic.infinity import Infinity

def div(a, b, cls):
    if type(b) in inttypes_set:
        if type(a) in inttypes_set:
            if not b:
                if not a:
                    return cls.undefined
                return cls.zoo
            return normalized_fraction(a, b)
        if not b:
            return a * cls.zoo
        if b == 1:
            return a
        return a * mpq((1,b))
    return a / b




def expand_mul_method(cls, self, other):
    lhead, ldata = self.pair
    rhead, rdata = other.pair
    if lhead is FACTORS:
        if rhead is FACTORS:
            #MUL_FACTORS_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            pairs_get = pairs.get
            number = 1
            for t,c in rdata.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=+; USIGN=; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                _tmp9 = pairs_get(t)
                if _tmp9 is None:
                    pairs[t] =  c
                else:
                    _tmp9 = _tmp9 + c
                    if type(_tmp9) is cls and _tmp9.head is NUMBER:
                        _tmp9 = _tmp9.data
                    if _tmp9:
                        if t.head is NUMBER:
                            del pairs[t]
                            z, sym = try_power(t.data, _tmp9)
                            if sym:
                                for t1, c1 in sym:
                                    #NEWINSTANCE(OBJ=tt; HEAD=NUMBER; DATA=t1)
                                    tt = cls(NUMBER, t1)
                                    #ADD_TERM_VALUE_DICT(DICT=pairs; DICT_GET=pairs_get; TERM=tt; VALUE=c1; SIGN=+; USIGN=)
                                    _tmp23 = pairs_get(tt)
                                    if _tmp23 is None:
                                        pairs[tt] =  c1
                                    else:
                                        _tmp23 = _tmp23 + c1
                                        if _tmp23:
                                            pairs[tt] = _tmp23
                                        else:
                                            del pairs[tt]
                            number = number * z
                        else:
                            pairs[t] = _tmp9
                    else:
                        del pairs[t]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   if number==1:
                       return t
                   #RETURN_NEW(HEAD=TERMS; DATA={t: number})
                   #NEWINSTANCE(OBJ=_tmp37; HEAD=TERMS; DATA={t: number})
                   _tmp37 = cls(TERMS, {t: number})
                   return _tmp37
               if t==cls.one:
                   return number
            if number == 1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp51; HEAD=FACTORS; DATA=pairs)
                _tmp51 = cls(FACTORS, pairs)
                return _tmp51
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = cls(FACTORS, pairs)
            #RETURN_NEW(HEAD=TERMS; DATA={obj: number})
            #NEWINSTANCE(OBJ=_tmp72; HEAD=TERMS; DATA={obj: number})
            _tmp72 = cls(TERMS, {obj: number})
            return _tmp72
        elif rhead is NUMBER:
            return self # other must be one
        else:
            #MUL_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=other; RHSDATA=rdata)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp100 = pairs.get(other)
            if _tmp100 is None:
                pairs[other] =  1
            else:
                _tmp100 = _tmp100 + 1
                if _tmp100:
                    pairs[other] = _tmp100
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp114; HEAD=FACTORS; DATA=pairs)
            _tmp114 = cls(FACTORS, pairs)
            return _tmp114
    elif lhead is NUMBER:
        return other # self must be one
    else:
        if rhead is FACTORS:
            #MUL_SYMBOL_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_FACTORS_SYMBOL(LHS=other; LHSDATA=rdata; RHS=self; RHSDATA=ldata)
            pairs = rdata.copy()
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self; RHSDATA=ldata)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp149 = pairs.get(self)
            if _tmp149 is None:
                pairs[self] =  1
            else:
                _tmp149 = _tmp149 + 1
                if _tmp149:
                    pairs[self] = _tmp149
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp163; HEAD=FACTORS; DATA=pairs)
            _tmp163 = cls(FACTORS, pairs)
            return _tmp163
        elif rhead is NUMBER:
            return self # other must be one
        else:
            #MUL_SYMBOL_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp184; HEAD=FACTORS; DATA=pairs)
            _tmp184 = cls(FACTORS, pairs)
            return _tmp184

def neg_method(self, NUMBER=NUMBER, TERMS=TERMS):
    cls = type(self)
    lhead, ldata = self.pair
    if lhead is NUMBER:
        #NEG_NUMBER(OP=self; OPDATA=ldata)
        #RETURN_NEW(HEAD=NUMBER; DATA=-ldata)
        #NEWINSTANCE(OBJ=_tmp205; HEAD=NUMBER; DATA=-ldata)
        _tmp205 = cls(NUMBER, -ldata)
        return _tmp205
    elif lhead is TERMS:
        #NEG_TERMS(OP=self; OPDATA=ldata)
        op_pairs = ldata
        if len(op_pairs)==1:
            t, c = op_pairs.items()[0]
            c = -c
            if c==1:
                return t
            #RETURN_NEW(HEAD=TERMS; DATA={t:c})
            #NEWINSTANCE(OBJ=_tmp226; HEAD=TERMS; DATA={t:c})
            _tmp226 = cls(TERMS, {t:c})
            return _tmp226
        #NEG_DICT_VALUES(DICT_IN=ldata; DICT_OUT=pairs)
        pairs = dict([(t, -c) for t,c in ldata.iteritems()])
        #RETURN_NEW(HEAD=TERMS; DATA=pairs)
        #NEWINSTANCE(OBJ=_tmp247; HEAD=TERMS; DATA=pairs)
        _tmp247 = cls(TERMS, pairs)
        return _tmp247
    else:
        #NEG_SYMBOL(OP=self; OPDATA=ldata)
        #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
        #NEWINSTANCE(OBJ=_tmp268; HEAD=TERMS; DATA={self: -1})
        _tmp268 = cls(TERMS, {self: -1})
        return _tmp268

def rsub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #SUB_VALUE_NUMBER(VALUE=other; RHS=self; RHSDATA=ldata)
            #RETURN_NEW(HEAD=NUMBER; DATA=other - ldata)
            #NEWINSTANCE(OBJ=_tmp289; HEAD=NUMBER; DATA=other - ldata)
            _tmp289 = cls(NUMBER, other - ldata)
            return _tmp289
        elif lhead is TERMS:
            #SUB_VALUE_TERMS(VALUE=other; RHS=self; RHSDATA=ldata)
            _tmp303 = other
            if not _tmp303:
                #NEG_TERMS(OP=self; OPDATA=ldata)
                op_pairs = ldata
                if len(op_pairs)==1:
                    t, c = op_pairs.items()[0]
                    c = -c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                    #NEWINSTANCE(OBJ=_tmp317; HEAD=TERMS; DATA={t:c})
                    _tmp317 = cls(TERMS, {t:c})
                    return _tmp317
                #NEG_DICT_VALUES(DICT_IN=ldata; DICT_OUT=pairs)
                pairs = dict([(t, -c) for t,c in ldata.iteritems()])
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp338; HEAD=TERMS; DATA=pairs)
                _tmp338 = cls(TERMS, pairs)
                return _tmp338
            #NEG_DICT_VALUES(DICT_IN=ldata; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in ldata.iteritems()])
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp303)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp303; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp366 = pairs.get(cls.one)
            if _tmp366 is None:
                pairs[cls.one] =  _tmp303
            else:
                _tmp366 = _tmp366 + _tmp303
                if _tmp366:
                    pairs[cls.one] = _tmp366
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp373; HEAD=TERMS; DATA=pairs)
            _tmp373 = cls(TERMS, pairs)
            return _tmp373
        else:
            #SUB_VALUE_SYMBOL(VALUE=other; RHS=self; RHSDATA=ldata)
            _tmp387 = other
            if not _tmp387:
                #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
                #NEWINSTANCE(OBJ=_tmp394; HEAD=TERMS; DATA={self: -1})
                _tmp394 = cls(TERMS, {self: -1})
                return _tmp394
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp387, self: -1})
            #NEWINSTANCE(OBJ=_tmp408; HEAD=TERMS; DATA={cls.one: _tmp387, self: -1})
            _tmp408 = cls(TERMS, {cls.one: _tmp387, self: -1})
            return _tmp408
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other - self

def rdiv_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #DIV_VALUE_NUMBER(VALUE=other; RHS=self; RHSDATA=ldata)
            #RETURN_NEW2(HEAD=NUMBER; DATA=div(other, ldata, cls))
            _tmp429 = div(other, ldata, cls)
            if isinstance(_tmp429, Infinity):
                return _tmp429
            #RETURN_NEW(HEAD=NUMBER; DATA=_tmp429)
            #NEWINSTANCE(OBJ=_tmp436; HEAD=NUMBER; DATA=_tmp429)
            _tmp436 = cls(NUMBER, _tmp429)
            return _tmp436
        elif lhead is TERMS:
            #DIV_VALUE_TERMS(VALUE=other; RHS=self; RHSDATA=ldata)
            _tmp450 = other
            if not _tmp450:
                return cls.zero
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = div(other, c, cls)
                t = 1/t
                if c==1:
                    return t
                if t==cls.one:
                    return cls(NUMBER, c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp457; HEAD=TERMS; DATA={t: c})
                _tmp457 = cls(TERMS, {t: c})
                return _tmp457
            #NEWINSTANCE(OBJ=_tmp450; HEAD=FACTORS; DATA={self: -1})
            _tmp450 = cls(FACTORS, {self: -1})
            if other==1:
                return _tmp450
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp450: other})
            #NEWINSTANCE(OBJ=_tmp478; HEAD=TERMS; DATA={_tmp450: other})
            _tmp478 = cls(TERMS, {_tmp450: other})
            return _tmp478
        elif lhead is FACTORS:
            #DIV_VALUE_FACTORS(VALUE=other; RHS=self; RHSDATA=ldata)
            
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = -c
                if c==1:
                    return t * other
                new_pairs = {t: c}
            else:
                #NEG_DICT_VALUES(DICT_IN=pairs; DICT_OUT=new_pairs)
                new_pairs = dict([(t, -c) for t,c in pairs.iteritems()])
            #NEWINSTANCE(OBJ=_tmp492; HEAD=FACTORS; DATA=new_pairs)
            _tmp492 = cls(FACTORS, new_pairs)
            if other==1:
                return _tmp492
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp492: other})
            #NEWINSTANCE(OBJ=_tmp513; HEAD=TERMS; DATA={_tmp492: other})
            _tmp513 = cls(TERMS, {_tmp492: other})
            return _tmp513
        else:
            #DIV_VALUE_SYMBOL(VALUE=other; RHS=self; RHSDATA=ldata)
            _tmp527 = other
            if not _tmp527:
                return cls.zero
            #NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={self: -1})
            obj2 = cls(FACTORS, {self: -1})
            if _tmp527==1:
                return obj2
            #RETURN_NEW(HEAD=TERMS; DATA={obj2: _tmp527})
            #NEWINSTANCE(OBJ=_tmp541; HEAD=TERMS; DATA={obj2: _tmp527})
            _tmp541 = cls(TERMS, {obj2: _tmp527})
            return _tmp541
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other / self

def pow_method(self, other, z = None, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    type_other = type(other)
    if type_other is cls:
        rhead, rdata = other.pair
        if rhead is NUMBER:
            other = rdata
        type_other = type(other)
    if type_other in inttypes_set:
        if not other:
            return cls.one
        if other==1:
            return self
        if lhead is NUMBER:
            #POW_NUMBER_INT(VALUE=other; LHS=self; LHSDATA=ldata)
            if other < 0:
                #RETURN_NEW(HEAD=NUMBER; DATA=div(1, (ldata)**(-other), cls))
                #NEWINSTANCE(OBJ=_tmp562; HEAD=NUMBER; DATA=div(1, (ldata)**(-other), cls))
                _tmp562 = cls(NUMBER, div(1, (ldata)**(-other), cls))
                return _tmp562
            #RETURN_NEW(HEAD=NUMBER; DATA=(ldata)**(other))
            #NEWINSTANCE(OBJ=_tmp576; HEAD=NUMBER; DATA=(ldata)**(other))
            _tmp576 = cls(NUMBER, (ldata)**(other))
            return _tmp576
        elif lhead is TERMS:
            #POW_TERMS_INT(VALUE=other; LHS=self; LHSDATA=ldata)
            pairs = ldata
            if len(pairs)==1:
                t,c = pairs.items()[0]
                if other < 0:
                    c = div(1, c**(-other), cls)
                else:
                    c = c ** (other)
                t = t**(other)
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                #NEWINSTANCE(OBJ=_tmp597; HEAD=TERMS; DATA={t:c})
                _tmp597 = cls(TERMS, {t:c})
                return _tmp597
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp611; HEAD=FACTORS; DATA={self: other})
            _tmp611 = cls(FACTORS, {self: other})
            return _tmp611
        elif lhead is FACTORS:
            #POW_FACTORS_INT(VALUE=other; LHS=self; LHSDATA=ldata)
            #MUL_DICT_VALUES(DICT_IN=ldata; DICT_OUT=pairs; OP=other)
            pairs = dict([(t, c*other) for t,c in ldata.iteritems()])
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if c==1:
                    return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp639; HEAD=FACTORS; DATA=pairs)
            _tmp639 = cls(FACTORS, pairs)
            return _tmp639
        else:
            #POW_SYMBOL_INT(VALUE=other; LHS=self; LHSDATA=ldata)
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp660; HEAD=FACTORS; DATA={self: other})
            _tmp660 = cls(FACTORS, {self: other})
            return _tmp660
    if lhead is NUMBER and isinstance(other, cls.exptypes):
        #POW_NUMBER_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
        z, sym = try_power(ldata, other)
        if not sym:
            #RETURN_NEW(HEAD=NUMBER; DATA=z)
            #NEWINSTANCE(OBJ=_tmp681; HEAD=NUMBER; DATA=z)
            _tmp681 = cls(NUMBER, z)
            return _tmp681
        factors = {}
        for t,c in sym:
            factors[cls(NUMBER, t)] = c
        #NEWINSTANCE(OBJ=_tmp674; HEAD=FACTORS; DATA=factors)
        _tmp674 = cls(FACTORS, factors)
        if z==1:
            return _tmp674
        #RETURN_NEW(HEAD=TERMS; DATA={_tmp674: z})
        #NEWINSTANCE(OBJ=_tmp702; HEAD=TERMS; DATA={_tmp674: z})
        _tmp702 = cls(TERMS, {_tmp674: z})
        return _tmp702
    if type_other is mpq:
        if lhead is TERMS:
            #POW_TERMS_FRAC(VALUE=other; LHS=self; LHSDATA=ldata)
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if isinstance(c, numbertypes) and not c==-1:
                    if c < 0:
                        z, sym = try_power(-c, other)
                        factors = {-t: other}
                    else:
                        z, sym = try_power(c, other)
                        factors = {t: other}
                    for t,c in sym:
                        factors[cls(NUMBER, t)] = c
                    #NEWINSTANCE(OBJ=_tmp716; HEAD=FACTORS; DATA=factors)
                    _tmp716 = cls(FACTORS, factors)
                    if z==1:
                        return _tmp716
                    #RETURN_NEW(HEAD=TERMS; DATA={_tmp716: z})
                    #NEWINSTANCE(OBJ=_tmp730; HEAD=TERMS; DATA={_tmp716: z})
                    _tmp730 = cls(TERMS, {_tmp716: z})
                    return _tmp730
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp744; HEAD=FACTORS; DATA={self: other})
            _tmp744 = cls(FACTORS, {self: other})
            return _tmp744
        else:
            #POW_SYMBOL_FRAC(VALUE=other; LHS=self; LHSDATA=ldata)
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp765; HEAD=FACTORS; DATA={self: other})
            _tmp765 = cls(FACTORS, {self: other})
            return _tmp765
    if type_other is cls or isinstance(other, cls.exptypes):
        if lhead is NUMBER:
            if ldata==1:
                return self
        elif lhead is FACTORS:
            #POW_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other)
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if type(c) in inttypes_set:
                    #RETURN_NEW(HEAD=FACTORS; DATA={t: other * c})
                    #NEWINSTANCE(OBJ=_tmp786; HEAD=FACTORS; DATA={t: other * c})
                    _tmp786 = cls(FACTORS, {t: other * c})
                    return _tmp786
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp800; HEAD=FACTORS; DATA={self: other})
            _tmp800 = cls(FACTORS, {self: other})
            return _tmp800
        #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
        #NEWINSTANCE(OBJ=_tmp814; HEAD=FACTORS; DATA={self: other})
        _tmp814 = cls(FACTORS, {self: other})
        return _tmp814
    return NotImplemented

def add_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #ADD_NUMBER_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #RETURN_NEW(HEAD=NUMBER; DATA=ldata + other)
                #NEWINSTANCE(OBJ=_tmp835; HEAD=NUMBER; DATA=ldata + other)
                _tmp835 = cls(NUMBER, ldata + other)
                return _tmp835
            elif lhead is TERMS:
                #ADD_TERMS_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #ADD_VALUE_TERMS(VALUE=other; RHS=self; RHSDATA=ldata)
                _tmp856 = other
                if not _tmp856:
                    return self
                pairs = ldata.copy()
                #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp856)
                #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp856; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
                _tmp870 = pairs.get(cls.one)
                if _tmp870 is None:
                    pairs[cls.one] =  _tmp856
                else:
                    _tmp870 = _tmp870 + _tmp856
                    if _tmp870:
                        pairs[cls.one] = _tmp870
                    else:
                        del pairs[cls.one]
                #CANONIZE_TERMS_DICT(DICT=pairs)
                if not pairs:
                    return cls.zero
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return cls(NUMBER, c)
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp884; HEAD=TERMS; DATA=pairs)
                _tmp884 = cls(TERMS, pairs)
                return _tmp884
            else:
                #ADD_SYMBOL_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #ADD_VALUE_SYMBOL(VALUE=other; RHS=self; RHSDATA=ldata)
                _tmp905 = other
                if not _tmp905:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp905, self: 1})
                #NEWINSTANCE(OBJ=_tmp912; HEAD=TERMS; DATA={cls.one: _tmp905, self: 1})
                _tmp912 = cls(TERMS, {cls.one: _tmp905, self: 1})
                return _tmp912
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead, rdata = other.pair
    if lhead is NUMBER:
        if rhead is NUMBER:
            #ADD_NUMBER_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #ADD_VALUE_NUMBER(VALUE=ldata; RHS=other; RHSDATA=rdata)
            #RETURN_NEW(HEAD=NUMBER; DATA=ldata + rdata)
            #NEWINSTANCE(OBJ=_tmp940; HEAD=NUMBER; DATA=ldata + rdata)
            _tmp940 = cls(NUMBER, ldata + rdata)
            return _tmp940
        elif rhead is TERMS:
            #ADD_NUMBER_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #ADD_VALUE_TERMS(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp961 = ldata
            if not _tmp961:
                return other
            pairs = rdata.copy()
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp961)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp961; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp975 = pairs.get(cls.one)
            if _tmp975 is None:
                pairs[cls.one] =  _tmp961
            else:
                _tmp975 = _tmp975 + _tmp961
                if _tmp975:
                    pairs[cls.one] = _tmp975
                else:
                    del pairs[cls.one]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp989; HEAD=TERMS; DATA=pairs)
            _tmp989 = cls(TERMS, pairs)
            return _tmp989
        else:
            #ADD_NUMBER_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #ADD_VALUE_SYMBOL(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp1010 = ldata
            if not _tmp1010:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp1010, other: 1})
            #NEWINSTANCE(OBJ=_tmp1017; HEAD=TERMS; DATA={cls.one: _tmp1010, other: 1})
            _tmp1017 = cls(TERMS, {cls.one: _tmp1010, other: 1})
            return _tmp1017
    elif lhead is TERMS:
        if rhead is NUMBER:
            #ADD_TERMS_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #ADD_TERMS_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #ADD_VALUE_TERMS(VALUE=rdata; RHS=self; RHSDATA=ldata)
            _tmp1045 = rdata
            if not _tmp1045:
                return self
            pairs = ldata.copy()
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp1045)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp1045; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1059 = pairs.get(cls.one)
            if _tmp1059 is None:
                pairs[cls.one] =  _tmp1045
            else:
                _tmp1059 = _tmp1059 + _tmp1045
                if _tmp1059:
                    pairs[cls.one] = _tmp1059
                else:
                    del pairs[cls.one]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1073; HEAD=TERMS; DATA=pairs)
            _tmp1073 = cls(TERMS, pairs)
            return _tmp1073
        elif rhead is TERMS:
            #ADD_TERMS_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            pairs_get = pairs.get
            for t,c in rdata.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=c; DICT=pairs; DICT_GET=pairs_get; SIGN=+; USIGN=)
                _tmp1094 = pairs_get(t)
                if _tmp1094 is None:
                    pairs[t] =  c
                else:
                    _tmp1094 = _tmp1094 + c
                    if _tmp1094:
                        pairs[t] = _tmp1094
                    else:
                        del pairs[t]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1108; HEAD=TERMS; DATA=pairs)
            _tmp1108 = cls(TERMS, pairs)
            return _tmp1108
        else:
            #ADD_TERMS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1129 = pairs.get(other)
            if _tmp1129 is None:
                pairs[other] =  1
            else:
                _tmp1129 = _tmp1129 + 1
                if _tmp1129:
                    pairs[other] = _tmp1129
                else:
                    del pairs[other]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1143; HEAD=TERMS; DATA=pairs)
            _tmp1143 = cls(TERMS, pairs)
            return _tmp1143
    else:
        if rhead is NUMBER:
            #ADD_SYMBOL_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #ADD_SYMBOL_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #ADD_VALUE_SYMBOL(VALUE=rdata; RHS=self; RHSDATA=ldata)
            _tmp1171 = rdata
            if not _tmp1171:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp1171, self: 1})
            #NEWINSTANCE(OBJ=_tmp1178; HEAD=TERMS; DATA={cls.one: _tmp1171, self: 1})
            _tmp1178 = cls(TERMS, {cls.one: _tmp1171, self: 1})
            return _tmp1178
        elif rhead is TERMS:
            #ADD_SYMBOL_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #ADD_TERMS_SYMBOL(LHS=other; LHSDATA=rdata; RHS=self; RHSDATA=ldata)
            pairs = rdata.copy()
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1206 = pairs.get(self)
            if _tmp1206 is None:
                pairs[self] =  1
            else:
                _tmp1206 = _tmp1206 + 1
                if _tmp1206:
                    pairs[self] = _tmp1206
                else:
                    del pairs[self]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1220; HEAD=TERMS; DATA=pairs)
            _tmp1220 = cls(TERMS, pairs)
            return _tmp1220
        else:
            #ADD_SYMBOL_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1241; HEAD=TERMS; DATA=pairs)
            _tmp1241 = cls(TERMS, pairs)
            return _tmp1241

def sub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #SUB_NUMBER_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #RETURN_NEW(HEAD=NUMBER; DATA=ldata - other)
                #NEWINSTANCE(OBJ=_tmp1262; HEAD=NUMBER; DATA=ldata - other)
                _tmp1262 = cls(NUMBER, ldata - other)
                return _tmp1262
            elif lhead is TERMS:
                #SUB_TERMS_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #ADD_VALUE_TERMS(VALUE=-other; RHS=self; RHSDATA=ldata)
                _tmp1283 = -other
                if not _tmp1283:
                    return self
                pairs = ldata.copy()
                #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp1283)
                #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp1283; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
                _tmp1297 = pairs.get(cls.one)
                if _tmp1297 is None:
                    pairs[cls.one] =  _tmp1283
                else:
                    _tmp1297 = _tmp1297 + _tmp1283
                    if _tmp1297:
                        pairs[cls.one] = _tmp1297
                    else:
                        del pairs[cls.one]
                #CANONIZE_TERMS_DICT(DICT=pairs)
                if not pairs:
                    return cls.zero
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return cls(NUMBER, c)
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp1311; HEAD=TERMS; DATA=pairs)
                _tmp1311 = cls(TERMS, pairs)
                return _tmp1311
            else:
                #SUB_SYMBOL_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; LHSDATA=ldata; VALUE=-other)
                #ADD_VALUE_SYMBOL(VALUE=-other; RHS=self; RHSDATA=ldata)
                _tmp1339 = -other
                if not _tmp1339:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp1339, self: 1})
                #NEWINSTANCE(OBJ=_tmp1346; HEAD=TERMS; DATA={cls.one: _tmp1339, self: 1})
                _tmp1346 = cls(TERMS, {cls.one: _tmp1339, self: 1})
                return _tmp1346
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead, rdata = other.pair
    if lhead is NUMBER:
        if rhead is NUMBER:
            #SUB_NUMBER_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #SUB_VALUE_NUMBER(VALUE=ldata; RHS=other; RHSDATA=rdata)
            #RETURN_NEW(HEAD=NUMBER; DATA=ldata - rdata)
            #NEWINSTANCE(OBJ=_tmp1374; HEAD=NUMBER; DATA=ldata - rdata)
            _tmp1374 = cls(NUMBER, ldata - rdata)
            return _tmp1374
        elif rhead is TERMS:
            #SUB_NUMBER_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #SUB_VALUE_TERMS(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp1395 = ldata
            if not _tmp1395:
                #NEG_TERMS(OP=other; OPDATA=rdata)
                op_pairs = rdata
                if len(op_pairs)==1:
                    t, c = op_pairs.items()[0]
                    c = -c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                    #NEWINSTANCE(OBJ=_tmp1409; HEAD=TERMS; DATA={t:c})
                    _tmp1409 = cls(TERMS, {t:c})
                    return _tmp1409
                #NEG_DICT_VALUES(DICT_IN=rdata; DICT_OUT=pairs)
                pairs = dict([(t, -c) for t,c in rdata.iteritems()])
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp1430; HEAD=TERMS; DATA=pairs)
                _tmp1430 = cls(TERMS, pairs)
                return _tmp1430
            #NEG_DICT_VALUES(DICT_IN=rdata; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in rdata.iteritems()])
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp1395)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp1395; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1458 = pairs.get(cls.one)
            if _tmp1458 is None:
                pairs[cls.one] =  _tmp1395
            else:
                _tmp1458 = _tmp1458 + _tmp1395
                if _tmp1458:
                    pairs[cls.one] = _tmp1458
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1465; HEAD=TERMS; DATA=pairs)
            _tmp1465 = cls(TERMS, pairs)
            return _tmp1465
        else:
            #SUB_NUMBER_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #SUB_VALUE_SYMBOL(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp1486 = ldata
            if not _tmp1486:
                #RETURN_NEW(HEAD=TERMS; DATA={other: -1})
                #NEWINSTANCE(OBJ=_tmp1493; HEAD=TERMS; DATA={other: -1})
                _tmp1493 = cls(TERMS, {other: -1})
                return _tmp1493
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp1486, other: -1})
            #NEWINSTANCE(OBJ=_tmp1507; HEAD=TERMS; DATA={cls.one: _tmp1486, other: -1})
            _tmp1507 = cls(TERMS, {cls.one: _tmp1486, other: -1})
            return _tmp1507
    elif lhead is TERMS:
        if rhead is NUMBER:
            #SUB_TERMS_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #SUB_TERMS_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #ADD_VALUE_TERMS(VALUE=-rdata; RHS=self; RHSDATA=ldata)
            _tmp1535 = -rdata
            if not _tmp1535:
                return self
            pairs = ldata.copy()
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp1535)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp1535; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1549 = pairs.get(cls.one)
            if _tmp1549 is None:
                pairs[cls.one] =  _tmp1535
            else:
                _tmp1549 = _tmp1549 + _tmp1535
                if _tmp1549:
                    pairs[cls.one] = _tmp1549
                else:
                    del pairs[cls.one]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1563; HEAD=TERMS; DATA=pairs)
            _tmp1563 = cls(TERMS, pairs)
            return _tmp1563
        elif rhead is TERMS:
            #SUB_TERMS_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            pairs_get = pairs.get
            for t,c in rdata.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=-c; DICT=pairs; DICT_GET=pairs_get; SIGN=+; USIGN=)
                _tmp1584 = pairs_get(t)
                if _tmp1584 is None:
                    pairs[t] =  -c
                else:
                    _tmp1584 = _tmp1584 + -c
                    if _tmp1584:
                        pairs[t] = _tmp1584
                    else:
                        del pairs[t]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1598; HEAD=TERMS; DATA=pairs)
            _tmp1598 = cls(TERMS, pairs)
            return _tmp1598
        else:
            #SUB_TERMS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1619 = pairs.get(other)
            if _tmp1619 is None:
                pairs[other] =  -1
            else:
                _tmp1619 = _tmp1619 + -1
                if _tmp1619:
                    pairs[other] = _tmp1619
                else:
                    del pairs[other]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1633; HEAD=TERMS; DATA=pairs)
            _tmp1633 = cls(TERMS, pairs)
            return _tmp1633
    else:
        if rhead is NUMBER:
            #SUB_SYMBOL_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #SUB_SYMBOL_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; LHSDATA=ldata; VALUE=-rdata)
            #ADD_VALUE_SYMBOL(VALUE=-rdata; RHS=self; RHSDATA=ldata)
            _tmp1668 = -rdata
            if not _tmp1668:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp1668, self: 1})
            #NEWINSTANCE(OBJ=_tmp1675; HEAD=TERMS; DATA={cls.one: _tmp1668, self: 1})
            _tmp1675 = cls(TERMS, {cls.one: _tmp1668, self: 1})
            return _tmp1675
        elif rhead is TERMS:
            #SUB_SYMBOL_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #NEG_DICT_VALUES(DICT_IN=rdata; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in rdata.iteritems()])
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1703 = pairs.get(self)
            if _tmp1703 is None:
                pairs[self] =  1
            else:
                _tmp1703 = _tmp1703 + 1
                if _tmp1703:
                    pairs[self] = _tmp1703
                else:
                    del pairs[self]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1717; HEAD=TERMS; DATA=pairs)
            _tmp1717 = cls(TERMS, pairs)
            return _tmp1717
        else:
            #SUB_SYMBOL_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            if self == other:
                return cls.zero
            #RETURN_NEW(HEAD=TERMS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp1738; HEAD=TERMS; DATA={self: 1, other: -1})
            _tmp1738 = cls(TERMS, {self: 1, other: -1})
            return _tmp1738

def mul_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #MUL_NUMBER_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #RETURN_NEW(HEAD=NUMBER; DATA=ldata * other)
                #NEWINSTANCE(OBJ=_tmp1759; HEAD=NUMBER; DATA=ldata * other)
                _tmp1759 = cls(NUMBER, ldata * other)
                return _tmp1759
            elif lhead is TERMS:
                #MUL_TERMS_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_VALUE_TERMS(VALUE=other; RHS=self; RHSDATA=ldata)
                _tmp1780 = other
                if not _tmp1780:
                    return cls.zero
                pairs = ldata
                if len(pairs)==1:
                    t, c = pairs.items()[0]
                    c = _tmp1780 * c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp1787; HEAD=TERMS; DATA={t: c})
                    _tmp1787 = cls(TERMS, {t: c})
                    return _tmp1787
                if _tmp1780==1:
                    return self
                pairs = {}
                for t,c in ldata.iteritems():
                    pairs[t] = _tmp1780 * c
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                obj = cls(TERMS, pairs)
                coeff, terms = self._coeff_terms
                if terms is not None:
                    c = coeff * _tmp1780
                    if not c==1:
                        obj._coeff_terms = (c, terms)
                else:
                    obj._coeff_terms = (_tmp1780, self)
                return obj
            elif lhead is FACTORS:
                #MUL_FACTORS_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_SYMBOL_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_VALUE_SYMBOL(VALUE=other; RHS=self; RHSDATA=ldata)
                _tmp1822 = other
                if not _tmp1822:
                    return cls.zero
                if _tmp1822==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp1822})
                #NEWINSTANCE(OBJ=_tmp1829; HEAD=TERMS; DATA={self: _tmp1822})
                _tmp1829 = cls(TERMS, {self: _tmp1822})
                return _tmp1829
            else:
                #MUL_SYMBOL_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_VALUE_SYMBOL(VALUE=other; RHS=self; RHSDATA=ldata)
                _tmp1850 = other
                if not _tmp1850:
                    return cls.zero
                if _tmp1850==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp1850})
                #NEWINSTANCE(OBJ=_tmp1857; HEAD=TERMS; DATA={self: _tmp1850})
                _tmp1857 = cls(TERMS, {self: _tmp1850})
                return _tmp1857
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead, rdata = other.pair
    if lhead is NUMBER:
        if rhead is NUMBER:
            #MUL_NUMBER_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_VALUE_NUMBER(VALUE=ldata; RHS=other; RHSDATA=rdata)
            #RETURN_NEW(HEAD=NUMBER; DATA=ldata * rdata)
            #NEWINSTANCE(OBJ=_tmp1885; HEAD=NUMBER; DATA=ldata * rdata)
            _tmp1885 = cls(NUMBER, ldata * rdata)
            return _tmp1885
        elif rhead is TERMS:
            #MUL_NUMBER_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_VALUE_TERMS(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp1906 = ldata
            if not _tmp1906:
                return cls.zero
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp1906 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp1913; HEAD=TERMS; DATA={t: c})
                _tmp1913 = cls(TERMS, {t: c})
                return _tmp1913
            if _tmp1906==1:
                return other
            pairs = {}
            for t,c in rdata.iteritems():
                pairs[t] = _tmp1906 * c
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = cls(TERMS, pairs)
            coeff, terms = other._coeff_terms
            if terms is not None:
                c = coeff * _tmp1906
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp1906, other)
            return obj
        elif rhead is FACTORS:
            #MUL_NUMBER_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_SYMBOL_VALUE(VALUE=ldata; LHS=other; LHSDATA=rdata)
            #MUL_VALUE_SYMBOL(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp1948 = ldata
            if not _tmp1948:
                return cls.zero
            if _tmp1948==1:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={other: _tmp1948})
            #NEWINSTANCE(OBJ=_tmp1955; HEAD=TERMS; DATA={other: _tmp1948})
            _tmp1955 = cls(TERMS, {other: _tmp1948})
            return _tmp1955
        else:
            #MUL_NUMBER_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_VALUE_SYMBOL(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp1976 = ldata
            if not _tmp1976:
                return cls.zero
            if _tmp1976==1:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={other: _tmp1976})
            #NEWINSTANCE(OBJ=_tmp1983; HEAD=TERMS; DATA={other: _tmp1976})
            _tmp1983 = cls(TERMS, {other: _tmp1976})
            return _tmp1983
    elif lhead is TERMS:
        if rhead is NUMBER:
            #MUL_TERMS_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_TERMS_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #MUL_VALUE_TERMS(VALUE=rdata; RHS=self; RHSDATA=ldata)
            _tmp2011 = rdata
            if not _tmp2011:
                return cls.zero
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp2011 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp2018; HEAD=TERMS; DATA={t: c})
                _tmp2018 = cls(TERMS, {t: c})
                return _tmp2018
            if _tmp2011==1:
                return self
            pairs = {}
            for t,c in ldata.iteritems():
                pairs[t] = _tmp2011 * c
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = cls(TERMS, pairs)
            coeff, terms = self._coeff_terms
            if terms is not None:
                c = coeff * _tmp2011
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp2011, self)
            return obj
        elif rhead is TERMS:
            #MUL_TERMS_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            lpairs = ldata
            rpairs = rdata
            if len(lpairs)==1:
                t1,c1 = lpairs.items()[0]
                if len(rpairs)==1:
                    t2,c2 = rpairs.items()[0]
                    t = t1 * t2
                    c = c1 * c2
                    if t == cls.one:
                        return cls(NUMBER, c)
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp2046; HEAD=TERMS; DATA={t: c})
                    _tmp2046 = cls(TERMS, {t: c})
                    return _tmp2046
                coeff, terms = other._coeff_terms
                if terms is None:
                    return (t1 * other) * c1
                return (t1*terms) * (c1*coeff)
            elif len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                coeff, terms = other._coeff_terms
                if terms is None:
                    return (t1 * self) * c1
                return (t1*terms) * (c1*coeff)
            lcoeff, lterms = self._coeff_terms
            rcoeff, rterms = other._coeff_terms
            if lterms is None:
                lterms = self
            if rterms is None:
                rterms = other
            if lterms==rterms:
                #NEWINSTANCE(OBJ=_tmp2039; HEAD=FACTORS; DATA={lterms: 2})
                _tmp2039 = cls(FACTORS, {lterms: 2})
            else:
                #NEWINSTANCE(OBJ=_tmp2039; HEAD=FACTORS; DATA={lterms: 1, rterms: 1})
                _tmp2039 = cls(FACTORS, {lterms: 1, rterms: 1})
            c = lcoeff * rcoeff
            if c==1:
                return _tmp2039
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp2039: c})
            #NEWINSTANCE(OBJ=_tmp2074; HEAD=TERMS; DATA={_tmp2039: c})
            _tmp2074 = cls(TERMS, {_tmp2039: c})
            return _tmp2074
        elif rhead is FACTORS:
            #MUL_TERMS_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_FACTORS_TERMS(LHS=other; LHSDATA=rdata; RHS=self; RHSDATA=ldata)
            rpairs = ldata
            if len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                t = t1 * other
                #RETURN_NEW(HEAD=TERMS; DATA={t: c1})
                #NEWINSTANCE(OBJ=_tmp2102; HEAD=TERMS; DATA={t: c1})
                _tmp2102 = cls(TERMS, {t: c1})
                return _tmp2102
            coeff, terms = self._coeff_terms
            if terms is None:
                #MUL_FACTORS_SYMBOL(LHS=other; LHSDATA=rdata; RHS=self; RHSDATA=ldata)
                pairs = rdata.copy()
                #MUL_DICT_SYMBOL(DICT=pairs; RHS=self; RHSDATA=ldata)
                #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
                _tmp2130 = pairs.get(self)
                if _tmp2130 is None:
                    pairs[self] =  1
                else:
                    _tmp2130 = _tmp2130 + 1
                    if _tmp2130:
                        pairs[self] = _tmp2130
                    else:
                        del pairs[self]
                #CANONIZE_FACTORS_DICT1(DICT=pairs)
                if not pairs:
                    return cls.one
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return t
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp2144; HEAD=FACTORS; DATA=pairs)
                _tmp2144 = cls(FACTORS, pairs)
                return _tmp2144
            pairs = rdata.copy()
            #ADD_TERM_VALUE_DICT(TERM=terms; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp2158 = pairs.get(terms)
            if _tmp2158 is None:
                pairs[terms] =  1
            else:
                _tmp2158 = _tmp2158 + 1
                if _tmp2158:
                    pairs[terms] = _tmp2158
                else:
                    del pairs[terms]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=coeff)
            if not pairs:
                if coeff is 1:
                    return cls.one
                return coeff
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   if coeff==1:
                       return t
                   #RETURN_NEW(HEAD=TERMS; DATA={t: coeff})
                   #NEWINSTANCE(OBJ=_tmp2172; HEAD=TERMS; DATA={t: coeff})
                   _tmp2172 = cls(TERMS, {t: coeff})
                   return _tmp2172
               if t==cls.one:
                   return coeff
            #NEWINSTANCE(OBJ=_tmp2095; HEAD=FACTORS; DATA=pairs)
            _tmp2095 = cls(FACTORS, pairs)
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp2095: coeff})
            #NEWINSTANCE(OBJ=_tmp2193; HEAD=TERMS; DATA={_tmp2095: coeff})
            _tmp2193 = cls(TERMS, {_tmp2095: coeff})
            return _tmp2193
        else:
            #MUL_TERMS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata
            if len(pairs)==1:
                t,c = pairs.items()[0]
                t = t * other
                if t==cls.one:
                    return cls(NUMBER, c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp2214; HEAD=TERMS; DATA={t: c})
                _tmp2214 = cls(TERMS, {t: c})
                return _tmp2214
            coeff, terms = self._coeff_terms
            if terms is not None:
                #NEWINSTANCE(OBJ=_tmp2207; HEAD=FACTORS; DATA={terms:1, other:1})
                _tmp2207 = cls(FACTORS, {terms:1, other:1})
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp2207:coeff})
                #NEWINSTANCE(OBJ=_tmp2235; HEAD=TERMS; DATA={_tmp2207:coeff})
                _tmp2235 = cls(TERMS, {_tmp2207:coeff})
                return _tmp2235
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: 1})
            #NEWINSTANCE(OBJ=_tmp2249; HEAD=FACTORS; DATA={self: 1, other: 1})
            _tmp2249 = cls(FACTORS, {self: 1, other: 1})
            return _tmp2249
    elif lhead is FACTORS:
        if rhead is NUMBER:
            #MUL_FACTORS_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_SYMBOL_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #MUL_VALUE_SYMBOL(VALUE=rdata; RHS=self; RHSDATA=ldata)
            _tmp2277 = rdata
            if not _tmp2277:
                return cls.zero
            if _tmp2277==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp2277})
            #NEWINSTANCE(OBJ=_tmp2284; HEAD=TERMS; DATA={self: _tmp2277})
            _tmp2284 = cls(TERMS, {self: _tmp2277})
            return _tmp2284
        elif rhead is TERMS:
            #MUL_FACTORS_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            rpairs = rdata
            if len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                t = t1 * self
                #RETURN_NEW(HEAD=TERMS; DATA={t: c1})
                #NEWINSTANCE(OBJ=_tmp2305; HEAD=TERMS; DATA={t: c1})
                _tmp2305 = cls(TERMS, {t: c1})
                return _tmp2305
            coeff, terms = other._coeff_terms
            if terms is None:
                #MUL_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
                pairs = ldata.copy()
                #MUL_DICT_SYMBOL(DICT=pairs; RHS=other; RHSDATA=rdata)
                #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
                _tmp2333 = pairs.get(other)
                if _tmp2333 is None:
                    pairs[other] =  1
                else:
                    _tmp2333 = _tmp2333 + 1
                    if _tmp2333:
                        pairs[other] = _tmp2333
                    else:
                        del pairs[other]
                #CANONIZE_FACTORS_DICT1(DICT=pairs)
                if not pairs:
                    return cls.one
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return t
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp2347; HEAD=FACTORS; DATA=pairs)
                _tmp2347 = cls(FACTORS, pairs)
                return _tmp2347
            pairs = ldata.copy()
            #ADD_TERM_VALUE_DICT(TERM=terms; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp2361 = pairs.get(terms)
            if _tmp2361 is None:
                pairs[terms] =  1
            else:
                _tmp2361 = _tmp2361 + 1
                if _tmp2361:
                    pairs[terms] = _tmp2361
                else:
                    del pairs[terms]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=coeff)
            if not pairs:
                if coeff is 1:
                    return cls.one
                return coeff
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   if coeff==1:
                       return t
                   #RETURN_NEW(HEAD=TERMS; DATA={t: coeff})
                   #NEWINSTANCE(OBJ=_tmp2375; HEAD=TERMS; DATA={t: coeff})
                   _tmp2375 = cls(TERMS, {t: coeff})
                   return _tmp2375
               if t==cls.one:
                   return coeff
            #NEWINSTANCE(OBJ=_tmp2298; HEAD=FACTORS; DATA=pairs)
            _tmp2298 = cls(FACTORS, pairs)
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp2298: coeff})
            #NEWINSTANCE(OBJ=_tmp2396; HEAD=TERMS; DATA={_tmp2298: coeff})
            _tmp2396 = cls(TERMS, {_tmp2298: coeff})
            return _tmp2396
        elif rhead is FACTORS:
            #MUL_FACTORS_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            pairs_get = pairs.get
            number = 1
            for t,c in rdata.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=+; USIGN=; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                _tmp2417 = pairs_get(t)
                if _tmp2417 is None:
                    pairs[t] =  c
                else:
                    _tmp2417 = _tmp2417 + c
                    if type(_tmp2417) is cls and _tmp2417.head is NUMBER:
                        _tmp2417 = _tmp2417.data
                    if _tmp2417:
                        if t.head is NUMBER:
                            del pairs[t]
                            z, sym = try_power(t.data, _tmp2417)
                            if sym:
                                for t1, c1 in sym:
                                    #NEWINSTANCE(OBJ=tt; HEAD=NUMBER; DATA=t1)
                                    tt = cls(NUMBER, t1)
                                    #ADD_TERM_VALUE_DICT(DICT=pairs; DICT_GET=pairs_get; TERM=tt; VALUE=c1; SIGN=+; USIGN=)
                                    _tmp2431 = pairs_get(tt)
                                    if _tmp2431 is None:
                                        pairs[tt] =  c1
                                    else:
                                        _tmp2431 = _tmp2431 + c1
                                        if _tmp2431:
                                            pairs[tt] = _tmp2431
                                        else:
                                            del pairs[tt]
                            number = number * z
                        else:
                            pairs[t] = _tmp2417
                    else:
                        del pairs[t]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   if number==1:
                       return t
                   #RETURN_NEW(HEAD=TERMS; DATA={t: number})
                   #NEWINSTANCE(OBJ=_tmp2445; HEAD=TERMS; DATA={t: number})
                   _tmp2445 = cls(TERMS, {t: number})
                   return _tmp2445
               if t==cls.one:
                   return number
            if number == 1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp2459; HEAD=FACTORS; DATA=pairs)
                _tmp2459 = cls(FACTORS, pairs)
                return _tmp2459
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = cls(FACTORS, pairs)
            #RETURN_NEW(HEAD=TERMS; DATA={obj: number})
            #NEWINSTANCE(OBJ=_tmp2480; HEAD=TERMS; DATA={obj: number})
            _tmp2480 = cls(TERMS, {obj: number})
            return _tmp2480
        else:
            #MUL_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=other; RHSDATA=rdata)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp2508 = pairs.get(other)
            if _tmp2508 is None:
                pairs[other] =  1
            else:
                _tmp2508 = _tmp2508 + 1
                if _tmp2508:
                    pairs[other] = _tmp2508
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp2522; HEAD=FACTORS; DATA=pairs)
            _tmp2522 = cls(FACTORS, pairs)
            return _tmp2522
    else:
        if rhead is NUMBER:
            #MUL_SYMBOL_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_SYMBOL_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #MUL_VALUE_SYMBOL(VALUE=rdata; RHS=self; RHSDATA=ldata)
            _tmp2550 = rdata
            if not _tmp2550:
                return cls.zero
            if _tmp2550==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp2550})
            #NEWINSTANCE(OBJ=_tmp2557; HEAD=TERMS; DATA={self: _tmp2550})
            _tmp2557 = cls(TERMS, {self: _tmp2550})
            return _tmp2557
        elif rhead is TERMS:
            #MUL_SYMBOL_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_TERMS_SYMBOL(LHS=other; LHSDATA=rdata; RHS=self; RHSDATA=ldata)
            pairs = rdata
            if len(pairs)==1:
                t,c = pairs.items()[0]
                t = t * self
                if t==cls.one:
                    return cls(NUMBER, c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp2585; HEAD=TERMS; DATA={t: c})
                _tmp2585 = cls(TERMS, {t: c})
                return _tmp2585
            coeff, terms = other._coeff_terms
            if terms is not None:
                #NEWINSTANCE(OBJ=_tmp2578; HEAD=FACTORS; DATA={terms:1, self:1})
                _tmp2578 = cls(FACTORS, {terms:1, self:1})
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp2578:coeff})
                #NEWINSTANCE(OBJ=_tmp2606; HEAD=TERMS; DATA={_tmp2578:coeff})
                _tmp2606 = cls(TERMS, {_tmp2578:coeff})
                return _tmp2606
            #RETURN_NEW(HEAD=FACTORS; DATA={other: 1, self: 1})
            #NEWINSTANCE(OBJ=_tmp2620; HEAD=FACTORS; DATA={other: 1, self: 1})
            _tmp2620 = cls(FACTORS, {other: 1, self: 1})
            return _tmp2620
        elif rhead is FACTORS:
            #MUL_SYMBOL_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_FACTORS_SYMBOL(LHS=other; LHSDATA=rdata; RHS=self; RHSDATA=ldata)
            pairs = rdata.copy()
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self; RHSDATA=ldata)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp2655 = pairs.get(self)
            if _tmp2655 is None:
                pairs[self] =  1
            else:
                _tmp2655 = _tmp2655 + 1
                if _tmp2655:
                    pairs[self] = _tmp2655
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp2669; HEAD=FACTORS; DATA=pairs)
            _tmp2669 = cls(FACTORS, pairs)
            return _tmp2669
        else:
            #MUL_SYMBOL_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp2690; HEAD=FACTORS; DATA=pairs)
            _tmp2690 = cls(FACTORS, pairs)
            return _tmp2690

def div_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #DIV_NUMBER_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #RETURN_NEW2(HEAD=NUMBER; DATA=div(ldata, other, cls))
                _tmp2711 = div(ldata, other, cls)
                if isinstance(_tmp2711, Infinity):
                    return _tmp2711
                #RETURN_NEW(HEAD=NUMBER; DATA=_tmp2711)
                #NEWINSTANCE(OBJ=_tmp2718; HEAD=NUMBER; DATA=_tmp2711)
                _tmp2718 = cls(NUMBER, _tmp2711)
                return _tmp2718
            elif lhead is TERMS:
                #DIV_TERMS_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_TERMS_VALUE(LHS=self; LHSDATA=ldata; VALUE=div(1,other,cls))
                #MUL_VALUE_TERMS(VALUE=div(1,other,cls); RHS=self; RHSDATA=ldata)
                _tmp2746 = div(1,other,cls)
                if not _tmp2746:
                    return cls.zero
                pairs = ldata
                if len(pairs)==1:
                    t, c = pairs.items()[0]
                    c = _tmp2746 * c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp2753; HEAD=TERMS; DATA={t: c})
                    _tmp2753 = cls(TERMS, {t: c})
                    return _tmp2753
                if _tmp2746==1:
                    return self
                pairs = {}
                for t,c in ldata.iteritems():
                    pairs[t] = _tmp2746 * c
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                obj = cls(TERMS, pairs)
                coeff, terms = self._coeff_terms
                if terms is not None:
                    c = coeff * _tmp2746
                    if not c==1:
                        obj._coeff_terms = (c, terms)
                else:
                    obj._coeff_terms = (_tmp2746, self)
                return obj
            elif lhead is FACTORS:
                #DIV_FACTORS_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_FACTORS_VALUE(LHS=self; LHSDATA=ldata; VALUE=div(1,other,cls))
                #MUL_SYMBOL_VALUE(VALUE=div(1,other,cls); LHS=self; LHSDATA=ldata)
                #MUL_VALUE_SYMBOL(VALUE=div(1,other,cls); RHS=self; RHSDATA=ldata)
                _tmp2795 = div(1,other,cls)
                if not _tmp2795:
                    return cls.zero
                if _tmp2795==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp2795})
                #NEWINSTANCE(OBJ=_tmp2802; HEAD=TERMS; DATA={self: _tmp2795})
                _tmp2802 = cls(TERMS, {self: _tmp2795})
                return _tmp2802
            else:
                #DIV_SYMBOL_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_VALUE_SYMBOL(VALUE=div(1, other, cls); RHS=self; RHSDATA=ldata)
                _tmp2823 = div(1, other, cls)
                if not _tmp2823:
                    return cls.zero
                if _tmp2823==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp2823})
                #NEWINSTANCE(OBJ=_tmp2830; HEAD=TERMS; DATA={self: _tmp2823})
                _tmp2830 = cls(TERMS, {self: _tmp2823})
                return _tmp2830
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead, rdata = other.pair
    if lhead is NUMBER:
        if rhead is NUMBER:
            #DIV_NUMBER_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_VALUE_NUMBER(VALUE=ldata; RHS=other; RHSDATA=rdata)
            #RETURN_NEW2(HEAD=NUMBER; DATA=div(ldata, rdata, cls))
            _tmp2858 = div(ldata, rdata, cls)
            if isinstance(_tmp2858, Infinity):
                return _tmp2858
            #RETURN_NEW(HEAD=NUMBER; DATA=_tmp2858)
            #NEWINSTANCE(OBJ=_tmp2865; HEAD=NUMBER; DATA=_tmp2858)
            _tmp2865 = cls(NUMBER, _tmp2858)
            return _tmp2865
        elif rhead is TERMS:
            #DIV_NUMBER_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_VALUE_TERMS(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp2886 = ldata
            if not _tmp2886:
                return cls.zero
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = div(ldata, c, cls)
                t = 1/t
                if c==1:
                    return t
                if t==cls.one:
                    return cls(NUMBER, c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp2893; HEAD=TERMS; DATA={t: c})
                _tmp2893 = cls(TERMS, {t: c})
                return _tmp2893
            #NEWINSTANCE(OBJ=_tmp2886; HEAD=FACTORS; DATA={other: -1})
            _tmp2886 = cls(FACTORS, {other: -1})
            if ldata==1:
                return _tmp2886
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp2886: ldata})
            #NEWINSTANCE(OBJ=_tmp2914; HEAD=TERMS; DATA={_tmp2886: ldata})
            _tmp2914 = cls(TERMS, {_tmp2886: ldata})
            return _tmp2914
        elif rhead is FACTORS:
            #DIV_NUMBER_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_VALUE_FACTORS(VALUE=ldata; RHS=other; RHSDATA=rdata)
            
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = -c
                if c==1:
                    return t * ldata
                new_pairs = {t: c}
            else:
                #NEG_DICT_VALUES(DICT_IN=pairs; DICT_OUT=new_pairs)
                new_pairs = dict([(t, -c) for t,c in pairs.iteritems()])
            #NEWINSTANCE(OBJ=_tmp2935; HEAD=FACTORS; DATA=new_pairs)
            _tmp2935 = cls(FACTORS, new_pairs)
            if ldata==1:
                return _tmp2935
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp2935: ldata})
            #NEWINSTANCE(OBJ=_tmp2956; HEAD=TERMS; DATA={_tmp2935: ldata})
            _tmp2956 = cls(TERMS, {_tmp2935: ldata})
            return _tmp2956
        else:
            #DIV_NUMBER_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_VALUE_SYMBOL(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp2977 = ldata
            if not _tmp2977:
                return cls.zero
            #NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={other: -1})
            obj2 = cls(FACTORS, {other: -1})
            if _tmp2977==1:
                return obj2
            #RETURN_NEW(HEAD=TERMS; DATA={obj2: _tmp2977})
            #NEWINSTANCE(OBJ=_tmp2991; HEAD=TERMS; DATA={obj2: _tmp2977})
            _tmp2991 = cls(TERMS, {obj2: _tmp2977})
            return _tmp2991
    elif lhead is TERMS:
        if rhead is NUMBER:
            #DIV_TERMS_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_TERMS_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #MUL_TERMS_VALUE(LHS=self; LHSDATA=ldata; VALUE=div(1,rdata,cls))
            #MUL_VALUE_TERMS(VALUE=div(1,rdata,cls); RHS=self; RHSDATA=ldata)
            _tmp3026 = div(1,rdata,cls)
            if not _tmp3026:
                return cls.zero
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp3026 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp3033; HEAD=TERMS; DATA={t: c})
                _tmp3033 = cls(TERMS, {t: c})
                return _tmp3033
            if _tmp3026==1:
                return self
            pairs = {}
            for t,c in ldata.iteritems():
                pairs[t] = _tmp3026 * c
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = cls(TERMS, pairs)
            coeff, terms = self._coeff_terms
            if terms is not None:
                c = coeff * _tmp3026
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp3026, self)
            return obj
        elif rhead is TERMS:
            #DIV_TERMS_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            
            if self==other:
                return cls.one
            lpairs = ldata
            rpairs = rdata
            if len(lpairs)==1:
                t1, c1 = lpairs.items()[0]
                if len(rpairs)==1:
                    t2, c2 = rpairs.items()[0]
                    c = div(c1, c2, cls)
                    if t2==t1:
                        return cls(NUMBER, c)
                    if c==1:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t1:1, t2:-1})
                        #NEWINSTANCE(OBJ=_tmp3061; HEAD=FACTORS; DATA={t1:1, t2:-1})
                        _tmp3061 = cls(FACTORS, {t1:1, t2:-1})
                        return _tmp3061
                    #NEWINSTANCE(OBJ=_tmp3054; HEAD=FACTORS; DATA={t1:1, t2:-1})
                    _tmp3054 = cls(FACTORS, {t1:1, t2:-1})
                else:
                    _tmp3054 = t1 / other
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp3054:c1})
                #NEWINSTANCE(OBJ=_tmp3082; HEAD=TERMS; DATA={_tmp3054:c1})
                _tmp3082 = cls(TERMS, {_tmp3054:c1})
                return _tmp3082
            elif len(rpairs)==1:
                t2, c2 = rpairs.items()[0]
                c = div(1, c2, cls)
                if t2==self:
                    return cls(NUMBER, c)
                _tmp3054 = self / t2
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp3054:c})
                #NEWINSTANCE(OBJ=_tmp3096; HEAD=TERMS; DATA={_tmp3054:c})
                _tmp3096 = cls(TERMS, {_tmp3054:c})
                return _tmp3096
            #RETURN_NEW(HEAD=FACTORS; DATA={self:1, other:-1})
            #NEWINSTANCE(OBJ=_tmp3110; HEAD=FACTORS; DATA={self:1, other:-1})
            _tmp3110 = cls(FACTORS, {self:1, other:-1})
            return _tmp3110
        elif rhead is FACTORS:
            #DIV_TERMS_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            lpairs = ldata
            if len(lpairs)==1:
                t, c = lpairs.items()[0]
                t = t / other
                if t==cls.one:
                    return cls(NUMBER, c)
                head, data = t.pair
                if head is NUMBER:
                    #RETURN_NEW(HEAD=NUMBER; DATA=data * c)
                    #NEWINSTANCE(OBJ=_tmp3131; HEAD=NUMBER; DATA=data * c)
                    _tmp3131 = cls(NUMBER, data * c)
                    return _tmp3131
                elif head is TERMS:
                    #MUL_TERMS_VALUE(LHS=t; LHSDATA=data; VALUE=c)
                    #MUL_VALUE_TERMS(VALUE=c; RHS=t; RHSDATA=data)
                    _tmp3152 = c
                    if not _tmp3152:
                        return cls.zero
                    pairs = data
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp3152 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp3159; HEAD=TERMS; DATA={t: c})
                        _tmp3159 = cls(TERMS, {t: c})
                        return _tmp3159
                    if _tmp3152==1:
                        return t
                    pairs = {}
                    for t,c in data.iteritems():
                        pairs[t] = _tmp3152 * c
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                    obj = cls(TERMS, pairs)
                    coeff, terms = t._coeff_terms
                    if terms is not None:
                        c = coeff * _tmp3152
                        if not c==1:
                            obj._coeff_terms = (c, terms)
                    else:
                        obj._coeff_terms = (_tmp3152, t)
                    return obj
                else:
                    #MUL_SYMBOL_VALUE(LHS=t; LHSDATA=data; VALUE=c)
                    #MUL_VALUE_SYMBOL(VALUE=c; RHS=t; RHSDATA=data)
                    _tmp3187 = c
                    if not _tmp3187:
                        return cls.zero
                    if _tmp3187==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp3187})
                    #NEWINSTANCE(OBJ=_tmp3194; HEAD=TERMS; DATA={t: _tmp3187})
                    _tmp3194 = cls(TERMS, {t: _tmp3187})
                    return _tmp3194
            #DIV_SYMBOL_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==self:
                    c = 1 - c
                    if not c:
                        return cls.one
                    if c==1:
                        return t
                    else:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp3215; HEAD=FACTORS; DATA={t: c})
                        _tmp3215 = cls(FACTORS, {t: c})
                        return _tmp3215
                #RETURN_NEW(HEAD=FACTORS; DATA={t: -c, self: 1})
                #NEWINSTANCE(OBJ=_tmp3229; HEAD=FACTORS; DATA={t: -c, self: 1})
                _tmp3229 = cls(FACTORS, {t: -c, self: 1})
                return _tmp3229
            #NEG_DICT_VALUES(DICT_IN=rdata; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in rdata.iteritems()])
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self; RHSDATA=ldata)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp3257 = pairs.get(self)
            if _tmp3257 is None:
                pairs[self] =  1
            else:
                _tmp3257 = _tmp3257 + 1
                if _tmp3257:
                    pairs[self] = _tmp3257
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp3271; HEAD=FACTORS; DATA=pairs)
            _tmp3271 = cls(FACTORS, pairs)
            return _tmp3271
        else:
            #DIV_TERMS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==other:
                    return cls(NUMBER, c)
                if t.head is FACTORS:
                    _tmp3285 = t / other
                    #RETURN_NEW(HEAD=TERMS; DATA={_tmp3285: c})
                    #NEWINSTANCE(OBJ=_tmp3292; HEAD=TERMS; DATA={_tmp3285: c})
                    _tmp3292 = cls(TERMS, {_tmp3285: c})
                    return _tmp3292
                #NEWINSTANCE(OBJ=_tmp3285; HEAD=FACTORS; DATA={t:1, other: -1})
                _tmp3285 = cls(FACTORS, {t:1, other: -1})
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp3285: c})
                #NEWINSTANCE(OBJ=_tmp3313; HEAD=TERMS; DATA={_tmp3285: c})
                _tmp3313 = cls(TERMS, {_tmp3285: c})
                return _tmp3313
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp3327; HEAD=FACTORS; DATA={self: 1, other: -1})
            _tmp3327 = cls(FACTORS, {self: 1, other: -1})
            return _tmp3327
    elif lhead is FACTORS:
        if rhead is NUMBER:
            #DIV_FACTORS_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_FACTORS_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #MUL_FACTORS_VALUE(LHS=self; LHSDATA=ldata; VALUE=div(1,rdata,cls))
            #MUL_SYMBOL_VALUE(VALUE=div(1,rdata,cls); LHS=self; LHSDATA=ldata)
            #MUL_VALUE_SYMBOL(VALUE=div(1,rdata,cls); RHS=self; RHSDATA=ldata)
            _tmp3369 = div(1,rdata,cls)
            if not _tmp3369:
                return cls.zero
            if _tmp3369==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp3369})
            #NEWINSTANCE(OBJ=_tmp3376; HEAD=TERMS; DATA={self: _tmp3369})
            _tmp3376 = cls(TERMS, {self: _tmp3369})
            return _tmp3376
        elif rhead is TERMS:
            #DIV_FACTORS_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            rpairs = rdata
            if len(rpairs)==1:
                t, c = rpairs.items()[0]
                t = self / t
                c = div(1, c, cls)
                if t==cls.one:
                    return cls(NUMBER, c)
                head, data = t.pair
                if head is NUMBER:
                    #RETURN_NEW(HEAD=NUMBER; DATA=data * c)
                    #NEWINSTANCE(OBJ=_tmp3397; HEAD=NUMBER; DATA=data * c)
                    _tmp3397 = cls(NUMBER, data * c)
                    return _tmp3397
                elif head is TERMS:
                    #MUL_TERMS_VALUE(LHS=t; LHSDATA=data; VALUE=c)
                    #MUL_VALUE_TERMS(VALUE=c; RHS=t; RHSDATA=data)
                    _tmp3418 = c
                    if not _tmp3418:
                        return cls.zero
                    pairs = data
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp3418 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp3425; HEAD=TERMS; DATA={t: c})
                        _tmp3425 = cls(TERMS, {t: c})
                        return _tmp3425
                    if _tmp3418==1:
                        return t
                    pairs = {}
                    for t,c in data.iteritems():
                        pairs[t] = _tmp3418 * c
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                    obj = cls(TERMS, pairs)
                    coeff, terms = t._coeff_terms
                    if terms is not None:
                        c = coeff * _tmp3418
                        if not c==1:
                            obj._coeff_terms = (c, terms)
                    else:
                        obj._coeff_terms = (_tmp3418, t)
                    return obj
                else:
                    #MUL_SYMBOL_VALUE(LHS=t; LHSDATA=data; VALUE=c)
                    #MUL_VALUE_SYMBOL(VALUE=c; RHS=t; RHSDATA=data)
                    _tmp3453 = c
                    if not _tmp3453:
                        return cls.zero
                    if _tmp3453==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp3453})
                    #NEWINSTANCE(OBJ=_tmp3460; HEAD=TERMS; DATA={t: _tmp3453})
                    _tmp3460 = cls(TERMS, {t: _tmp3453})
                    return _tmp3460
            #DIV_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #DIV_DICT_SYMBOL(RHS=other; RHSDATA=rdata; DICT=pairs)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp3488 = pairs.get(other)
            if _tmp3488 is None:
                pairs[other] =  -1
            else:
                _tmp3488 = _tmp3488 + -1
                if _tmp3488:
                    pairs[other] = _tmp3488
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp3502; HEAD=FACTORS; DATA=pairs)
            _tmp3502 = cls(FACTORS, pairs)
            return _tmp3502
        elif rhead is FACTORS:
            #DIV_FACTORS_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            pairs_get = pairs.get
            number = 1
            for t,c in rdata.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=-; USIGN=-; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                _tmp3523 = pairs_get(t)
                if _tmp3523 is None:
                    pairs[t] = - c
                else:
                    _tmp3523 = _tmp3523 - c
                    if type(_tmp3523) is cls and _tmp3523.head is NUMBER:
                        _tmp3523 = _tmp3523.data
                    if _tmp3523:
                        if t.head is NUMBER:
                            del pairs[t]
                            z, sym = try_power(t.data, _tmp3523)
                            if sym:
                                for t1, c1 in sym:
                                    #NEWINSTANCE(OBJ=tt; HEAD=NUMBER; DATA=t1)
                                    tt = cls(NUMBER, t1)
                                    #ADD_TERM_VALUE_DICT(DICT=pairs; DICT_GET=pairs_get; TERM=tt; VALUE=c1; SIGN=+; USIGN=)
                                    _tmp3537 = pairs_get(tt)
                                    if _tmp3537 is None:
                                        pairs[tt] =  c1
                                    else:
                                        _tmp3537 = _tmp3537 + c1
                                        if _tmp3537:
                                            pairs[tt] = _tmp3537
                                        else:
                                            del pairs[tt]
                            number = number * z
                        else:
                            pairs[t] = _tmp3523
                    else:
                        del pairs[t]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   if number==1:
                       return t
                   #RETURN_NEW(HEAD=TERMS; DATA={t: number})
                   #NEWINSTANCE(OBJ=_tmp3551; HEAD=TERMS; DATA={t: number})
                   _tmp3551 = cls(TERMS, {t: number})
                   return _tmp3551
               if t==cls.one:
                   return number
            if number==1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp3565; HEAD=FACTORS; DATA=pairs)
                _tmp3565 = cls(FACTORS, pairs)
                return _tmp3565
            #NEWINSTANCE(OBJ=_tmp3516; HEAD=FACTORS; DATA=pairs)
            _tmp3516 = cls(FACTORS, pairs)
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp3516: number})
            #NEWINSTANCE(OBJ=_tmp3586; HEAD=TERMS; DATA={_tmp3516: number})
            _tmp3586 = cls(TERMS, {_tmp3516: number})
            return _tmp3586
        else:
            #DIV_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #DIV_DICT_SYMBOL(RHS=other; RHSDATA=rdata; DICT=pairs)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp3614 = pairs.get(other)
            if _tmp3614 is None:
                pairs[other] =  -1
            else:
                _tmp3614 = _tmp3614 + -1
                if _tmp3614:
                    pairs[other] = _tmp3614
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp3628; HEAD=FACTORS; DATA=pairs)
            _tmp3628 = cls(FACTORS, pairs)
            return _tmp3628
    else:
        if rhead is NUMBER:
            #DIV_SYMBOL_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_SYMBOL_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #MUL_VALUE_SYMBOL(VALUE=div(1, rdata, cls); RHS=self; RHSDATA=ldata)
            _tmp3656 = div(1, rdata, cls)
            if not _tmp3656:
                return cls.zero
            if _tmp3656==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp3656})
            #NEWINSTANCE(OBJ=_tmp3663; HEAD=TERMS; DATA={self: _tmp3656})
            _tmp3663 = cls(TERMS, {self: _tmp3656})
            return _tmp3663
        elif rhead is TERMS:
            #DIV_SYMBOL_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = rdata
            if len(pairs)==1:
                t,c = pairs.items()[0]
                if self==t:
                    return cls(NUMBER, div(1, c, cls))
                #NEWINSTANCE(OBJ=_tmp3677; HEAD=FACTORS; DATA={self:1, t:-1})
                _tmp3677 = cls(FACTORS, {self:1, t:-1})
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp3677: div(1, c, cls)})
                #NEWINSTANCE(OBJ=_tmp3691; HEAD=TERMS; DATA={_tmp3677: div(1, c, cls)})
                _tmp3691 = cls(TERMS, {_tmp3677: div(1, c, cls)})
                return _tmp3691
            #RETURN_NEW(HEAD=FACTORS; DATA={self:1, other:-1})
            #NEWINSTANCE(OBJ=_tmp3705; HEAD=FACTORS; DATA={self:1, other:-1})
            _tmp3705 = cls(FACTORS, {self:1, other:-1})
            return _tmp3705
        elif rhead is FACTORS:
            #DIV_SYMBOL_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==self:
                    c = 1 - c
                    if not c:
                        return cls.one
                    if c==1:
                        return t
                    else:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp3726; HEAD=FACTORS; DATA={t: c})
                        _tmp3726 = cls(FACTORS, {t: c})
                        return _tmp3726
                #RETURN_NEW(HEAD=FACTORS; DATA={t: -c, self: 1})
                #NEWINSTANCE(OBJ=_tmp3740; HEAD=FACTORS; DATA={t: -c, self: 1})
                _tmp3740 = cls(FACTORS, {t: -c, self: 1})
                return _tmp3740
            #NEG_DICT_VALUES(DICT_IN=rdata; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in rdata.iteritems()])
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self; RHSDATA=ldata)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp3768 = pairs.get(self)
            if _tmp3768 is None:
                pairs[self] =  1
            else:
                _tmp3768 = _tmp3768 + 1
                if _tmp3768:
                    pairs[self] = _tmp3768
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp3782; HEAD=FACTORS; DATA=pairs)
            _tmp3782 = cls(FACTORS, pairs)
            return _tmp3782
        else:
            #DIV_SYMBOL_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            if self == other:
                return cls.one
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp3803; HEAD=FACTORS; DATA={self: 1, other: -1})
            _tmp3803 = cls(FACTORS, {self: 1, other: -1})
            return _tmp3803
