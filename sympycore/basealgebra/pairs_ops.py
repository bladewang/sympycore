"""
This file is generated by the sympycore/basealgebra/mk_pairs.py script.
DO NOT CHANGE THIS FILE DIRECTLY!!!
"""

from ..utils import NUMBER, SYMBOL, TERMS, FACTORS, RedirectOperation
from ..arithmetic.numbers import div



def neg_method(self, NUMBER=NUMBER, TERMS=TERMS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if lhead is NUMBER:
        #NEG_NUMBER(OP=self)
        #RETURN_NEW(HEAD=NUMBER; DATA=-self.data)
        #NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=-self.data)
        obj = new(cls)
        obj.head = NUMBER
        obj.data = -self.data
        return obj
    elif lhead is TERMS:
        #NEG_TERMS(OP=self)
        op_pairs = self.data
        if len(op_pairs)==1:
            t, c = op_pairs.items()[0]
            c = -c
            if c==1:
                return t
            #RETURN_NEW(HEAD=TERMS; DATA={t:c})
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t:c})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {t:c}
            return obj
        #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
        pairs = dict([(t, -c) for t,c in self.data.iteritems()])
        #RETURN_NEW(HEAD=TERMS; DATA=pairs)
        #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
        obj = new(cls)
        obj.head = TERMS
        obj.data = pairs
        return obj
    else:
        #NEG_SYMBOL(OP=self)
        #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
        #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={self: -1})
        obj = new(cls)
        obj.head = TERMS
        obj.data = {self: -1}
        return obj

def rsub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #SUB_VALUE_NUMBER(VALUE=other; RHS=self)
            #RETURN_NEW(HEAD=NUMBER; DATA=other - self.data)
            #NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=other - self.data)
            obj = new(cls)
            obj.head = NUMBER
            obj.data = other - self.data
            return obj
        elif lhead is TERMS:
            #SUB_VALUE_TERMS(VALUE=other; RHS=self)
            _tmp17 = other
            try:
                if not _tmp17:
                    #NEG_TERMS(OP=self)
                    op_pairs = self.data
                    if len(op_pairs)==1:
                        t, c = op_pairs.items()[0]
                        c = -c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                        #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t:c})
                        obj = new(cls)
                        obj.head = TERMS
                        obj.data = {t:c}
                        return obj
                    #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
                    pairs = dict([(t, -c) for t,c in self.data.iteritems()])
                    #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = pairs
                    return obj
            except RedirectOperation:
                pass
            #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in self.data.iteritems()])
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp17)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp17; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = _tmp17
            else:
                c = b + _tmp17
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #SUB_VALUE_SYMBOL(VALUE=other; RHS=self)
            _tmp29 = other
            try:
                if not _tmp29:
                    #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={self: -1})
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = {self: -1}
                    return obj
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp29, self: -1})
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={cls.one: _tmp29, self: -1})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {cls.one: _tmp29, self: -1}
            return obj
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other - self

def add_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #ADD_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data + other)
                #NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=self.data + other)
                obj = new(cls)
                obj.head = NUMBER
                obj.data = self.data + other
                return obj
            elif lhead is TERMS:
                #ADD_TERMS_VALUE(VALUE=other; LHS=self)
                #ADD_VALUE_TERMS(VALUE=other; RHS=self)
                _tmp38 = other
                try:
                    if not _tmp38:
                        return self
                except RedirectOperation:
                    pass
                pairs = dict(self.data)
                one = cls.one
                #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp38)
                #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp38; DICT=pairs; DICT_GET=pairs.get)
                b = pairs.get(one)
                if b is None:
                    pairs[one] = _tmp38
                else:
                    c = b + _tmp38
                    try:
                        if c:
                            pairs[one] = c
                        else:
                            del pairs[one]
                    except RedirectOperation:
                        pairs[one] = c
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                obj = new(cls)
                obj.head = TERMS
                obj.data = pairs
                return obj
            else:
                #ADD_SYMBOL_VALUE(VALUE=other; LHS=self)
                #ADD_VALUE_SYMBOL(VALUE=other; RHS=self)
                _tmp44 = other
                try:
                    if not _tmp44:
                        return self
                except RedirectOperation:
                    pass
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp44, self: 1})
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={cls.one: _tmp44, self: 1})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {cls.one: _tmp44, self: 1}
                return obj
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #ADD_NUMBER_NUMBER(LHS=self; RHS=other)
            #ADD_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data + other.data)
            #NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=self.data + other.data)
            obj = new(cls)
            obj.head = NUMBER
            obj.data = self.data + other.data
            return obj
        elif rhead is TERMS:
            #ADD_NUMBER_TERMS(LHS=self; RHS=other)
            #ADD_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp52 = self.data
            try:
                if not _tmp52:
                    return other
            except RedirectOperation:
                pass
            pairs = dict(other.data)
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp52)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp52; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = _tmp52
            else:
                c = b + _tmp52
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #ADD_NUMBER_SYMBOL(LHS=self; RHS=other)
            #ADD_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp58 = self.data
            try:
                if not _tmp58:
                    return other
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp58, other: 1})
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={cls.one: _tmp58, other: 1})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {cls.one: _tmp58, other: 1}
            return obj
    elif lhead is TERMS:
        if rhead is NUMBER:
            #ADD_TERMS_NUMBER(LHS=self; RHS=other)
            #ADD_TERMS_VALUE(VALUE=other.data; LHS=self)
            #ADD_VALUE_TERMS(VALUE=other.data; RHS=self)
            _tmp63 = other.data
            try:
                if not _tmp63:
                    return self
            except RedirectOperation:
                pass
            pairs = dict(self.data)
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp63)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp63; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = _tmp63
            else:
                c = b + _tmp63
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        elif rhead is TERMS:
            #ADD_TERMS_TERMS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            for t,c in other.data.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=c; DICT=pairs; DICT_GET=pairs_get)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = c
                else:
                    c = b + c
                    try:
                        if c:
                            pairs[t] = c
                        else:
                            del pairs[t]
                    except RedirectOperation:
                        pairs[t] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #ADD_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[other] = c
                    else:
                        del pairs[other]
                except RedirectOperation:
                    pairs[other] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
    else:
        if rhead is NUMBER:
            #ADD_SYMBOL_NUMBER(LHS=self; RHS=other)
            #ADD_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #ADD_VALUE_SYMBOL(VALUE=other.data; RHS=self)
            _tmp80 = other.data
            try:
                if not _tmp80:
                    return self
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp80, self: 1})
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={cls.one: _tmp80, self: 1})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {cls.one: _tmp80, self: 1}
            return obj
        elif rhead is TERMS:
            #ADD_SYMBOL_TERMS(LHS=self; RHS=other)
            #ADD_TERMS_SYMBOL(LHS=other; RHS=self)
            pairs = dict(other.data)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[self] = c
                    else:
                        del pairs[self]
                except RedirectOperation:
                    pairs[self] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #ADD_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj

def sub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #SUB_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data - other)
                #NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=self.data - other)
                obj = new(cls)
                obj.head = NUMBER
                obj.data = self.data - other
                return obj
            elif lhead is TERMS:
                #SUB_TERMS_VALUE(VALUE=other; LHS=self)
                #ADD_VALUE_TERMS(VALUE=-other; RHS=self)
                _tmp96 = -other
                try:
                    if not _tmp96:
                        return self
                except RedirectOperation:
                    pass
                pairs = dict(self.data)
                one = cls.one
                #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp96)
                #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp96; DICT=pairs; DICT_GET=pairs.get)
                b = pairs.get(one)
                if b is None:
                    pairs[one] = _tmp96
                else:
                    c = b + _tmp96
                    try:
                        if c:
                            pairs[one] = c
                        else:
                            del pairs[one]
                    except RedirectOperation:
                        pairs[one] = c
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                obj = new(cls)
                obj.head = TERMS
                obj.data = pairs
                return obj
            else:
                #SUB_SYMBOL_VALUE(VALUE=other; LHS=self)
                #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; VALUE=-other)
                #ADD_VALUE_SYMBOL(VALUE=-other; RHS=self)
                _tmp103 = -other
                try:
                    if not _tmp103:
                        return self
                except RedirectOperation:
                    pass
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp103, self: 1})
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={cls.one: _tmp103, self: 1})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {cls.one: _tmp103, self: 1}
                return obj
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #SUB_NUMBER_NUMBER(LHS=self; RHS=other)
            #SUB_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data - other.data)
            #NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=self.data - other.data)
            obj = new(cls)
            obj.head = NUMBER
            obj.data = self.data - other.data
            return obj
        elif rhead is TERMS:
            #SUB_NUMBER_TERMS(LHS=self; RHS=other)
            #SUB_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp111 = self.data
            try:
                if not _tmp111:
                    #NEG_TERMS(OP=other)
                    op_pairs = other.data
                    if len(op_pairs)==1:
                        t, c = op_pairs.items()[0]
                        c = -c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                        #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t:c})
                        obj = new(cls)
                        obj.head = TERMS
                        obj.data = {t:c}
                        return obj
                    #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
                    pairs = dict([(t, -c) for t,c in other.data.iteritems()])
                    #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = pairs
                    return obj
            except RedirectOperation:
                pass
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp111)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp111; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = _tmp111
            else:
                c = b + _tmp111
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #SUB_NUMBER_SYMBOL(LHS=self; RHS=other)
            #SUB_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp124 = self.data
            try:
                if not _tmp124:
                    #RETURN_NEW(HEAD=TERMS; DATA={other: -1})
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={other: -1})
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = {other: -1}
                    return obj
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp124, other: -1})
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={cls.one: _tmp124, other: -1})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {cls.one: _tmp124, other: -1}
            return obj
    elif lhead is TERMS:
        if rhead is NUMBER:
            #SUB_TERMS_NUMBER(LHS=self; RHS=other)
            #SUB_TERMS_VALUE(VALUE=other.data; LHS=self)
            #ADD_VALUE_TERMS(VALUE=-other.data; RHS=self)
            _tmp131 = -other.data
            try:
                if not _tmp131:
                    return self
            except RedirectOperation:
                pass
            pairs = dict(self.data)
            one = cls.one
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp131)
            #ADD_TERM_VALUE_DICT(TERM=one; VALUE=_tmp131; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(one)
            if b is None:
                pairs[one] = _tmp131
            else:
                c = b + _tmp131
                try:
                    if c:
                        pairs[one] = c
                    else:
                        del pairs[one]
                except RedirectOperation:
                    pairs[one] = c
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        elif rhead is TERMS:
            #SUB_TERMS_TERMS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            for t,c in other.data.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=-c; DICT=pairs; DICT_GET=pairs_get)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = -c
                else:
                    c = b + -c
                    try:
                        if c:
                            pairs[t] = c
                        else:
                            del pairs[t]
                    except RedirectOperation:
                        pairs[t] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #SUB_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = -1
            else:
                c = b + -1
                try:
                    if c:
                        pairs[other] = c
                    else:
                        del pairs[other]
                except RedirectOperation:
                    pairs[other] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
    else:
        if rhead is NUMBER:
            #SUB_SYMBOL_NUMBER(LHS=self; RHS=other)
            #SUB_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; VALUE=-other.data)
            #ADD_VALUE_SYMBOL(VALUE=-other.data; RHS=self)
            _tmp149 = -other.data
            try:
                if not _tmp149:
                    return self
            except RedirectOperation:
                pass
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp149, self: 1})
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={cls.one: _tmp149, self: 1})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {cls.one: _tmp149, self: 1}
            return obj
        elif rhead is TERMS:
            #SUB_SYMBOL_TERMS(LHS=self; RHS=other)
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[self] = c
                    else:
                        del pairs[self]
                except RedirectOperation:
                    pairs[self] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        else:
            #SUB_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                return cls.zero
            #RETURN_NEW(HEAD=TERMS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={self: 1, other: -1})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {self: 1, other: -1}
            return obj

def mul_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #MUL_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data * other)
                #NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=self.data * other)
                obj = new(cls)
                obj.head = NUMBER
                obj.data = self.data * other
                return obj
            elif lhead is TERMS:
                #MUL_TERMS_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_TERMS(VALUE=other; RHS=self)
                _tmp165 = other
                try:
                    not _tmp165
                except RedirectOperation:
                    pairs = self.data
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp165 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t: c})
                        obj = new(cls)
                        obj.head = TERMS
                        obj.data = {t: c}
                        return obj
                    #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp165})
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={self: _tmp165})
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = {self: _tmp165}
                    return obj
                if _tmp165==1:
                    return self
                pairs = {}
                for t,c in self.data.iteritems():
                    c = _tmp165 * c
                    try:
                        if c:
                            pairs[t] = c
                        else:
                            del pairs[t]
                    except RedirectOperation:
                        d[t] = c
                #CANONIZE_TERMS_DICT(DICT=pairs)
                if not pairs:
                    return cls.zero
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                obj = new(cls)
                obj.head = TERMS
                obj.data = pairs
                return obj
            elif lhead is FACTORS:
                #MUL_FACTORS_VALUE(VALUE=other; LHS=self)
                #MUL_SYMBOL_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=other; RHS=self)
                _tmp175 = other
                try:
                    if not _tmp175:
                        return cls.zero
                except RedirectOperation:
                    pass
                if _tmp175==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp175})
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={self: _tmp175})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {self: _tmp175}
                return obj
            else:
                #MUL_SYMBOL_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=other; RHS=self)
                _tmp179 = other
                try:
                    if not _tmp179:
                        return cls.zero
                except RedirectOperation:
                    pass
                if _tmp179==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp179})
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={self: _tmp179})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {self: _tmp179}
                return obj
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #MUL_NUMBER_NUMBER(LHS=self; RHS=other)
            #MUL_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data * other.data)
            #NEWINSTANCE(OBJ=obj; HEAD=NUMBER; DATA=self.data * other.data)
            obj = new(cls)
            obj.head = NUMBER
            obj.data = self.data * other.data
            return obj
        elif rhead is TERMS:
            #MUL_NUMBER_TERMS(LHS=self; RHS=other)
            #MUL_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp187 = self.data
            try:
                not _tmp187
            except RedirectOperation:
                pairs = other.data
                if len(pairs)==1:
                    t, c = pairs.items()[0]
                    c = _tmp187 * c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t: c})
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = {t: c}
                    return obj
                #RETURN_NEW(HEAD=TERMS; DATA={other: _tmp187})
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={other: _tmp187})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {other: _tmp187}
                return obj
            if _tmp187==1:
                return other
            pairs = {}
            for t,c in other.data.iteritems():
                c = _tmp187 * c
                try:
                    if c:
                        pairs[t] = c
                    else:
                        del pairs[t]
                except RedirectOperation:
                    d[t] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        elif rhead is FACTORS:
            #MUL_NUMBER_FACTORS(LHS=self; RHS=other)
            #MUL_SYMBOL_VALUE(VALUE=self.data; LHS=other)
            #MUL_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp197 = self.data
            try:
                if not _tmp197:
                    return cls.zero
            except RedirectOperation:
                pass
            if _tmp197==1:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={other: _tmp197})
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={other: _tmp197})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {other: _tmp197}
            return obj
        else:
            #MUL_NUMBER_SYMBOL(LHS=self; RHS=other)
            #MUL_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp201 = self.data
            try:
                if not _tmp201:
                    return cls.zero
            except RedirectOperation:
                pass
            if _tmp201==1:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={other: _tmp201})
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={other: _tmp201})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {other: _tmp201}
            return obj
    elif lhead is TERMS:
        if rhead is NUMBER:
            #MUL_TERMS_NUMBER(LHS=self; RHS=other)
            #MUL_TERMS_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_TERMS(VALUE=other.data; RHS=self)
            _tmp206 = other.data
            try:
                not _tmp206
            except RedirectOperation:
                pairs = self.data
                if len(pairs)==1:
                    t, c = pairs.items()[0]
                    c = _tmp206 * c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t: c})
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = {t: c}
                    return obj
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp206})
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={self: _tmp206})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {self: _tmp206}
                return obj
            if _tmp206==1:
                return self
            pairs = {}
            for t,c in self.data.iteritems():
                c = _tmp206 * c
                try:
                    if c:
                        pairs[t] = c
                    else:
                        del pairs[t]
                except RedirectOperation:
                    d[t] = c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            return obj
        elif rhead is TERMS:
            #MUL_TERMS_TERMS(LHS=self; RHS=other)
            lpairs = self.data
            rpairs = other.data
            if len(lpairs)==1:
                t1,c1 = lpairs.items()[0]
                if len(rpairs)==1:
                    t2,c2 = rpairs.items()[0]
                    t = t1 * t2
                    c = c1 * c2
                    if t == cls.one:
                        return cls.convert(c)
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t: c})
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = {t: c}
                    return obj
                t = t1 * other
                #RETURN_NEW(HEAD=TERMS; DATA={t: c1})
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t: c1})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {t: c1}
                return obj
            elif len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                t = t1 * self
                #RETURN_NEW(HEAD=TERMS; DATA={t: c1})
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t: c1})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {t: c1}
                return obj
            if self==other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = new(cls)
            obj.head = FACTORS
            obj.data = pairs
            return obj
        elif rhead is FACTORS:
            #MUL_TERMS_FACTORS(LHS=self; RHS=other)
            #MUL_FACTORS_TERMS(LHS=other; RHS=self)
            rpairs = self.data
            if len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                t = t1 * other
                #RETURN_NEW(HEAD=TERMS; DATA={t: c1})
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t: c1})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {t: c1}
                return obj
            #MUL_FACTORS_SYMBOL(LHS=other; RHS=self)
            pairs = dict(other.data)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[self] = c
                    else:
                        del pairs[self]
                except RedirectOperation:
                    pairs[self] = c
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = new(cls)
            obj.head = FACTORS
            obj.data = pairs
            return obj
        else:
            #MUL_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = self.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                t = t * other
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t: c})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {t: c}
                return obj
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: 1})
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA={self: 1, other: 1})
            obj = new(cls)
            obj.head = FACTORS
            obj.data = {self: 1, other: 1}
            return obj
    elif lhead is FACTORS:
        if rhead is NUMBER:
            #MUL_FACTORS_NUMBER(LHS=self; RHS=other)
            #MUL_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=other.data; RHS=self)
            _tmp239 = other.data
            try:
                if not _tmp239:
                    return cls.zero
            except RedirectOperation:
                pass
            if _tmp239==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp239})
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={self: _tmp239})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {self: _tmp239}
            return obj
        elif rhead is TERMS:
            #MUL_FACTORS_TERMS(LHS=self; RHS=other)
            rpairs = other.data
            if len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                t = t1 * self
                #RETURN_NEW(HEAD=TERMS; DATA={t: c1})
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t: c1})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {t: c1}
                return obj
            #MUL_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[other] = c
                    else:
                        del pairs[other]
                except RedirectOperation:
                    pairs[other] = c
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = new(cls)
            obj.head = FACTORS
            obj.data = pairs
            return obj
        elif rhead is FACTORS:
            #MUL_FACTORS_FACTORS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            number = 1
            for t,c in other.data.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                b = pairs_get(t)
                if b is None:
                    pairs[t] = c
                else:
                    _tmp251 = b + c
                    try:
                        if _tmp251:
                            if t.head is NUMBER:
                                r = t ** _tmp251
                                if r.head is NUMBER:
                                    number *= r
                                    del pairs[t]
                                else:
                                    pairs[t] = _tmp251
                            else:
                                pairs[t] = _tmp251
                        else:
                            del pairs[t]
                    except RedirectOperation:
                        pairs[t] = _tmp251
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t * number
               if t==cls.one:
                   return number
            if number is 1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
                obj = new(cls)
                obj.head = FACTORS
                obj.data = pairs
                return obj
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = new(cls)
            obj.head = FACTORS
            obj.data = pairs
            return obj * number
        else:
            #MUL_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(other)
            if b is None:
                pairs[other] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[other] = c
                    else:
                        del pairs[other]
                except RedirectOperation:
                    pairs[other] = c
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = new(cls)
            obj.head = FACTORS
            obj.data = pairs
            return obj
    else:
        if rhead is NUMBER:
            #MUL_SYMBOL_NUMBER(LHS=self; RHS=other)
            #MUL_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=other.data; RHS=self)
            _tmp263 = other.data
            try:
                if not _tmp263:
                    return cls.zero
            except RedirectOperation:
                pass
            if _tmp263==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp263})
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={self: _tmp263})
            obj = new(cls)
            obj.head = TERMS
            obj.data = {self: _tmp263}
            return obj
        elif rhead is TERMS:
            #MUL_SYMBOL_TERMS(LHS=self; RHS=other)
            #MUL_TERMS_SYMBOL(LHS=other; RHS=self)
            pairs = other.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                t = t * self
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA={t: c})
                obj = new(cls)
                obj.head = TERMS
                obj.data = {t: c}
                return obj
            #RETURN_NEW(HEAD=FACTORS; DATA={other: 1, self: 1})
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA={other: 1, self: 1})
            obj = new(cls)
            obj.head = FACTORS
            obj.data = {other: 1, self: 1}
            return obj
        elif rhead is FACTORS:
            #MUL_SYMBOL_FACTORS(LHS=self; RHS=other)
            #MUL_FACTORS_SYMBOL(LHS=other; RHS=self)
            pairs = dict(other.data)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get)
            b = pairs.get(self)
            if b is None:
                pairs[self] = 1
            else:
                c = b + 1
                try:
                    if c:
                        pairs[self] = c
                    else:
                        del pairs[self]
                except RedirectOperation:
                    pairs[self] = c
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = new(cls)
            obj.head = FACTORS
            obj.data = pairs
            return obj
        else:
            #MUL_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = new(cls)
            obj.head = FACTORS
            obj.data = pairs
            return obj
