"""
This file is generated by the src/mk_pairs_ops.py script.
See http://sympycore.googlecode.com/ for more information.

DO NOT CHANGE THIS FILE DIRECTLY!!!
"""

from ..utils import NUMBER, SYMBOL, TERMS, FACTORS
from ..arithmetic.numbers import (normalized_fraction,
  FractionTuple, try_power, numbertypes)
from ..arithmetic.infinity import Infinity


def div(a, b, cls):
    tb = type(b)
    if tb is int or tb is long:
        ta = type(a)
        if ta is int or tb is long:
            if not b:
                if not a:
                    return cls.undefined
                return cls.zoo
            return normalized_fraction(a, b)
        if not b:
            return a * cls.zoo
        if b == 1:
            return a
        return a * FractionTuple((1,b))
    return a / b




def neg_method(self, NUMBER=NUMBER, TERMS=TERMS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if lhead is NUMBER:
        #NEG_NUMBER(OP=self)
        #RETURN_NEW(HEAD=NUMBER; DATA=-self.data)
        #NEWINSTANCE(OBJ=_tmp9; HEAD=NUMBER; DATA=-self.data)
        _tmp9 = new(cls)
        _tmp9.head = NUMBER
        _tmp9.data = -self.data
        return _tmp9
    elif lhead is TERMS:
        #NEG_TERMS(OP=self)
        op_pairs = self.data
        if len(op_pairs)==1:
            t, c = op_pairs.items()[0]
            c = -c
            if c==1:
                return t
            #RETURN_NEW(HEAD=TERMS; DATA={t:c})
            #NEWINSTANCE(OBJ=_tmp30; HEAD=TERMS; DATA={t:c})
            _tmp30 = new(cls)
            _tmp30.head = TERMS
            _tmp30.data = {t:c}
            return _tmp30
        #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
        pairs = dict([(t, -c) for t,c in self.data.iteritems()])
        #RETURN_NEW(HEAD=TERMS; DATA=pairs)
        #NEWINSTANCE(OBJ=_tmp51; HEAD=TERMS; DATA=pairs)
        _tmp51 = new(cls)
        _tmp51.head = TERMS
        _tmp51.data = pairs
        return _tmp51
    else:
        #NEG_SYMBOL(OP=self)
        #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
        #NEWINSTANCE(OBJ=_tmp72; HEAD=TERMS; DATA={self: -1})
        _tmp72 = new(cls)
        _tmp72.head = TERMS
        _tmp72.data = {self: -1}
        return _tmp72

def rsub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #SUB_VALUE_NUMBER(VALUE=other; RHS=self)
            #RETURN_NEW(HEAD=NUMBER; DATA=other - self.data)
            #NEWINSTANCE(OBJ=_tmp93; HEAD=NUMBER; DATA=other - self.data)
            _tmp93 = new(cls)
            _tmp93.head = NUMBER
            _tmp93.data = other - self.data
            return _tmp93
        elif lhead is TERMS:
            #SUB_VALUE_TERMS(VALUE=other; RHS=self)
            _tmp107 = other
            if not _tmp107:
                #NEG_TERMS(OP=self)
                op_pairs = self.data
                if len(op_pairs)==1:
                    t, c = op_pairs.items()[0]
                    c = -c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                    #NEWINSTANCE(OBJ=_tmp121; HEAD=TERMS; DATA={t:c})
                    _tmp121 = new(cls)
                    _tmp121.head = TERMS
                    _tmp121.data = {t:c}
                    return _tmp121
                #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
                pairs = dict([(t, -c) for t,c in self.data.iteritems()])
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp142; HEAD=TERMS; DATA=pairs)
                _tmp142 = new(cls)
                _tmp142.head = TERMS
                _tmp142.data = pairs
                return _tmp142
            #NEG_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in self.data.iteritems()])
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp107)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp107; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp170 = pairs.get(cls.one)
            if _tmp170 is None:
                pairs[cls.one] =  _tmp107
            else:
                _tmp170 = _tmp170 + _tmp107
                if _tmp170:
                    pairs[cls.one] = _tmp170
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp177; HEAD=TERMS; DATA=pairs)
            _tmp177 = new(cls)
            _tmp177.head = TERMS
            _tmp177.data = pairs
            return _tmp177
        else:
            #SUB_VALUE_SYMBOL(VALUE=other; RHS=self)
            _tmp191 = other
            if not _tmp191:
                #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
                #NEWINSTANCE(OBJ=_tmp198; HEAD=TERMS; DATA={self: -1})
                _tmp198 = new(cls)
                _tmp198.head = TERMS
                _tmp198.data = {self: -1}
                return _tmp198
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp191, self: -1})
            #NEWINSTANCE(OBJ=_tmp212; HEAD=TERMS; DATA={cls.one: _tmp191, self: -1})
            _tmp212 = new(cls)
            _tmp212.head = TERMS
            _tmp212.data = {cls.one: _tmp191, self: -1}
            return _tmp212
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other - self

def rdiv_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #DIV_VALUE_NUMBER(VALUE=other; RHS=self)
            #RETURN_NEW2(HEAD=NUMBER; DATA=div(other, self.data, cls))
            _tmp233 = div(other, self.data, cls)
            if isinstance(_tmp233, Infinity):
                return _tmp233
            #RETURN_NEW(HEAD=NUMBER; DATA=_tmp233)
            #NEWINSTANCE(OBJ=_tmp240; HEAD=NUMBER; DATA=_tmp233)
            _tmp240 = new(cls)
            _tmp240.head = NUMBER
            _tmp240.data = _tmp233
            return _tmp240
        elif lhead is TERMS:
            #DIV_VALUE_TERMS(VALUE=other; RHS=self)
            _tmp254 = other
            if not _tmp254:
                return cls.zero
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = div(other, c, cls)
                t = 1/t
                if c==1:
                    return t
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp261; HEAD=TERMS; DATA={t: c})
                _tmp261 = new(cls)
                _tmp261.head = TERMS
                _tmp261.data = {t: c}
                return _tmp261
            #NEWINSTANCE(OBJ=_tmp254; HEAD=FACTORS; DATA={self: -1})
            _tmp254 = new(cls)
            _tmp254.head = FACTORS
            _tmp254.data = {self: -1}
            if other==1:
                return _tmp254
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp254: other})
            #NEWINSTANCE(OBJ=_tmp282; HEAD=TERMS; DATA={_tmp254: other})
            _tmp282 = new(cls)
            _tmp282.head = TERMS
            _tmp282.data = {_tmp254: other}
            return _tmp282
        elif lhead is FACTORS:
            #DIV_VALUE_FACTORS(VALUE=other; RHS=self)
            
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = -c
                if c==1:
                    return t * other
                new_pairs = {t: c}
            else:
                #NEG_DICT_VALUES(DICT_IN=pairs; DICT_OUT=new_pairs)
                new_pairs = dict([(t, -c) for t,c in pairs.iteritems()])
            #NEWINSTANCE(OBJ=_tmp296; HEAD=FACTORS; DATA=new_pairs)
            _tmp296 = new(cls)
            _tmp296.head = FACTORS
            _tmp296.data = new_pairs
            if other==1:
                return _tmp296
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp296: other})
            #NEWINSTANCE(OBJ=_tmp317; HEAD=TERMS; DATA={_tmp296: other})
            _tmp317 = new(cls)
            _tmp317.head = TERMS
            _tmp317.data = {_tmp296: other}
            return _tmp317
        else:
            #DIV_VALUE_SYMBOL(VALUE=other; RHS=self)
            _tmp331 = other
            if not _tmp331:
                return cls.zero
            #NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={self: -1})
            obj2 = new(cls)
            obj2.head = FACTORS
            obj2.data = {self: -1}
            if _tmp331==1:
                return obj2
            #RETURN_NEW(HEAD=TERMS; DATA={obj2: _tmp331})
            #NEWINSTANCE(OBJ=_tmp345; HEAD=TERMS; DATA={obj2: _tmp331})
            _tmp345 = new(cls)
            _tmp345.head = TERMS
            _tmp345.data = {obj2: _tmp331}
            return _tmp345
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other / self

def pow_method(self, other, z = None, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    type_other = type(other)
    if type_other is cls and other.head is NUMBER:
        other = other.data
        type_other = type(other)
    if type_other is int or type_other is long:
        if not other:
            return cls.one
        if other==1:
            return self
        if lhead is NUMBER:
            #POW_NUMBER_INT(VALUE=other; LHS=self)
            if other < 0:
                #RETURN_NEW(HEAD=NUMBER; DATA=div(1, (self.data)**(-other), cls))
                #NEWINSTANCE(OBJ=_tmp366; HEAD=NUMBER; DATA=div(1, (self.data)**(-other), cls))
                _tmp366 = new(cls)
                _tmp366.head = NUMBER
                _tmp366.data = div(1, (self.data)**(-other), cls)
                return _tmp366
            #RETURN_NEW(HEAD=NUMBER; DATA=(self.data)**(other))
            #NEWINSTANCE(OBJ=_tmp380; HEAD=NUMBER; DATA=(self.data)**(other))
            _tmp380 = new(cls)
            _tmp380.head = NUMBER
            _tmp380.data = (self.data)**(other)
            return _tmp380
        elif lhead is TERMS:
            #POW_TERMS_INT(VALUE=other; LHS=self)
            pairs = self.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                if other < 0:
                    c = div(1, c**(-other), cls)
                else:
                    c = c ** (other)
                t = t**(other)
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                #NEWINSTANCE(OBJ=_tmp401; HEAD=TERMS; DATA={t:c})
                _tmp401 = new(cls)
                _tmp401.head = TERMS
                _tmp401.data = {t:c}
                return _tmp401
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp415; HEAD=FACTORS; DATA={self: other})
            _tmp415 = new(cls)
            _tmp415.head = FACTORS
            _tmp415.data = {self: other}
            return _tmp415
        elif lhead is FACTORS:
            #POW_FACTORS_INT(VALUE=other; LHS=self)
            #MUL_DICT_VALUES(DICT_IN=self.data; DICT_OUT=pairs; OP=other)
            pairs = dict([(t, c*other) for t,c in self.data.iteritems()])
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if c==1:
                    return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp443; HEAD=FACTORS; DATA=pairs)
            _tmp443 = new(cls)
            _tmp443.head = FACTORS
            _tmp443.data = pairs
            return _tmp443
        else:
            #POW_SYMBOL_INT(VALUE=other; LHS=self)
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp464; HEAD=FACTORS; DATA={self: other})
            _tmp464 = new(cls)
            _tmp464.head = FACTORS
            _tmp464.data = {self: other}
            return _tmp464
    if lhead is NUMBER and isinstance(other, cls.exptypes):
        #POW_NUMBER_VALUE(VALUE=other; LHS=self)
        z, sym = try_power(self.data, other)
        if not sym:
            #RETURN_NEW(HEAD=NUMBER; DATA=z)
            #NEWINSTANCE(OBJ=_tmp485; HEAD=NUMBER; DATA=z)
            _tmp485 = new(cls)
            _tmp485.head = NUMBER
            _tmp485.data = z
            return _tmp485
        factors = {}
        for t,c in sym:
            factors[cls.convert(t)] = c
        #NEWINSTANCE(OBJ=_tmp478; HEAD=FACTORS; DATA=factors)
        _tmp478 = new(cls)
        _tmp478.head = FACTORS
        _tmp478.data = factors
        if z==1:
            return _tmp478
        #RETURN_NEW(HEAD=TERMS; DATA={_tmp478: z})
        #NEWINSTANCE(OBJ=_tmp506; HEAD=TERMS; DATA={_tmp478: z})
        _tmp506 = new(cls)
        _tmp506.head = TERMS
        _tmp506.data = {_tmp478: z}
        return _tmp506
    if type_other is FractionTuple:
        if lhead is TERMS:
            #POW_TERMS_FRAC(VALUE=other; LHS=self)
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if isinstance(c, numbertypes) and not c==-1:
                    if c < 0:
                        z, sym = try_power(-c, other)
                        factors = {-t: other}
                    else:
                        z, sym = try_power(c, other)
                        factors = {t: other}
                    for t,c in sym:
                        factors[cls.convert(t)] = c
                    #NEWINSTANCE(OBJ=_tmp520; HEAD=FACTORS; DATA=factors)
                    _tmp520 = new(cls)
                    _tmp520.head = FACTORS
                    _tmp520.data = factors
                    if z==1:
                        return _tmp520
                    #RETURN_NEW(HEAD=TERMS; DATA={_tmp520: z})
                    #NEWINSTANCE(OBJ=_tmp534; HEAD=TERMS; DATA={_tmp520: z})
                    _tmp534 = new(cls)
                    _tmp534.head = TERMS
                    _tmp534.data = {_tmp520: z}
                    return _tmp534
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp548; HEAD=FACTORS; DATA={self: other})
            _tmp548 = new(cls)
            _tmp548.head = FACTORS
            _tmp548.data = {self: other}
            return _tmp548
        else:
            #POW_SYMBOL_FRAC(VALUE=other; LHS=self)
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp569; HEAD=FACTORS; DATA={self: other})
            _tmp569 = new(cls)
            _tmp569.head = FACTORS
            _tmp569.data = {self: other}
            return _tmp569
    if type_other is cls or isinstance(other, cls.exptypes):
        if lhead is FACTORS:
            #POW_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                tc = type(c)
                if tc is int or tc is long:
                    #RETURN_NEW(HEAD=FACTORS; DATA={t: other * c})
                    #NEWINSTANCE(OBJ=_tmp590; HEAD=FACTORS; DATA={t: other * c})
                    _tmp590 = new(cls)
                    _tmp590.head = FACTORS
                    _tmp590.data = {t: other * c}
                    return _tmp590
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp604; HEAD=FACTORS; DATA={self: other})
            _tmp604 = new(cls)
            _tmp604.head = FACTORS
            _tmp604.data = {self: other}
            return _tmp604
        #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
        #NEWINSTANCE(OBJ=_tmp618; HEAD=FACTORS; DATA={self: other})
        _tmp618 = new(cls)
        _tmp618.head = FACTORS
        _tmp618.data = {self: other}
        return _tmp618
    return NotImplemented

def add_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #ADD_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data + other)
                #NEWINSTANCE(OBJ=_tmp639; HEAD=NUMBER; DATA=self.data + other)
                _tmp639 = new(cls)
                _tmp639.head = NUMBER
                _tmp639.data = self.data + other
                return _tmp639
            elif lhead is TERMS:
                #ADD_TERMS_VALUE(VALUE=other; LHS=self)
                #ADD_VALUE_TERMS(VALUE=other; RHS=self)
                _tmp660 = other
                if not _tmp660:
                    return self
                pairs = dict(self.data)
                #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp660)
                #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp660; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
                _tmp674 = pairs.get(cls.one)
                if _tmp674 is None:
                    pairs[cls.one] =  _tmp660
                else:
                    _tmp674 = _tmp674 + _tmp660
                    if _tmp674:
                        pairs[cls.one] = _tmp674
                    else:
                        del pairs[cls.one]
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp681; HEAD=TERMS; DATA=pairs)
                _tmp681 = new(cls)
                _tmp681.head = TERMS
                _tmp681.data = pairs
                return _tmp681
            else:
                #ADD_SYMBOL_VALUE(VALUE=other; LHS=self)
                #ADD_VALUE_SYMBOL(VALUE=other; RHS=self)
                _tmp702 = other
                if not _tmp702:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp702, self: 1})
                #NEWINSTANCE(OBJ=_tmp709; HEAD=TERMS; DATA={cls.one: _tmp702, self: 1})
                _tmp709 = new(cls)
                _tmp709.head = TERMS
                _tmp709.data = {cls.one: _tmp702, self: 1}
                return _tmp709
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #ADD_NUMBER_NUMBER(LHS=self; RHS=other)
            #ADD_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data + other.data)
            #NEWINSTANCE(OBJ=_tmp737; HEAD=NUMBER; DATA=self.data + other.data)
            _tmp737 = new(cls)
            _tmp737.head = NUMBER
            _tmp737.data = self.data + other.data
            return _tmp737
        elif rhead is TERMS:
            #ADD_NUMBER_TERMS(LHS=self; RHS=other)
            #ADD_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp758 = self.data
            if not _tmp758:
                return other
            pairs = dict(other.data)
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp758)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp758; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp772 = pairs.get(cls.one)
            if _tmp772 is None:
                pairs[cls.one] =  _tmp758
            else:
                _tmp772 = _tmp772 + _tmp758
                if _tmp772:
                    pairs[cls.one] = _tmp772
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp779; HEAD=TERMS; DATA=pairs)
            _tmp779 = new(cls)
            _tmp779.head = TERMS
            _tmp779.data = pairs
            return _tmp779
        else:
            #ADD_NUMBER_SYMBOL(LHS=self; RHS=other)
            #ADD_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp800 = self.data
            if not _tmp800:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp800, other: 1})
            #NEWINSTANCE(OBJ=_tmp807; HEAD=TERMS; DATA={cls.one: _tmp800, other: 1})
            _tmp807 = new(cls)
            _tmp807.head = TERMS
            _tmp807.data = {cls.one: _tmp800, other: 1}
            return _tmp807
    elif lhead is TERMS:
        if rhead is NUMBER:
            #ADD_TERMS_NUMBER(LHS=self; RHS=other)
            #ADD_TERMS_VALUE(VALUE=other.data; LHS=self)
            #ADD_VALUE_TERMS(VALUE=other.data; RHS=self)
            _tmp835 = other.data
            if not _tmp835:
                return self
            pairs = dict(self.data)
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp835)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp835; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp849 = pairs.get(cls.one)
            if _tmp849 is None:
                pairs[cls.one] =  _tmp835
            else:
                _tmp849 = _tmp849 + _tmp835
                if _tmp849:
                    pairs[cls.one] = _tmp849
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp856; HEAD=TERMS; DATA=pairs)
            _tmp856 = new(cls)
            _tmp856.head = TERMS
            _tmp856.data = pairs
            return _tmp856
        elif rhead is TERMS:
            #ADD_TERMS_TERMS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            for t,c in other.data.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=c; DICT=pairs; DICT_GET=pairs_get; SIGN=+; USIGN=)
                _tmp877 = pairs_get(t)
                if _tmp877 is None:
                    pairs[t] =  c
                else:
                    _tmp877 = _tmp877 + c
                    if _tmp877:
                        pairs[t] = _tmp877
                    else:
                        del pairs[t]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp891; HEAD=TERMS; DATA=pairs)
            _tmp891 = new(cls)
            _tmp891.head = TERMS
            _tmp891.data = pairs
            return _tmp891
        else:
            #ADD_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp912 = pairs.get(other)
            if _tmp912 is None:
                pairs[other] =  1
            else:
                _tmp912 = _tmp912 + 1
                if _tmp912:
                    pairs[other] = _tmp912
                else:
                    del pairs[other]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp926; HEAD=TERMS; DATA=pairs)
            _tmp926 = new(cls)
            _tmp926.head = TERMS
            _tmp926.data = pairs
            return _tmp926
    else:
        if rhead is NUMBER:
            #ADD_SYMBOL_NUMBER(LHS=self; RHS=other)
            #ADD_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #ADD_VALUE_SYMBOL(VALUE=other.data; RHS=self)
            _tmp954 = other.data
            if not _tmp954:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp954, self: 1})
            #NEWINSTANCE(OBJ=_tmp961; HEAD=TERMS; DATA={cls.one: _tmp954, self: 1})
            _tmp961 = new(cls)
            _tmp961.head = TERMS
            _tmp961.data = {cls.one: _tmp954, self: 1}
            return _tmp961
        elif rhead is TERMS:
            #ADD_SYMBOL_TERMS(LHS=self; RHS=other)
            #ADD_TERMS_SYMBOL(LHS=other; RHS=self)
            pairs = dict(other.data)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp989 = pairs.get(self)
            if _tmp989 is None:
                pairs[self] =  1
            else:
                _tmp989 = _tmp989 + 1
                if _tmp989:
                    pairs[self] = _tmp989
                else:
                    del pairs[self]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1003; HEAD=TERMS; DATA=pairs)
            _tmp1003 = new(cls)
            _tmp1003.head = TERMS
            _tmp1003.data = pairs
            return _tmp1003
        else:
            #ADD_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1024; HEAD=TERMS; DATA=pairs)
            _tmp1024 = new(cls)
            _tmp1024.head = TERMS
            _tmp1024.data = pairs
            return _tmp1024

def sub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #SUB_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data - other)
                #NEWINSTANCE(OBJ=_tmp1045; HEAD=NUMBER; DATA=self.data - other)
                _tmp1045 = new(cls)
                _tmp1045.head = NUMBER
                _tmp1045.data = self.data - other
                return _tmp1045
            elif lhead is TERMS:
                #SUB_TERMS_VALUE(VALUE=other; LHS=self)
                #ADD_VALUE_TERMS(VALUE=-other; RHS=self)
                _tmp1066 = -other
                if not _tmp1066:
                    return self
                pairs = dict(self.data)
                #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp1066)
                #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp1066; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
                _tmp1080 = pairs.get(cls.one)
                if _tmp1080 is None:
                    pairs[cls.one] =  _tmp1066
                else:
                    _tmp1080 = _tmp1080 + _tmp1066
                    if _tmp1080:
                        pairs[cls.one] = _tmp1080
                    else:
                        del pairs[cls.one]
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp1087; HEAD=TERMS; DATA=pairs)
                _tmp1087 = new(cls)
                _tmp1087.head = TERMS
                _tmp1087.data = pairs
                return _tmp1087
            else:
                #SUB_SYMBOL_VALUE(VALUE=other; LHS=self)
                #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; VALUE=-other)
                #ADD_VALUE_SYMBOL(VALUE=-other; RHS=self)
                _tmp1115 = -other
                if not _tmp1115:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp1115, self: 1})
                #NEWINSTANCE(OBJ=_tmp1122; HEAD=TERMS; DATA={cls.one: _tmp1115, self: 1})
                _tmp1122 = new(cls)
                _tmp1122.head = TERMS
                _tmp1122.data = {cls.one: _tmp1115, self: 1}
                return _tmp1122
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #SUB_NUMBER_NUMBER(LHS=self; RHS=other)
            #SUB_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data - other.data)
            #NEWINSTANCE(OBJ=_tmp1150; HEAD=NUMBER; DATA=self.data - other.data)
            _tmp1150 = new(cls)
            _tmp1150.head = NUMBER
            _tmp1150.data = self.data - other.data
            return _tmp1150
        elif rhead is TERMS:
            #SUB_NUMBER_TERMS(LHS=self; RHS=other)
            #SUB_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp1171 = self.data
            if not _tmp1171:
                #NEG_TERMS(OP=other)
                op_pairs = other.data
                if len(op_pairs)==1:
                    t, c = op_pairs.items()[0]
                    c = -c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                    #NEWINSTANCE(OBJ=_tmp1185; HEAD=TERMS; DATA={t:c})
                    _tmp1185 = new(cls)
                    _tmp1185.head = TERMS
                    _tmp1185.data = {t:c}
                    return _tmp1185
                #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
                pairs = dict([(t, -c) for t,c in other.data.iteritems()])
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp1206; HEAD=TERMS; DATA=pairs)
                _tmp1206 = new(cls)
                _tmp1206.head = TERMS
                _tmp1206.data = pairs
                return _tmp1206
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp1171)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp1171; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1234 = pairs.get(cls.one)
            if _tmp1234 is None:
                pairs[cls.one] =  _tmp1171
            else:
                _tmp1234 = _tmp1234 + _tmp1171
                if _tmp1234:
                    pairs[cls.one] = _tmp1234
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1241; HEAD=TERMS; DATA=pairs)
            _tmp1241 = new(cls)
            _tmp1241.head = TERMS
            _tmp1241.data = pairs
            return _tmp1241
        else:
            #SUB_NUMBER_SYMBOL(LHS=self; RHS=other)
            #SUB_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp1262 = self.data
            if not _tmp1262:
                #RETURN_NEW(HEAD=TERMS; DATA={other: -1})
                #NEWINSTANCE(OBJ=_tmp1269; HEAD=TERMS; DATA={other: -1})
                _tmp1269 = new(cls)
                _tmp1269.head = TERMS
                _tmp1269.data = {other: -1}
                return _tmp1269
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp1262, other: -1})
            #NEWINSTANCE(OBJ=_tmp1283; HEAD=TERMS; DATA={cls.one: _tmp1262, other: -1})
            _tmp1283 = new(cls)
            _tmp1283.head = TERMS
            _tmp1283.data = {cls.one: _tmp1262, other: -1}
            return _tmp1283
    elif lhead is TERMS:
        if rhead is NUMBER:
            #SUB_TERMS_NUMBER(LHS=self; RHS=other)
            #SUB_TERMS_VALUE(VALUE=other.data; LHS=self)
            #ADD_VALUE_TERMS(VALUE=-other.data; RHS=self)
            _tmp1311 = -other.data
            if not _tmp1311:
                return self
            pairs = dict(self.data)
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp1311)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp1311; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1325 = pairs.get(cls.one)
            if _tmp1325 is None:
                pairs[cls.one] =  _tmp1311
            else:
                _tmp1325 = _tmp1325 + _tmp1311
                if _tmp1325:
                    pairs[cls.one] = _tmp1325
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1332; HEAD=TERMS; DATA=pairs)
            _tmp1332 = new(cls)
            _tmp1332.head = TERMS
            _tmp1332.data = pairs
            return _tmp1332
        elif rhead is TERMS:
            #SUB_TERMS_TERMS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            for t,c in other.data.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=-c; DICT=pairs; DICT_GET=pairs_get; SIGN=+; USIGN=)
                _tmp1353 = pairs_get(t)
                if _tmp1353 is None:
                    pairs[t] =  -c
                else:
                    _tmp1353 = _tmp1353 + -c
                    if _tmp1353:
                        pairs[t] = _tmp1353
                    else:
                        del pairs[t]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1367; HEAD=TERMS; DATA=pairs)
            _tmp1367 = new(cls)
            _tmp1367.head = TERMS
            _tmp1367.data = pairs
            return _tmp1367
        else:
            #SUB_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1388 = pairs.get(other)
            if _tmp1388 is None:
                pairs[other] =  -1
            else:
                _tmp1388 = _tmp1388 + -1
                if _tmp1388:
                    pairs[other] = _tmp1388
                else:
                    del pairs[other]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1402; HEAD=TERMS; DATA=pairs)
            _tmp1402 = new(cls)
            _tmp1402.head = TERMS
            _tmp1402.data = pairs
            return _tmp1402
    else:
        if rhead is NUMBER:
            #SUB_SYMBOL_NUMBER(LHS=self; RHS=other)
            #SUB_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; VALUE=-other.data)
            #ADD_VALUE_SYMBOL(VALUE=-other.data; RHS=self)
            _tmp1437 = -other.data
            if not _tmp1437:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp1437, self: 1})
            #NEWINSTANCE(OBJ=_tmp1444; HEAD=TERMS; DATA={cls.one: _tmp1437, self: 1})
            _tmp1444 = new(cls)
            _tmp1444.head = TERMS
            _tmp1444.data = {cls.one: _tmp1437, self: 1}
            return _tmp1444
        elif rhead is TERMS:
            #SUB_SYMBOL_TERMS(LHS=self; RHS=other)
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1472 = pairs.get(self)
            if _tmp1472 is None:
                pairs[self] =  1
            else:
                _tmp1472 = _tmp1472 + 1
                if _tmp1472:
                    pairs[self] = _tmp1472
                else:
                    del pairs[self]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1486; HEAD=TERMS; DATA=pairs)
            _tmp1486 = new(cls)
            _tmp1486.head = TERMS
            _tmp1486.data = pairs
            return _tmp1486
        else:
            #SUB_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                return cls.zero
            #RETURN_NEW(HEAD=TERMS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp1507; HEAD=TERMS; DATA={self: 1, other: -1})
            _tmp1507 = new(cls)
            _tmp1507.head = TERMS
            _tmp1507.data = {self: 1, other: -1}
            return _tmp1507

def mul_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #MUL_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW(HEAD=NUMBER; DATA=self.data * other)
                #NEWINSTANCE(OBJ=_tmp1528; HEAD=NUMBER; DATA=self.data * other)
                _tmp1528 = new(cls)
                _tmp1528.head = NUMBER
                _tmp1528.data = self.data * other
                return _tmp1528
            elif lhead is TERMS:
                #MUL_TERMS_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_TERMS(VALUE=other; RHS=self)
                _tmp1549 = other
                if not _tmp1549:
                    return cls.zero
                pairs = self.data
                if len(pairs)==1:
                    t, c = pairs.items()[0]
                    c = _tmp1549 * c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp1556; HEAD=TERMS; DATA={t: c})
                    _tmp1556 = new(cls)
                    _tmp1556.head = TERMS
                    _tmp1556.data = {t: c}
                    return _tmp1556
                if _tmp1549==1:
                    return self
                pairs = {}
                for t,c in self.data.iteritems():
                    pairs[t] = _tmp1549 * c
                #CANONIZE_TERMS_DICT(DICT=pairs)
                if not pairs:
                    return cls.zero
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return cls.convert(c)
                #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
                obj = new(cls)
                obj.head = TERMS
                obj.data = pairs
                coeff, terms = self._coeff_terms
                if terms is not None:
                    c = coeff * _tmp1549
                    if not c==1:
                        obj._coeff_terms = (c, terms)
                else:
                    obj._coeff_terms = (_tmp1549, self)
                return obj
            elif lhead is FACTORS:
                #MUL_FACTORS_VALUE(VALUE=other; LHS=self)
                #MUL_SYMBOL_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=other; RHS=self)
                _tmp1598 = other
                if not _tmp1598:
                    return cls.zero
                if _tmp1598==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp1598})
                #NEWINSTANCE(OBJ=_tmp1605; HEAD=TERMS; DATA={self: _tmp1598})
                _tmp1605 = new(cls)
                _tmp1605.head = TERMS
                _tmp1605.data = {self: _tmp1598}
                return _tmp1605
            else:
                #MUL_SYMBOL_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=other; RHS=self)
                _tmp1626 = other
                if not _tmp1626:
                    return cls.zero
                if _tmp1626==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp1626})
                #NEWINSTANCE(OBJ=_tmp1633; HEAD=TERMS; DATA={self: _tmp1626})
                _tmp1633 = new(cls)
                _tmp1633.head = TERMS
                _tmp1633.data = {self: _tmp1626}
                return _tmp1633
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #MUL_NUMBER_NUMBER(LHS=self; RHS=other)
            #MUL_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW(HEAD=NUMBER; DATA=self.data * other.data)
            #NEWINSTANCE(OBJ=_tmp1661; HEAD=NUMBER; DATA=self.data * other.data)
            _tmp1661 = new(cls)
            _tmp1661.head = NUMBER
            _tmp1661.data = self.data * other.data
            return _tmp1661
        elif rhead is TERMS:
            #MUL_NUMBER_TERMS(LHS=self; RHS=other)
            #MUL_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp1682 = self.data
            if not _tmp1682:
                return cls.zero
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp1682 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp1689; HEAD=TERMS; DATA={t: c})
                _tmp1689 = new(cls)
                _tmp1689.head = TERMS
                _tmp1689.data = {t: c}
                return _tmp1689
            if _tmp1682==1:
                return other
            pairs = {}
            for t,c in other.data.iteritems():
                pairs[t] = _tmp1682 * c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            coeff, terms = other._coeff_terms
            if terms is not None:
                c = coeff * _tmp1682
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp1682, other)
            return obj
        elif rhead is FACTORS:
            #MUL_NUMBER_FACTORS(LHS=self; RHS=other)
            #MUL_SYMBOL_VALUE(VALUE=self.data; LHS=other)
            #MUL_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp1731 = self.data
            if not _tmp1731:
                return cls.zero
            if _tmp1731==1:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={other: _tmp1731})
            #NEWINSTANCE(OBJ=_tmp1738; HEAD=TERMS; DATA={other: _tmp1731})
            _tmp1738 = new(cls)
            _tmp1738.head = TERMS
            _tmp1738.data = {other: _tmp1731}
            return _tmp1738
        else:
            #MUL_NUMBER_SYMBOL(LHS=self; RHS=other)
            #MUL_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp1759 = self.data
            if not _tmp1759:
                return cls.zero
            if _tmp1759==1:
                return other
            #RETURN_NEW(HEAD=TERMS; DATA={other: _tmp1759})
            #NEWINSTANCE(OBJ=_tmp1766; HEAD=TERMS; DATA={other: _tmp1759})
            _tmp1766 = new(cls)
            _tmp1766.head = TERMS
            _tmp1766.data = {other: _tmp1759}
            return _tmp1766
    elif lhead is TERMS:
        if rhead is NUMBER:
            #MUL_TERMS_NUMBER(LHS=self; RHS=other)
            #MUL_TERMS_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_TERMS(VALUE=other.data; RHS=self)
            _tmp1794 = other.data
            if not _tmp1794:
                return cls.zero
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp1794 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp1801; HEAD=TERMS; DATA={t: c})
                _tmp1801 = new(cls)
                _tmp1801.head = TERMS
                _tmp1801.data = {t: c}
                return _tmp1801
            if _tmp1794==1:
                return self
            pairs = {}
            for t,c in self.data.iteritems():
                pairs[t] = _tmp1794 * c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            coeff, terms = self._coeff_terms
            if terms is not None:
                c = coeff * _tmp1794
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp1794, self)
            return obj
        elif rhead is TERMS:
            #MUL_TERMS_TERMS(LHS=self; RHS=other)
            lpairs = self.data
            rpairs = other.data
            if len(lpairs)==1:
                t1,c1 = lpairs.items()[0]
                if len(rpairs)==1:
                    t2,c2 = rpairs.items()[0]
                    t = t1 * t2
                    c = c1 * c2
                    if t == cls.one:
                        return cls.convert(c)
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp1836; HEAD=TERMS; DATA={t: c})
                    _tmp1836 = new(cls)
                    _tmp1836.head = TERMS
                    _tmp1836.data = {t: c}
                    return _tmp1836
                coeff, terms = other._coeff_terms
                if terms is None:
                    return (t1 * other) * c1
                return (t1*terms) * (c1*coeff)
            elif len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                coeff, terms = other._coeff_terms
                if terms is None:
                    return (t1 * self) * c1
                return (t1*terms) * (c1*coeff)
            lcoeff, lterms = self._coeff_terms
            rcoeff, rterms = other._coeff_terms
            if lterms is None:
                lterms = self
            if rterms is None:
                rterms = other
            if lterms==rterms:
                #NEWINSTANCE(OBJ=_tmp1829; HEAD=FACTORS; DATA={lterms: 2})
                _tmp1829 = new(cls)
                _tmp1829.head = FACTORS
                _tmp1829.data = {lterms: 2}
            else:
                #NEWINSTANCE(OBJ=_tmp1829; HEAD=FACTORS; DATA={lterms: 1, rterms: 1})
                _tmp1829 = new(cls)
                _tmp1829.head = FACTORS
                _tmp1829.data = {lterms: 1, rterms: 1}
            c = lcoeff * rcoeff
            if c==1:
                return _tmp1829
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp1829: c})
            #NEWINSTANCE(OBJ=_tmp1864; HEAD=TERMS; DATA={_tmp1829: c})
            _tmp1864 = new(cls)
            _tmp1864.head = TERMS
            _tmp1864.data = {_tmp1829: c}
            return _tmp1864
        elif rhead is FACTORS:
            #MUL_TERMS_FACTORS(LHS=self; RHS=other)
            #MUL_FACTORS_TERMS(LHS=other; RHS=self)
            rpairs = self.data
            if len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                t = t1 * other
                #RETURN_NEW(HEAD=TERMS; DATA={t: c1})
                #NEWINSTANCE(OBJ=_tmp1892; HEAD=TERMS; DATA={t: c1})
                _tmp1892 = new(cls)
                _tmp1892.head = TERMS
                _tmp1892.data = {t: c1}
                return _tmp1892
            coeff, terms = self._coeff_terms
            if terms is None:
                #MUL_FACTORS_SYMBOL(LHS=other; RHS=self)
                pairs = dict(other.data)
                #MUL_DICT_SYMBOL(DICT=pairs; RHS=self)
                #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
                _tmp1920 = pairs.get(self)
                if _tmp1920 is None:
                    pairs[self] =  1
                else:
                    _tmp1920 = _tmp1920 + 1
                    if _tmp1920:
                        pairs[self] = _tmp1920
                    else:
                        del pairs[self]
                #CANONIZE_FACTORS_DICT1(DICT=pairs)
                if not pairs:
                    return cls.one
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return t
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp1934; HEAD=FACTORS; DATA=pairs)
                _tmp1934 = new(cls)
                _tmp1934.head = FACTORS
                _tmp1934.data = pairs
                return _tmp1934
            return (other * terms) * coeff
        else:
            #MUL_TERMS_SYMBOL(LHS=self; RHS=other)
            pairs = self.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                t = t * other
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp1955; HEAD=TERMS; DATA={t: c})
                _tmp1955 = new(cls)
                _tmp1955.head = TERMS
                _tmp1955.data = {t: c}
                return _tmp1955
            coeff, terms = self._coeff_terms
            if terms is not None:
                #NEWINSTANCE(OBJ=_tmp1948; HEAD=FACTORS; DATA={terms:1, other:1})
                _tmp1948 = new(cls)
                _tmp1948.head = FACTORS
                _tmp1948.data = {terms:1, other:1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp1948:coeff})
                #NEWINSTANCE(OBJ=_tmp1976; HEAD=TERMS; DATA={_tmp1948:coeff})
                _tmp1976 = new(cls)
                _tmp1976.head = TERMS
                _tmp1976.data = {_tmp1948:coeff}
                return _tmp1976
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: 1})
            #NEWINSTANCE(OBJ=_tmp1990; HEAD=FACTORS; DATA={self: 1, other: 1})
            _tmp1990 = new(cls)
            _tmp1990.head = FACTORS
            _tmp1990.data = {self: 1, other: 1}
            return _tmp1990
    elif lhead is FACTORS:
        if rhead is NUMBER:
            #MUL_FACTORS_NUMBER(LHS=self; RHS=other)
            #MUL_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=other.data; RHS=self)
            _tmp2018 = other.data
            if not _tmp2018:
                return cls.zero
            if _tmp2018==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp2018})
            #NEWINSTANCE(OBJ=_tmp2025; HEAD=TERMS; DATA={self: _tmp2018})
            _tmp2025 = new(cls)
            _tmp2025.head = TERMS
            _tmp2025.data = {self: _tmp2018}
            return _tmp2025
        elif rhead is TERMS:
            #MUL_FACTORS_TERMS(LHS=self; RHS=other)
            rpairs = other.data
            if len(rpairs)==1:
                t1,c1 = rpairs.items()[0]
                t = t1 * self
                #RETURN_NEW(HEAD=TERMS; DATA={t: c1})
                #NEWINSTANCE(OBJ=_tmp2046; HEAD=TERMS; DATA={t: c1})
                _tmp2046 = new(cls)
                _tmp2046.head = TERMS
                _tmp2046.data = {t: c1}
                return _tmp2046
            coeff, terms = other._coeff_terms
            if terms is None:
                #MUL_FACTORS_SYMBOL(LHS=self; RHS=other)
                pairs = dict(self.data)
                #MUL_DICT_SYMBOL(DICT=pairs; RHS=other)
                #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
                _tmp2074 = pairs.get(other)
                if _tmp2074 is None:
                    pairs[other] =  1
                else:
                    _tmp2074 = _tmp2074 + 1
                    if _tmp2074:
                        pairs[other] = _tmp2074
                    else:
                        del pairs[other]
                #CANONIZE_FACTORS_DICT1(DICT=pairs)
                if not pairs:
                    return cls.one
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return t
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp2088; HEAD=FACTORS; DATA=pairs)
                _tmp2088 = new(cls)
                _tmp2088.head = FACTORS
                _tmp2088.data = pairs
                return _tmp2088
            return (self * terms) * coeff
        elif rhead is FACTORS:
            #MUL_FACTORS_FACTORS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            number = 1
            for t,c in other.data.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=+; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                _tmp2109 = pairs_get(t)
                if _tmp2109 is None:
                    pairs[t] = + c
                else:
                    _tmp2109 = _tmp2109 + c
                    if type(_tmp2109) is cls and _tmp2109.head is NUMBER:
                        _tmp2109 = _tmp2109.data
                    if _tmp2109:
                        if t.head is NUMBER:
                            del pairs[t]
                            z, sym = try_power(t.data, _tmp2109)
                            if sym:
                                for t1, c1 in sym:
                                    #NEWINSTANCE(OBJ=tt; HEAD=NUMBER; DATA=t1)
                                    tt = new(cls)
                                    tt.head = NUMBER
                                    tt.data = t1
                                    #ADD_TERM_VALUE_DICT(DICT=pairs; DICT_GET=pairs_get; TERM=tt; VALUE=c1; SIGN=+; USIGN=)
                                    _tmp2123 = pairs_get(tt)
                                    if _tmp2123 is None:
                                        pairs[tt] =  c1
                                    else:
                                        _tmp2123 = _tmp2123 + c1
                                        if _tmp2123:
                                            pairs[tt] = _tmp2123
                                        else:
                                            del pairs[tt]
                            number = number * z
                        else:
                            pairs[t] = _tmp2109
                    else:
                        del pairs[t]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t * number
               if t==cls.one:
                   return number
            if number is 1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp2137; HEAD=FACTORS; DATA=pairs)
                _tmp2137 = new(cls)
                _tmp2137.head = FACTORS
                _tmp2137.data = pairs
                return _tmp2137
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = new(cls)
            obj.head = FACTORS
            obj.data = pairs
            return obj * number
        else:
            #MUL_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=other)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp2172 = pairs.get(other)
            if _tmp2172 is None:
                pairs[other] =  1
            else:
                _tmp2172 = _tmp2172 + 1
                if _tmp2172:
                    pairs[other] = _tmp2172
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp2186; HEAD=FACTORS; DATA=pairs)
            _tmp2186 = new(cls)
            _tmp2186.head = FACTORS
            _tmp2186.data = pairs
            return _tmp2186
    else:
        if rhead is NUMBER:
            #MUL_SYMBOL_NUMBER(LHS=self; RHS=other)
            #MUL_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=other.data; RHS=self)
            _tmp2214 = other.data
            if not _tmp2214:
                return cls.zero
            if _tmp2214==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp2214})
            #NEWINSTANCE(OBJ=_tmp2221; HEAD=TERMS; DATA={self: _tmp2214})
            _tmp2221 = new(cls)
            _tmp2221.head = TERMS
            _tmp2221.data = {self: _tmp2214}
            return _tmp2221
        elif rhead is TERMS:
            #MUL_SYMBOL_TERMS(LHS=self; RHS=other)
            #MUL_TERMS_SYMBOL(LHS=other; RHS=self)
            pairs = other.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                t = t * self
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp2249; HEAD=TERMS; DATA={t: c})
                _tmp2249 = new(cls)
                _tmp2249.head = TERMS
                _tmp2249.data = {t: c}
                return _tmp2249
            coeff, terms = other._coeff_terms
            if terms is not None:
                #NEWINSTANCE(OBJ=_tmp2242; HEAD=FACTORS; DATA={terms:1, self:1})
                _tmp2242 = new(cls)
                _tmp2242.head = FACTORS
                _tmp2242.data = {terms:1, self:1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp2242:coeff})
                #NEWINSTANCE(OBJ=_tmp2270; HEAD=TERMS; DATA={_tmp2242:coeff})
                _tmp2270 = new(cls)
                _tmp2270.head = TERMS
                _tmp2270.data = {_tmp2242:coeff}
                return _tmp2270
            #RETURN_NEW(HEAD=FACTORS; DATA={other: 1, self: 1})
            #NEWINSTANCE(OBJ=_tmp2284; HEAD=FACTORS; DATA={other: 1, self: 1})
            _tmp2284 = new(cls)
            _tmp2284.head = FACTORS
            _tmp2284.data = {other: 1, self: 1}
            return _tmp2284
        elif rhead is FACTORS:
            #MUL_SYMBOL_FACTORS(LHS=self; RHS=other)
            #MUL_FACTORS_SYMBOL(LHS=other; RHS=self)
            pairs = dict(other.data)
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp2319 = pairs.get(self)
            if _tmp2319 is None:
                pairs[self] =  1
            else:
                _tmp2319 = _tmp2319 + 1
                if _tmp2319:
                    pairs[self] = _tmp2319
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp2333; HEAD=FACTORS; DATA=pairs)
            _tmp2333 = new(cls)
            _tmp2333.head = FACTORS
            _tmp2333.data = pairs
            return _tmp2333
        else:
            #MUL_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp2354; HEAD=FACTORS; DATA=pairs)
            _tmp2354 = new(cls)
            _tmp2354.head = FACTORS
            _tmp2354.data = pairs
            return _tmp2354

def div_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS, new=object.__new__):
    cls = self.__class__
    lhead = self.head
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #DIV_NUMBER_VALUE(VALUE=other; LHS=self)
                #RETURN_NEW2(HEAD=NUMBER; DATA=div(self.data, other, cls))
                _tmp2375 = div(self.data, other, cls)
                if isinstance(_tmp2375, Infinity):
                    return _tmp2375
                #RETURN_NEW(HEAD=NUMBER; DATA=_tmp2375)
                #NEWINSTANCE(OBJ=_tmp2382; HEAD=NUMBER; DATA=_tmp2375)
                _tmp2382 = new(cls)
                _tmp2382.head = NUMBER
                _tmp2382.data = _tmp2375
                return _tmp2382
            elif lhead is TERMS:
                #DIV_TERMS_VALUE(VALUE=other; LHS=self)
                #MUL_TERMS_VALUE(LHS=self; VALUE=div(1,other,cls))
                #MUL_VALUE_TERMS(VALUE=div(1,other,cls); RHS=self)
                _tmp2410 = div(1,other,cls)
                if not _tmp2410:
                    return cls.zero
                pairs = self.data
                if len(pairs)==1:
                    t, c = pairs.items()[0]
                    c = _tmp2410 * c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp2417; HEAD=TERMS; DATA={t: c})
                    _tmp2417 = new(cls)
                    _tmp2417.head = TERMS
                    _tmp2417.data = {t: c}
                    return _tmp2417
                if _tmp2410==1:
                    return self
                pairs = {}
                for t,c in self.data.iteritems():
                    pairs[t] = _tmp2410 * c
                #CANONIZE_TERMS_DICT(DICT=pairs)
                if not pairs:
                    return cls.zero
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return cls.convert(c)
                #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
                obj = new(cls)
                obj.head = TERMS
                obj.data = pairs
                coeff, terms = self._coeff_terms
                if terms is not None:
                    c = coeff * _tmp2410
                    if not c==1:
                        obj._coeff_terms = (c, terms)
                else:
                    obj._coeff_terms = (_tmp2410, self)
                return obj
            elif lhead is FACTORS:
                #DIV_FACTORS_VALUE(VALUE=other; LHS=self)
                #MUL_FACTORS_VALUE(LHS=self; VALUE=div(1,other,cls))
                #MUL_SYMBOL_VALUE(VALUE=div(1,other,cls); LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=div(1,other,cls); RHS=self)
                _tmp2466 = div(1,other,cls)
                if not _tmp2466:
                    return cls.zero
                if _tmp2466==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp2466})
                #NEWINSTANCE(OBJ=_tmp2473; HEAD=TERMS; DATA={self: _tmp2466})
                _tmp2473 = new(cls)
                _tmp2473.head = TERMS
                _tmp2473.data = {self: _tmp2466}
                return _tmp2473
            else:
                #DIV_SYMBOL_VALUE(VALUE=other; LHS=self)
                #MUL_VALUE_SYMBOL(VALUE=div(1, other, cls); RHS=self)
                _tmp2494 = div(1, other, cls)
                if not _tmp2494:
                    return cls.zero
                if _tmp2494==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp2494})
                #NEWINSTANCE(OBJ=_tmp2501; HEAD=TERMS; DATA={self: _tmp2494})
                _tmp2501 = new(cls)
                _tmp2501.head = TERMS
                _tmp2501.data = {self: _tmp2494}
                return _tmp2501
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead = other.head
    if lhead is NUMBER:
        if rhead is NUMBER:
            #DIV_NUMBER_NUMBER(LHS=self; RHS=other)
            #DIV_VALUE_NUMBER(VALUE=self.data; RHS=other)
            #RETURN_NEW2(HEAD=NUMBER; DATA=div(self.data, other.data, cls))
            _tmp2529 = div(self.data, other.data, cls)
            if isinstance(_tmp2529, Infinity):
                return _tmp2529
            #RETURN_NEW(HEAD=NUMBER; DATA=_tmp2529)
            #NEWINSTANCE(OBJ=_tmp2536; HEAD=NUMBER; DATA=_tmp2529)
            _tmp2536 = new(cls)
            _tmp2536.head = NUMBER
            _tmp2536.data = _tmp2529
            return _tmp2536
        elif rhead is TERMS:
            #DIV_NUMBER_TERMS(LHS=self; RHS=other)
            #DIV_VALUE_TERMS(VALUE=self.data; RHS=other)
            _tmp2557 = self.data
            if not _tmp2557:
                return cls.zero
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = div(self.data, c, cls)
                t = 1/t
                if c==1:
                    return t
                if t==cls.one:
                    return cls.convert(c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp2564; HEAD=TERMS; DATA={t: c})
                _tmp2564 = new(cls)
                _tmp2564.head = TERMS
                _tmp2564.data = {t: c}
                return _tmp2564
            #NEWINSTANCE(OBJ=_tmp2557; HEAD=FACTORS; DATA={other: -1})
            _tmp2557 = new(cls)
            _tmp2557.head = FACTORS
            _tmp2557.data = {other: -1}
            if self.data==1:
                return _tmp2557
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp2557: self.data})
            #NEWINSTANCE(OBJ=_tmp2585; HEAD=TERMS; DATA={_tmp2557: self.data})
            _tmp2585 = new(cls)
            _tmp2585.head = TERMS
            _tmp2585.data = {_tmp2557: self.data}
            return _tmp2585
        elif rhead is FACTORS:
            #DIV_NUMBER_FACTORS(LHS=self; RHS=other)
            #DIV_VALUE_FACTORS(VALUE=self.data; RHS=other)
            
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = -c
                if c==1:
                    return t * self.data
                new_pairs = {t: c}
            else:
                #NEG_DICT_VALUES(DICT_IN=pairs; DICT_OUT=new_pairs)
                new_pairs = dict([(t, -c) for t,c in pairs.iteritems()])
            #NEWINSTANCE(OBJ=_tmp2606; HEAD=FACTORS; DATA=new_pairs)
            _tmp2606 = new(cls)
            _tmp2606.head = FACTORS
            _tmp2606.data = new_pairs
            if self.data==1:
                return _tmp2606
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp2606: self.data})
            #NEWINSTANCE(OBJ=_tmp2627; HEAD=TERMS; DATA={_tmp2606: self.data})
            _tmp2627 = new(cls)
            _tmp2627.head = TERMS
            _tmp2627.data = {_tmp2606: self.data}
            return _tmp2627
        else:
            #DIV_NUMBER_SYMBOL(LHS=self; RHS=other)
            #DIV_VALUE_SYMBOL(VALUE=self.data; RHS=other)
            _tmp2648 = self.data
            if not _tmp2648:
                return cls.zero
            #NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={other: -1})
            obj2 = new(cls)
            obj2.head = FACTORS
            obj2.data = {other: -1}
            if _tmp2648==1:
                return obj2
            #RETURN_NEW(HEAD=TERMS; DATA={obj2: _tmp2648})
            #NEWINSTANCE(OBJ=_tmp2662; HEAD=TERMS; DATA={obj2: _tmp2648})
            _tmp2662 = new(cls)
            _tmp2662.head = TERMS
            _tmp2662.data = {obj2: _tmp2648}
            return _tmp2662
    elif lhead is TERMS:
        if rhead is NUMBER:
            #DIV_TERMS_NUMBER(LHS=self; RHS=other)
            #DIV_TERMS_VALUE(VALUE=other.data; LHS=self)
            #MUL_TERMS_VALUE(LHS=self; VALUE=div(1,other.data,cls))
            #MUL_VALUE_TERMS(VALUE=div(1,other.data,cls); RHS=self)
            _tmp2697 = div(1,other.data,cls)
            if not _tmp2697:
                return cls.zero
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp2697 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp2704; HEAD=TERMS; DATA={t: c})
                _tmp2704 = new(cls)
                _tmp2704.head = TERMS
                _tmp2704.data = {t: c}
                return _tmp2704
            if _tmp2697==1:
                return self
            pairs = {}
            for t,c in self.data.iteritems():
                pairs[t] = _tmp2697 * c
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls.convert(c)
            #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
            obj = new(cls)
            obj.head = TERMS
            obj.data = pairs
            coeff, terms = self._coeff_terms
            if terms is not None:
                c = coeff * _tmp2697
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp2697, self)
            return obj
        elif rhead is TERMS:
            #DIV_TERMS_TERMS(LHS=self; RHS=other)
            
            if self==other:
                return cls.one
            lpairs = self.data
            rpairs = other.data
            if len(lpairs)==1:
                t1, c1 = lpairs.items()[0]
                if len(rpairs)==1:
                    t2, c2 = rpairs.items()[0]
                    c = div(c1, c2, cls)
                    if t2==t1:
                        return cls.convert(c)
                    if c==1:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t1:1, t2:-1})
                        #NEWINSTANCE(OBJ=_tmp2739; HEAD=FACTORS; DATA={t1:1, t2:-1})
                        _tmp2739 = new(cls)
                        _tmp2739.head = FACTORS
                        _tmp2739.data = {t1:1, t2:-1}
                        return _tmp2739
                    #NEWINSTANCE(OBJ=_tmp2732; HEAD=FACTORS; DATA={t1:1, t2:-1})
                    _tmp2732 = new(cls)
                    _tmp2732.head = FACTORS
                    _tmp2732.data = {t1:1, t2:-1}
                else:
                    #NEWINSTANCE(OBJ=_tmp2732; HEAD=FACTORS; DATA={t1:1, other:-1})
                    _tmp2732 = new(cls)
                    _tmp2732.head = FACTORS
                    _tmp2732.data = {t1:1, other:-1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp2732:c1})
                #NEWINSTANCE(OBJ=_tmp2767; HEAD=TERMS; DATA={_tmp2732:c1})
                _tmp2767 = new(cls)
                _tmp2767.head = TERMS
                _tmp2767.data = {_tmp2732:c1}
                return _tmp2767
            elif len(rpairs)==1:
                t2, c2 = rpairs.items()[0]
                c = div(1, c2, cls)
                if t2==self:
                    return cls.convert(c)
                _tmp2732 = self / t2
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp2732:c})
                #NEWINSTANCE(OBJ=_tmp2781; HEAD=TERMS; DATA={_tmp2732:c})
                _tmp2781 = new(cls)
                _tmp2781.head = TERMS
                _tmp2781.data = {_tmp2732:c}
                return _tmp2781
            #RETURN_NEW(HEAD=FACTORS; DATA={self:1, other:-1})
            #NEWINSTANCE(OBJ=_tmp2795; HEAD=FACTORS; DATA={self:1, other:-1})
            _tmp2795 = new(cls)
            _tmp2795.head = FACTORS
            _tmp2795.data = {self:1, other:-1}
            return _tmp2795
        elif rhead is FACTORS:
            #DIV_TERMS_FACTORS(LHS=self; RHS=other)
            lpairs = self.data
            if len(lpairs)==1:
                t, c = lpairs.items()[0]
                t = t / other
                if t==cls.one:
                    return cls.convert(c)
                head = t.head
                if head is NUMBER:
                    #RETURN_NEW(HEAD=NUMBER; DATA=t.data * c)
                    #NEWINSTANCE(OBJ=_tmp2816; HEAD=NUMBER; DATA=t.data * c)
                    _tmp2816 = new(cls)
                    _tmp2816.head = NUMBER
                    _tmp2816.data = t.data * c
                    return _tmp2816
                elif head is TERMS:
                    #MUL_TERMS_VALUE(LHS=t; VALUE=c)
                    #MUL_VALUE_TERMS(VALUE=c; RHS=t)
                    _tmp2837 = c
                    if not _tmp2837:
                        return cls.zero
                    pairs = t.data
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp2837 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp2844; HEAD=TERMS; DATA={t: c})
                        _tmp2844 = new(cls)
                        _tmp2844.head = TERMS
                        _tmp2844.data = {t: c}
                        return _tmp2844
                    if _tmp2837==1:
                        return t
                    pairs = {}
                    for t,c in t.data.iteritems():
                        pairs[t] = _tmp2837 * c
                    #CANONIZE_TERMS_DICT(DICT=pairs)
                    if not pairs:
                        return cls.zero
                    if len(pairs)==1:
                       t, c = pairs.items()[0]
                       if c==1:
                           return t
                       if t==cls.one:
                           return cls.convert(c)
                    #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = pairs
                    coeff, terms = t._coeff_terms
                    if terms is not None:
                        c = coeff * _tmp2837
                        if not c==1:
                            obj._coeff_terms = (c, terms)
                    else:
                        obj._coeff_terms = (_tmp2837, t)
                    return obj
                else:
                    #MUL_SYMBOL_VALUE(LHS=t; VALUE=c)
                    #MUL_VALUE_SYMBOL(VALUE=c; RHS=t)
                    _tmp2879 = c
                    if not _tmp2879:
                        return cls.zero
                    if _tmp2879==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp2879})
                    #NEWINSTANCE(OBJ=_tmp2886; HEAD=TERMS; DATA={t: _tmp2879})
                    _tmp2886 = new(cls)
                    _tmp2886.head = TERMS
                    _tmp2886.data = {t: _tmp2879}
                    return _tmp2886
            #DIV_SYMBOL_FACTORS(LHS=self; RHS=other)
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==self:
                    c = 1 - c
                    if not c:
                        return cls.one
                    if c==1:
                        return t
                    else:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp2907; HEAD=FACTORS; DATA={t: c})
                        _tmp2907 = new(cls)
                        _tmp2907.head = FACTORS
                        _tmp2907.data = {t: c}
                        return _tmp2907
                #RETURN_NEW(HEAD=FACTORS; DATA={t: -c, self: 1})
                #NEWINSTANCE(OBJ=_tmp2921; HEAD=FACTORS; DATA={t: -c, self: 1})
                _tmp2921 = new(cls)
                _tmp2921.head = FACTORS
                _tmp2921.data = {t: -c, self: 1}
                return _tmp2921
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp2949 = pairs.get(self)
            if _tmp2949 is None:
                pairs[self] =  1
            else:
                _tmp2949 = _tmp2949 + 1
                if _tmp2949:
                    pairs[self] = _tmp2949
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp2963; HEAD=FACTORS; DATA=pairs)
            _tmp2963 = new(cls)
            _tmp2963.head = FACTORS
            _tmp2963.data = pairs
            return _tmp2963
        else:
            #DIV_TERMS_SYMBOL(LHS=self; RHS=other)
            
            pairs = self.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==other:
                    return cls.convert(c)
                #NEWINSTANCE(OBJ=_tmp2977; HEAD=FACTORS; DATA={t:1, other: -1})
                _tmp2977 = new(cls)
                _tmp2977.head = FACTORS
                _tmp2977.data = {t:1, other: -1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp2977: c})
                #NEWINSTANCE(OBJ=_tmp2991; HEAD=TERMS; DATA={_tmp2977: c})
                _tmp2991 = new(cls)
                _tmp2991.head = TERMS
                _tmp2991.data = {_tmp2977: c}
                return _tmp2991
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp3005; HEAD=FACTORS; DATA={self: 1, other: -1})
            _tmp3005 = new(cls)
            _tmp3005.head = FACTORS
            _tmp3005.data = {self: 1, other: -1}
            return _tmp3005
    elif lhead is FACTORS:
        if rhead is NUMBER:
            #DIV_FACTORS_NUMBER(LHS=self; RHS=other)
            #DIV_FACTORS_VALUE(VALUE=other.data; LHS=self)
            #MUL_FACTORS_VALUE(LHS=self; VALUE=div(1,other.data,cls))
            #MUL_SYMBOL_VALUE(VALUE=div(1,other.data,cls); LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=div(1,other.data,cls); RHS=self)
            _tmp3047 = div(1,other.data,cls)
            if not _tmp3047:
                return cls.zero
            if _tmp3047==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp3047})
            #NEWINSTANCE(OBJ=_tmp3054; HEAD=TERMS; DATA={self: _tmp3047})
            _tmp3054 = new(cls)
            _tmp3054.head = TERMS
            _tmp3054.data = {self: _tmp3047}
            return _tmp3054
        elif rhead is TERMS:
            #DIV_FACTORS_TERMS(LHS=self; RHS=other)
            rpairs = other.data
            if len(rpairs)==1:
                t, c = rpairs.items()[0]
                t = self / t
                c = div(1, c, cls)
                if t==cls.one:
                    return cls.convert(c)
                head = t.head
                if head is NUMBER:
                    #RETURN_NEW(HEAD=NUMBER; DATA=t.data * c)
                    #NEWINSTANCE(OBJ=_tmp3075; HEAD=NUMBER; DATA=t.data * c)
                    _tmp3075 = new(cls)
                    _tmp3075.head = NUMBER
                    _tmp3075.data = t.data * c
                    return _tmp3075
                elif head is TERMS:
                    #MUL_TERMS_VALUE(LHS=t; VALUE=c)
                    #MUL_VALUE_TERMS(VALUE=c; RHS=t)
                    _tmp3096 = c
                    if not _tmp3096:
                        return cls.zero
                    pairs = t.data
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp3096 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp3103; HEAD=TERMS; DATA={t: c})
                        _tmp3103 = new(cls)
                        _tmp3103.head = TERMS
                        _tmp3103.data = {t: c}
                        return _tmp3103
                    if _tmp3096==1:
                        return t
                    pairs = {}
                    for t,c in t.data.iteritems():
                        pairs[t] = _tmp3096 * c
                    #CANONIZE_TERMS_DICT(DICT=pairs)
                    if not pairs:
                        return cls.zero
                    if len(pairs)==1:
                       t, c = pairs.items()[0]
                       if c==1:
                           return t
                       if t==cls.one:
                           return cls.convert(c)
                    #NEWINSTANCE(OBJ=obj;HEAD=TERMS; DATA=pairs)
                    obj = new(cls)
                    obj.head = TERMS
                    obj.data = pairs
                    coeff, terms = t._coeff_terms
                    if terms is not None:
                        c = coeff * _tmp3096
                        if not c==1:
                            obj._coeff_terms = (c, terms)
                    else:
                        obj._coeff_terms = (_tmp3096, t)
                    return obj
                else:
                    #MUL_SYMBOL_VALUE(LHS=t; VALUE=c)
                    #MUL_VALUE_SYMBOL(VALUE=c; RHS=t)
                    _tmp3138 = c
                    if not _tmp3138:
                        return cls.zero
                    if _tmp3138==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp3138})
                    #NEWINSTANCE(OBJ=_tmp3145; HEAD=TERMS; DATA={t: _tmp3138})
                    _tmp3145 = new(cls)
                    _tmp3145.head = TERMS
                    _tmp3145.data = {t: _tmp3138}
                    return _tmp3145
            #DIV_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #DIV_DICT_SYMBOL(RHS=other; DICT=pairs)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp3173 = pairs.get(other)
            if _tmp3173 is None:
                pairs[other] =  -1
            else:
                _tmp3173 = _tmp3173 + -1
                if _tmp3173:
                    pairs[other] = _tmp3173
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp3187; HEAD=FACTORS; DATA=pairs)
            _tmp3187 = new(cls)
            _tmp3187.head = FACTORS
            _tmp3187.data = pairs
            return _tmp3187
        elif rhead is FACTORS:
            #DIV_FACTORS_FACTORS(LHS=self; RHS=other)
            pairs = dict(self.data)
            pairs_get = pairs.get
            number = 1
            for t,c in other.data.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=-; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                _tmp3208 = pairs_get(t)
                if _tmp3208 is None:
                    pairs[t] = - c
                else:
                    _tmp3208 = _tmp3208 - c
                    if type(_tmp3208) is cls and _tmp3208.head is NUMBER:
                        _tmp3208 = _tmp3208.data
                    if _tmp3208:
                        if t.head is NUMBER:
                            del pairs[t]
                            z, sym = try_power(t.data, _tmp3208)
                            if sym:
                                for t1, c1 in sym:
                                    #NEWINSTANCE(OBJ=tt; HEAD=NUMBER; DATA=t1)
                                    tt = new(cls)
                                    tt.head = NUMBER
                                    tt.data = t1
                                    #ADD_TERM_VALUE_DICT(DICT=pairs; DICT_GET=pairs_get; TERM=tt; VALUE=c1; SIGN=+; USIGN=)
                                    _tmp3222 = pairs_get(tt)
                                    if _tmp3222 is None:
                                        pairs[tt] =  c1
                                    else:
                                        _tmp3222 = _tmp3222 + c1
                                        if _tmp3222:
                                            pairs[tt] = _tmp3222
                                        else:
                                            del pairs[tt]
                            number = number * z
                        else:
                            pairs[t] = _tmp3208
                    else:
                        del pairs[t]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t * number
               if t==cls.one:
                   return number
            if number==1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp3236; HEAD=FACTORS; DATA=pairs)
                _tmp3236 = new(cls)
                _tmp3236.head = FACTORS
                _tmp3236.data = pairs
                return _tmp3236
            #NEWINSTANCE(OBJ=_tmp3201; HEAD=FACTORS; DATA=pairs)
            _tmp3201 = new(cls)
            _tmp3201.head = FACTORS
            _tmp3201.data = pairs
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp3201: number})
            #NEWINSTANCE(OBJ=_tmp3257; HEAD=TERMS; DATA={_tmp3201: number})
            _tmp3257 = new(cls)
            _tmp3257.head = TERMS
            _tmp3257.data = {_tmp3201: number}
            return _tmp3257
        else:
            #DIV_FACTORS_SYMBOL(LHS=self; RHS=other)
            pairs = dict(self.data)
            #DIV_DICT_SYMBOL(RHS=other; DICT=pairs)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp3285 = pairs.get(other)
            if _tmp3285 is None:
                pairs[other] =  -1
            else:
                _tmp3285 = _tmp3285 + -1
                if _tmp3285:
                    pairs[other] = _tmp3285
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp3299; HEAD=FACTORS; DATA=pairs)
            _tmp3299 = new(cls)
            _tmp3299.head = FACTORS
            _tmp3299.data = pairs
            return _tmp3299
    else:
        if rhead is NUMBER:
            #DIV_SYMBOL_NUMBER(LHS=self; RHS=other)
            #DIV_SYMBOL_VALUE(VALUE=other.data; LHS=self)
            #MUL_VALUE_SYMBOL(VALUE=div(1, other.data, cls); RHS=self)
            _tmp3327 = div(1, other.data, cls)
            if not _tmp3327:
                return cls.zero
            if _tmp3327==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp3327})
            #NEWINSTANCE(OBJ=_tmp3334; HEAD=TERMS; DATA={self: _tmp3327})
            _tmp3334 = new(cls)
            _tmp3334.head = TERMS
            _tmp3334.data = {self: _tmp3327}
            return _tmp3334
        elif rhead is TERMS:
            #DIV_SYMBOL_TERMS(LHS=self; RHS=other)
            pairs = other.data
            if len(pairs)==1:
                t,c = pairs.items()[0]
                if self==t:
                    return cls.convert(div(1, c, cls))
                #NEWINSTANCE(OBJ=_tmp3348; HEAD=FACTORS; DATA={self:1, t:-1})
                _tmp3348 = new(cls)
                _tmp3348.head = FACTORS
                _tmp3348.data = {self:1, t:-1}
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp3348: div(1, c, cls)})
                #NEWINSTANCE(OBJ=_tmp3362; HEAD=TERMS; DATA={_tmp3348: div(1, c, cls)})
                _tmp3362 = new(cls)
                _tmp3362.head = TERMS
                _tmp3362.data = {_tmp3348: div(1, c, cls)}
                return _tmp3362
            #RETURN_NEW(HEAD=FACTORS; DATA={self:1, other:-1})
            #NEWINSTANCE(OBJ=_tmp3376; HEAD=FACTORS; DATA={self:1, other:-1})
            _tmp3376 = new(cls)
            _tmp3376.head = FACTORS
            _tmp3376.data = {self:1, other:-1}
            return _tmp3376
        elif rhead is FACTORS:
            #DIV_SYMBOL_FACTORS(LHS=self; RHS=other)
            pairs = other.data
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==self:
                    c = 1 - c
                    if not c:
                        return cls.one
                    if c==1:
                        return t
                    else:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp3397; HEAD=FACTORS; DATA={t: c})
                        _tmp3397 = new(cls)
                        _tmp3397.head = FACTORS
                        _tmp3397.data = {t: c}
                        return _tmp3397
                #RETURN_NEW(HEAD=FACTORS; DATA={t: -c, self: 1})
                #NEWINSTANCE(OBJ=_tmp3411; HEAD=FACTORS; DATA={t: -c, self: 1})
                _tmp3411 = new(cls)
                _tmp3411.head = FACTORS
                _tmp3411.data = {t: -c, self: 1}
                return _tmp3411
            #NEG_DICT_VALUES(DICT_IN=other.data; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in other.data.iteritems()])
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp3439 = pairs.get(self)
            if _tmp3439 is None:
                pairs[self] =  1
            else:
                _tmp3439 = _tmp3439 + 1
                if _tmp3439:
                    pairs[self] = _tmp3439
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp3453; HEAD=FACTORS; DATA=pairs)
            _tmp3453 = new(cls)
            _tmp3453.head = FACTORS
            _tmp3453.data = pairs
            return _tmp3453
        else:
            #DIV_SYMBOL_SYMBOL(LHS=self; RHS=other)
            if self == other:
                return cls.one
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp3474; HEAD=FACTORS; DATA={self: 1, other: -1})
            _tmp3474 = new(cls)
            _tmp3474.head = FACTORS
            _tmp3474.data = {self: 1, other: -1}
            return _tmp3474
