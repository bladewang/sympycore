"""Generated low-level arithmetic methods for CollectingField.

This file is generated by the src/mk_pairs_ops.py script.
See http://sympycore.googlecode.com/ for more information.

DO NOT CHANGE THIS FILE DIRECTLY!!!
"""

from ..core import Expr
from ..utils import NUMBER, SYMBOL, TERMS, FACTORS
from ..arithmetic.numbers import (normalized_fraction, mpq, try_power,
  numbertypes, inttypes_set, numbertypes_set)
from ..arithmetic.infinity import Infinity

def div(a, b, cls):
    if type(b) in inttypes_set:
        if type(a) in inttypes_set:
            if not b:
                if not a:
                    return cls.undefined
                return cls.zoo
            return normalized_fraction(a, b)
        if not b:
            return a * cls.zoo
        if b == 1:
            return a
        return a * mpq((1,b))
    return a / b




def expand_mul_method(cls, self, other):
    lhead, ldata = self.pair
    rhead, rdata = other.pair
    if lhead is FACTORS:
        if rhead is FACTORS:
            #MUL_FACTORS_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            pairs_get = pairs.get
            number = 1
            for t,c in rdata.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=+; USIGN=; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                _tmp9 = pairs_get(t)
                if _tmp9 is None:
                    pairs[t] =  c
                else:
                    _tmp9 = _tmp9 + c
                    if type(_tmp9) is cls and _tmp9.head is NUMBER:
                        _tmp9 = _tmp9.data
                    if _tmp9:
                        if t.head is NUMBER:
                            del pairs[t]
                            z, sym = try_power(t.data, _tmp9)
                            if sym:
                                for t1, c1 in sym:
                                    #NEWINSTANCE(OBJ=tt; HEAD=NUMBER; DATA=t1)
                                    tt = cls(NUMBER, t1)
                                    #ADD_TERM_VALUE_DICT(DICT=pairs; DICT_GET=pairs_get; TERM=tt; VALUE=c1; SIGN=+; USIGN=)
                                    _tmp23 = pairs_get(tt)
                                    if _tmp23 is None:
                                        pairs[tt] =  c1
                                    else:
                                        _tmp23 = _tmp23 + c1
                                        if _tmp23:
                                            pairs[tt] = _tmp23
                                        else:
                                            del pairs[tt]
                            number = number * z
                        else:
                            pairs[t] = _tmp9
                    else:
                        del pairs[t]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   if number==1:
                       return t
                   #RETURN_NEW(HEAD=TERMS; DATA={t: number})
                   #NEWINSTANCE(OBJ=_tmp37; HEAD=TERMS; DATA={t: number})
                   _tmp37 = cls(TERMS, {t: number})
                   return _tmp37
               if t==cls.one:
                   return number
            if number == 1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp51; HEAD=FACTORS; DATA=pairs)
                _tmp51 = cls(FACTORS, pairs)
                return _tmp51
            #NEWINSTANCE(OBJ=obj; HEAD=FACTORS; DATA=pairs)
            obj = cls(FACTORS, pairs)
            #RETURN_NEW(HEAD=TERMS; DATA={obj: number})
            #NEWINSTANCE(OBJ=_tmp72; HEAD=TERMS; DATA={obj: number})
            _tmp72 = cls(TERMS, {obj: number})
            return _tmp72
        elif rhead is NUMBER:
            return self # other must be one
        else:
            #MUL_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=other; RHSDATA=rdata)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp100 = pairs.get(other)
            if _tmp100 is None:
                pairs[other] =  1
            else:
                _tmp100 = _tmp100 + 1
                if _tmp100:
                    pairs[other] = _tmp100
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp114; HEAD=FACTORS; DATA=pairs)
            _tmp114 = cls(FACTORS, pairs)
            return _tmp114
    elif lhead is NUMBER:
        return other # self must be one
    else:
        if rhead is FACTORS:
            #MUL_SYMBOL_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #MUL_FACTORS_SYMBOL(LHS=other; LHSDATA=rdata; RHS=self; RHSDATA=ldata)
            pairs = rdata.copy()
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self; RHSDATA=ldata)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp149 = pairs.get(self)
            if _tmp149 is None:
                pairs[self] =  1
            else:
                _tmp149 = _tmp149 + 1
                if _tmp149:
                    pairs[self] = _tmp149
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp163; HEAD=FACTORS; DATA=pairs)
            _tmp163 = cls(FACTORS, pairs)
            return _tmp163
        elif rhead is NUMBER:
            return self # other must be one
        else:
            #MUL_SYMBOL_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            if self == other:
                pairs = {self: 2}
            else:
                pairs = {self: 1, other: 1}
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp184; HEAD=FACTORS; DATA=pairs)
            _tmp184 = cls(FACTORS, pairs)
            return _tmp184

def rsub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #SUB_VALUE_NUMBER(VALUE=other; RHS=self; RHSDATA=ldata)
            #RETURN_NEW(HEAD=NUMBER; DATA=other - ldata)
            #NEWINSTANCE(OBJ=_tmp205; HEAD=NUMBER; DATA=other - ldata)
            _tmp205 = cls(NUMBER, other - ldata)
            return _tmp205
        elif lhead is TERMS:
            #SUB_VALUE_TERMS(VALUE=other; RHS=self; RHSDATA=ldata)
            _tmp219 = other
            if not _tmp219:
                #NEG_TERMS(OP=self; OPDATA=ldata)
                op_pairs = ldata
                if len(op_pairs)==1:
                    t, c = op_pairs.items()[0]
                    c = -c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                    #NEWINSTANCE(OBJ=_tmp233; HEAD=TERMS; DATA={t:c})
                    _tmp233 = cls(TERMS, {t:c})
                    return _tmp233
                #NEG_DICT_VALUES(DICT_IN=ldata; DICT_OUT=pairs)
                pairs = dict([(t, -c) for t,c in ldata.iteritems()])
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp254; HEAD=TERMS; DATA=pairs)
                _tmp254 = cls(TERMS, pairs)
                return _tmp254
            #NEG_DICT_VALUES(DICT_IN=ldata; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in ldata.iteritems()])
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp219)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp219; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp282 = pairs.get(cls.one)
            if _tmp282 is None:
                pairs[cls.one] =  _tmp219
            else:
                _tmp282 = _tmp282 + _tmp219
                if _tmp282:
                    pairs[cls.one] = _tmp282
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp289; HEAD=TERMS; DATA=pairs)
            _tmp289 = cls(TERMS, pairs)
            return _tmp289
        else:
            #SUB_VALUE_SYMBOL(VALUE=other; RHS=self; RHSDATA=ldata)
            _tmp303 = other
            if not _tmp303:
                #RETURN_NEW(HEAD=TERMS; DATA={self: -1})
                #NEWINSTANCE(OBJ=_tmp310; HEAD=TERMS; DATA={self: -1})
                _tmp310 = cls(TERMS, {self: -1})
                return _tmp310
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp303, self: -1})
            #NEWINSTANCE(OBJ=_tmp324; HEAD=TERMS; DATA={cls.one: _tmp303, self: -1})
            _tmp324 = cls(TERMS, {cls.one: _tmp303, self: -1})
            return _tmp324
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other - self

def rdiv_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    if isinstance(other, cls.coefftypes):
        if lhead is NUMBER:
            #DIV_VALUE_NUMBER(VALUE=other; RHS=self; RHSDATA=ldata)
            #RETURN_NEW2(HEAD=NUMBER; DATA=div(other, ldata, cls))
            _tmp345 = div(other, ldata, cls)
            if isinstance(_tmp345, Infinity):
                return _tmp345
            #RETURN_NEW(HEAD=NUMBER; DATA=_tmp345)
            #NEWINSTANCE(OBJ=_tmp352; HEAD=NUMBER; DATA=_tmp345)
            _tmp352 = cls(NUMBER, _tmp345)
            return _tmp352
        elif lhead is TERMS:
            #DIV_VALUE_TERMS(VALUE=other; RHS=self; RHSDATA=ldata)
            _tmp366 = other
            if not _tmp366:
                return cls.zero
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = div(other, c, cls)
                t = 1/t
                if c==1:
                    return t
                if t==cls.one:
                    return cls(NUMBER, c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp373; HEAD=TERMS; DATA={t: c})
                _tmp373 = cls(TERMS, {t: c})
                return _tmp373
            #NEWINSTANCE(OBJ=_tmp366; HEAD=FACTORS; DATA={self: -1})
            _tmp366 = cls(FACTORS, {self: -1})
            if other==1:
                return _tmp366
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp366: other})
            #NEWINSTANCE(OBJ=_tmp394; HEAD=TERMS; DATA={_tmp366: other})
            _tmp394 = cls(TERMS, {_tmp366: other})
            return _tmp394
        elif lhead is FACTORS:
            #DIV_VALUE_FACTORS(VALUE=other; RHS=self; RHSDATA=ldata)
            
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = -c
                if c==1:
                    return t * other
                new_pairs = {t: c}
            else:
                #NEG_DICT_VALUES(DICT_IN=pairs; DICT_OUT=new_pairs)
                new_pairs = dict([(t, -c) for t,c in pairs.iteritems()])
            #NEWINSTANCE(OBJ=_tmp408; HEAD=FACTORS; DATA=new_pairs)
            _tmp408 = cls(FACTORS, new_pairs)
            if other==1:
                return _tmp408
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp408: other})
            #NEWINSTANCE(OBJ=_tmp429; HEAD=TERMS; DATA={_tmp408: other})
            _tmp429 = cls(TERMS, {_tmp408: other})
            return _tmp429
        else:
            #DIV_VALUE_SYMBOL(VALUE=other; RHS=self; RHSDATA=ldata)
            _tmp443 = other
            if not _tmp443:
                return cls.zero
            #NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={self: -1})
            obj2 = cls(FACTORS, {self: -1})
            if _tmp443==1:
                return obj2
            #RETURN_NEW(HEAD=TERMS; DATA={obj2: _tmp443})
            #NEWINSTANCE(OBJ=_tmp457; HEAD=TERMS; DATA={obj2: _tmp443})
            _tmp457 = cls(TERMS, {obj2: _tmp443})
            return _tmp457
    other = cls.convert(other, False)
    if other is NotImplemented:
        return other
    return other / self

def pow_method(self, other, z = None, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    type_other = type(other)
    if type_other is cls:
        rhead, rdata = other.pair
        if rhead is NUMBER:
            other = rdata
        type_other = type(other)
    if type_other in inttypes_set:
        if not other:
            return cls.one
        if other==1:
            return self
        if lhead is NUMBER:
            #POW_NUMBER_INT(VALUE=other; LHS=self; LHSDATA=ldata)
            if other < 0:
                #RETURN_NEW(HEAD=NUMBER; DATA=div(1, (ldata)**(-other), cls))
                #NEWINSTANCE(OBJ=_tmp478; HEAD=NUMBER; DATA=div(1, (ldata)**(-other), cls))
                _tmp478 = cls(NUMBER, div(1, (ldata)**(-other), cls))
                return _tmp478
            #RETURN_NEW(HEAD=NUMBER; DATA=(ldata)**(other))
            #NEWINSTANCE(OBJ=_tmp492; HEAD=NUMBER; DATA=(ldata)**(other))
            _tmp492 = cls(NUMBER, (ldata)**(other))
            return _tmp492
        elif lhead is TERMS:
            #POW_TERMS_INT(VALUE=other; LHS=self; LHSDATA=ldata)
            pairs = ldata
            if len(pairs)==1:
                t,c = pairs.items()[0]
                if other < 0:
                    c = div(1, c**(-other), cls)
                else:
                    c = c ** (other)
                t = t**(other)
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                #NEWINSTANCE(OBJ=_tmp513; HEAD=TERMS; DATA={t:c})
                _tmp513 = cls(TERMS, {t:c})
                return _tmp513
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp527; HEAD=FACTORS; DATA={self: other})
            _tmp527 = cls(FACTORS, {self: other})
            return _tmp527
        elif lhead is FACTORS:
            #POW_FACTORS_INT(VALUE=other; LHS=self; LHSDATA=ldata)
            #MUL_DICT_VALUES(DICT_IN=ldata; DICT_OUT=pairs; OP=other)
            pairs = dict([(t, c*other) for t,c in ldata.iteritems()])
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if c==1:
                    return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp555; HEAD=FACTORS; DATA=pairs)
            _tmp555 = cls(FACTORS, pairs)
            return _tmp555
        else:
            #POW_SYMBOL_INT(VALUE=other; LHS=self; LHSDATA=ldata)
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp576; HEAD=FACTORS; DATA={self: other})
            _tmp576 = cls(FACTORS, {self: other})
            return _tmp576
    if lhead is NUMBER and isinstance(other, cls.exptypes):
        #POW_NUMBER_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
        z, sym = try_power(ldata, other)
        if not sym:
            #RETURN_NEW(HEAD=NUMBER; DATA=z)
            #NEWINSTANCE(OBJ=_tmp597; HEAD=NUMBER; DATA=z)
            _tmp597 = cls(NUMBER, z)
            return _tmp597
        factors = {}
        for t,c in sym:
            factors[cls(NUMBER, t)] = c
        #NEWINSTANCE(OBJ=_tmp590; HEAD=FACTORS; DATA=factors)
        _tmp590 = cls(FACTORS, factors)
        if z==1:
            return _tmp590
        #RETURN_NEW(HEAD=TERMS; DATA={_tmp590: z})
        #NEWINSTANCE(OBJ=_tmp618; HEAD=TERMS; DATA={_tmp590: z})
        _tmp618 = cls(TERMS, {_tmp590: z})
        return _tmp618
    if type_other is mpq:
        if lhead is TERMS:
            #POW_TERMS_FRAC(VALUE=other; LHS=self; LHSDATA=ldata)
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if isinstance(c, numbertypes) and not c==-1:
                    if c < 0:
                        z, sym = try_power(-c, other)
                        factors = {-t: other}
                    else:
                        z, sym = try_power(c, other)
                        factors = {t: other}
                    for t,c in sym:
                        factors[cls(NUMBER, t)] = c
                    #NEWINSTANCE(OBJ=_tmp632; HEAD=FACTORS; DATA=factors)
                    _tmp632 = cls(FACTORS, factors)
                    if z==1:
                        return _tmp632
                    #RETURN_NEW(HEAD=TERMS; DATA={_tmp632: z})
                    #NEWINSTANCE(OBJ=_tmp646; HEAD=TERMS; DATA={_tmp632: z})
                    _tmp646 = cls(TERMS, {_tmp632: z})
                    return _tmp646
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp660; HEAD=FACTORS; DATA={self: other})
            _tmp660 = cls(FACTORS, {self: other})
            return _tmp660
        else:
            #POW_SYMBOL_FRAC(VALUE=other; LHS=self; LHSDATA=ldata)
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp681; HEAD=FACTORS; DATA={self: other})
            _tmp681 = cls(FACTORS, {self: other})
            return _tmp681
    if type_other is cls or isinstance(other, cls.exptypes):
        if lhead is NUMBER:
            if ldata==1:
                return self
        elif lhead is FACTORS:
            #POW_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other)
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if type(c) in inttypes_set:
                    #RETURN_NEW(HEAD=FACTORS; DATA={t: other * c})
                    #NEWINSTANCE(OBJ=_tmp702; HEAD=FACTORS; DATA={t: other * c})
                    _tmp702 = cls(FACTORS, {t: other * c})
                    return _tmp702
            #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
            #NEWINSTANCE(OBJ=_tmp716; HEAD=FACTORS; DATA={self: other})
            _tmp716 = cls(FACTORS, {self: other})
            return _tmp716
        #RETURN_NEW(HEAD=FACTORS; DATA={self: other})
        #NEWINSTANCE(OBJ=_tmp730; HEAD=FACTORS; DATA={self: other})
        _tmp730 = cls(FACTORS, {self: other})
        return _tmp730
    return NotImplemented

def sub_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #SUB_NUMBER_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #RETURN_NEW(HEAD=NUMBER; DATA=ldata - other)
                #NEWINSTANCE(OBJ=_tmp751; HEAD=NUMBER; DATA=ldata - other)
                _tmp751 = cls(NUMBER, ldata - other)
                return _tmp751
            elif lhead is TERMS:
                #SUB_TERMS_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #ADD_VALUE_TERMS(VALUE=-other; RHS=self; RHSDATA=ldata)
                _tmp772 = -other
                if not _tmp772:
                    return self
                pairs = ldata.copy()
                #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp772)
                #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp772; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
                _tmp786 = pairs.get(cls.one)
                if _tmp786 is None:
                    pairs[cls.one] =  _tmp772
                else:
                    _tmp786 = _tmp786 + _tmp772
                    if _tmp786:
                        pairs[cls.one] = _tmp786
                    else:
                        del pairs[cls.one]
                #CANONIZE_TERMS_DICT(DICT=pairs)
                if not pairs:
                    return cls.zero
                if len(pairs)==1:
                   t, c = pairs.items()[0]
                   if c==1:
                       return t
                   if t==cls.one:
                       return cls(NUMBER, c)
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp800; HEAD=TERMS; DATA=pairs)
                _tmp800 = cls(TERMS, pairs)
                return _tmp800
            else:
                #SUB_SYMBOL_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; LHSDATA=ldata; VALUE=-other)
                #ADD_VALUE_SYMBOL(VALUE=-other; RHS=self; RHSDATA=ldata)
                _tmp828 = -other
                if not _tmp828:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp828, self: 1})
                #NEWINSTANCE(OBJ=_tmp835; HEAD=TERMS; DATA={cls.one: _tmp828, self: 1})
                _tmp835 = cls(TERMS, {cls.one: _tmp828, self: 1})
                return _tmp835
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead, rdata = other.pair
    if lhead is NUMBER:
        if rhead is NUMBER:
            #SUB_NUMBER_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #SUB_VALUE_NUMBER(VALUE=ldata; RHS=other; RHSDATA=rdata)
            #RETURN_NEW(HEAD=NUMBER; DATA=ldata - rdata)
            #NEWINSTANCE(OBJ=_tmp863; HEAD=NUMBER; DATA=ldata - rdata)
            _tmp863 = cls(NUMBER, ldata - rdata)
            return _tmp863
        elif rhead is TERMS:
            #SUB_NUMBER_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #SUB_VALUE_TERMS(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp884 = ldata
            if not _tmp884:
                #NEG_TERMS(OP=other; OPDATA=rdata)
                op_pairs = rdata
                if len(op_pairs)==1:
                    t, c = op_pairs.items()[0]
                    c = -c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t:c})
                    #NEWINSTANCE(OBJ=_tmp898; HEAD=TERMS; DATA={t:c})
                    _tmp898 = cls(TERMS, {t:c})
                    return _tmp898
                #NEG_DICT_VALUES(DICT_IN=rdata; DICT_OUT=pairs)
                pairs = dict([(t, -c) for t,c in rdata.iteritems()])
                #RETURN_NEW(HEAD=TERMS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp919; HEAD=TERMS; DATA=pairs)
                _tmp919 = cls(TERMS, pairs)
                return _tmp919
            #NEG_DICT_VALUES(DICT_IN=rdata; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in rdata.iteritems()])
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp884)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp884; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp947 = pairs.get(cls.one)
            if _tmp947 is None:
                pairs[cls.one] =  _tmp884
            else:
                _tmp947 = _tmp947 + _tmp884
                if _tmp947:
                    pairs[cls.one] = _tmp947
                else:
                    del pairs[cls.one]
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp954; HEAD=TERMS; DATA=pairs)
            _tmp954 = cls(TERMS, pairs)
            return _tmp954
        else:
            #SUB_NUMBER_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #SUB_VALUE_SYMBOL(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp975 = ldata
            if not _tmp975:
                #RETURN_NEW(HEAD=TERMS; DATA={other: -1})
                #NEWINSTANCE(OBJ=_tmp982; HEAD=TERMS; DATA={other: -1})
                _tmp982 = cls(TERMS, {other: -1})
                return _tmp982
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp975, other: -1})
            #NEWINSTANCE(OBJ=_tmp996; HEAD=TERMS; DATA={cls.one: _tmp975, other: -1})
            _tmp996 = cls(TERMS, {cls.one: _tmp975, other: -1})
            return _tmp996
    elif lhead is TERMS:
        if rhead is NUMBER:
            #SUB_TERMS_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #SUB_TERMS_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #ADD_VALUE_TERMS(VALUE=-rdata; RHS=self; RHSDATA=ldata)
            _tmp1024 = -rdata
            if not _tmp1024:
                return self
            pairs = ldata.copy()
            #ADD_VALUE_DICT(DICT=pairs; VALUE=_tmp1024)
            #ADD_TERM_VALUE_DICT(TERM=cls.one; VALUE=_tmp1024; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1038 = pairs.get(cls.one)
            if _tmp1038 is None:
                pairs[cls.one] =  _tmp1024
            else:
                _tmp1038 = _tmp1038 + _tmp1024
                if _tmp1038:
                    pairs[cls.one] = _tmp1038
                else:
                    del pairs[cls.one]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1052; HEAD=TERMS; DATA=pairs)
            _tmp1052 = cls(TERMS, pairs)
            return _tmp1052
        elif rhead is TERMS:
            #SUB_TERMS_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            pairs_get = pairs.get
            for t,c in rdata.iteritems():
                #ADD_TERM_VALUE_DICT(TERM=t; VALUE=-c; DICT=pairs; DICT_GET=pairs_get; SIGN=+; USIGN=)
                _tmp1073 = pairs_get(t)
                if _tmp1073 is None:
                    pairs[t] =  -c
                else:
                    _tmp1073 = _tmp1073 + -c
                    if _tmp1073:
                        pairs[t] = _tmp1073
                    else:
                        del pairs[t]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1087; HEAD=TERMS; DATA=pairs)
            _tmp1087 = cls(TERMS, pairs)
            return _tmp1087
        else:
            #SUB_TERMS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1108 = pairs.get(other)
            if _tmp1108 is None:
                pairs[other] =  -1
            else:
                _tmp1108 = _tmp1108 + -1
                if _tmp1108:
                    pairs[other] = _tmp1108
                else:
                    del pairs[other]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1122; HEAD=TERMS; DATA=pairs)
            _tmp1122 = cls(TERMS, pairs)
            return _tmp1122
    else:
        if rhead is NUMBER:
            #SUB_SYMBOL_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #SUB_SYMBOL_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #ADD_SYMBOL_VALUE(OBJ=obj; LHS=self; LHSDATA=ldata; VALUE=-rdata)
            #ADD_VALUE_SYMBOL(VALUE=-rdata; RHS=self; RHSDATA=ldata)
            _tmp1157 = -rdata
            if not _tmp1157:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={cls.one: _tmp1157, self: 1})
            #NEWINSTANCE(OBJ=_tmp1164; HEAD=TERMS; DATA={cls.one: _tmp1157, self: 1})
            _tmp1164 = cls(TERMS, {cls.one: _tmp1157, self: 1})
            return _tmp1164
        elif rhead is TERMS:
            #SUB_SYMBOL_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #NEG_DICT_VALUES(DICT_IN=rdata; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in rdata.iteritems()])
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1192 = pairs.get(self)
            if _tmp1192 is None:
                pairs[self] =  1
            else:
                _tmp1192 = _tmp1192 + 1
                if _tmp1192:
                    pairs[self] = _tmp1192
                else:
                    del pairs[self]
            #CANONIZE_TERMS_DICT(DICT=pairs)
            if not pairs:
                return cls.zero
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return cls(NUMBER, c)
            #RETURN_NEW(HEAD=TERMS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1206; HEAD=TERMS; DATA=pairs)
            _tmp1206 = cls(TERMS, pairs)
            return _tmp1206
        else:
            #SUB_SYMBOL_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            if self == other:
                return cls.zero
            #RETURN_NEW(HEAD=TERMS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp1227; HEAD=TERMS; DATA={self: 1, other: -1})
            _tmp1227 = cls(TERMS, {self: 1, other: -1})
            return _tmp1227

def div_method(self, other, NUMBER=NUMBER, TERMS=TERMS, FACTORS=FACTORS):
    cls = type(self)
    lhead, ldata = self.pair
    if type(other) is not cls:
        if isinstance(other, cls.coefftypes):
            if lhead is NUMBER:
                #DIV_NUMBER_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #RETURN_NEW2(HEAD=NUMBER; DATA=div(ldata, other, cls))
                _tmp1248 = div(ldata, other, cls)
                if isinstance(_tmp1248, Infinity):
                    return _tmp1248
                #RETURN_NEW(HEAD=NUMBER; DATA=_tmp1248)
                #NEWINSTANCE(OBJ=_tmp1255; HEAD=NUMBER; DATA=_tmp1248)
                _tmp1255 = cls(NUMBER, _tmp1248)
                return _tmp1255
            elif lhead is TERMS:
                #DIV_TERMS_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_TERMS_VALUE(LHS=self; LHSDATA=ldata; VALUE=div(1,other,cls))
                #MUL_VALUE_TERMS(VALUE=div(1,other,cls); RHS=self; RHSDATA=ldata)
                _tmp1283 = div(1,other,cls)
                if not _tmp1283:
                    return cls.zero
                pairs = ldata
                if len(pairs)==1:
                    t, c = pairs.items()[0]
                    c = _tmp1283 * c
                    if c==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                    #NEWINSTANCE(OBJ=_tmp1290; HEAD=TERMS; DATA={t: c})
                    _tmp1290 = cls(TERMS, {t: c})
                    return _tmp1290
                if _tmp1283==1:
                    return self
                pairs = {}
                for t,c in ldata.iteritems():
                    pairs[t] = _tmp1283 * c
                #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                obj = cls(TERMS, pairs)
                coeff, terms = self._coeff_terms
                if terms is not None:
                    c = coeff * _tmp1283
                    if not c==1:
                        obj._coeff_terms = (c, terms)
                else:
                    obj._coeff_terms = (_tmp1283, self)
                return obj
            elif lhead is FACTORS:
                #DIV_FACTORS_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_FACTORS_VALUE(LHS=self; LHSDATA=ldata; VALUE=div(1,other,cls))
                #MUL_SYMBOL_VALUE(VALUE=div(1,other,cls); LHS=self; LHSDATA=ldata)
                #MUL_VALUE_SYMBOL(VALUE=div(1,other,cls); RHS=self; RHSDATA=ldata)
                _tmp1332 = div(1,other,cls)
                if not _tmp1332:
                    return cls.zero
                if _tmp1332==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp1332})
                #NEWINSTANCE(OBJ=_tmp1339; HEAD=TERMS; DATA={self: _tmp1332})
                _tmp1339 = cls(TERMS, {self: _tmp1332})
                return _tmp1339
            else:
                #DIV_SYMBOL_VALUE(VALUE=other; LHS=self; LHSDATA=ldata)
                #MUL_VALUE_SYMBOL(VALUE=div(1, other, cls); RHS=self; RHSDATA=ldata)
                _tmp1360 = div(1, other, cls)
                if not _tmp1360:
                    return cls.zero
                if _tmp1360==1:
                    return self
                #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp1360})
                #NEWINSTANCE(OBJ=_tmp1367; HEAD=TERMS; DATA={self: _tmp1360})
                _tmp1367 = cls(TERMS, {self: _tmp1360})
                return _tmp1367
        other = cls.convert(other, False)
        if other is NotImplemented:
            return other
    rhead, rdata = other.pair
    if lhead is NUMBER:
        if rhead is NUMBER:
            #DIV_NUMBER_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_VALUE_NUMBER(VALUE=ldata; RHS=other; RHSDATA=rdata)
            #RETURN_NEW2(HEAD=NUMBER; DATA=div(ldata, rdata, cls))
            _tmp1395 = div(ldata, rdata, cls)
            if isinstance(_tmp1395, Infinity):
                return _tmp1395
            #RETURN_NEW(HEAD=NUMBER; DATA=_tmp1395)
            #NEWINSTANCE(OBJ=_tmp1402; HEAD=NUMBER; DATA=_tmp1395)
            _tmp1402 = cls(NUMBER, _tmp1395)
            return _tmp1402
        elif rhead is TERMS:
            #DIV_NUMBER_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_VALUE_TERMS(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp1423 = ldata
            if not _tmp1423:
                return cls.zero
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = div(ldata, c, cls)
                t = 1/t
                if c==1:
                    return t
                if t==cls.one:
                    return cls(NUMBER, c)
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp1430; HEAD=TERMS; DATA={t: c})
                _tmp1430 = cls(TERMS, {t: c})
                return _tmp1430
            #NEWINSTANCE(OBJ=_tmp1423; HEAD=FACTORS; DATA={other: -1})
            _tmp1423 = cls(FACTORS, {other: -1})
            if ldata==1:
                return _tmp1423
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp1423: ldata})
            #NEWINSTANCE(OBJ=_tmp1451; HEAD=TERMS; DATA={_tmp1423: ldata})
            _tmp1451 = cls(TERMS, {_tmp1423: ldata})
            return _tmp1451
        elif rhead is FACTORS:
            #DIV_NUMBER_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_VALUE_FACTORS(VALUE=ldata; RHS=other; RHSDATA=rdata)
            
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = -c
                if c==1:
                    return t * ldata
                new_pairs = {t: c}
            else:
                #NEG_DICT_VALUES(DICT_IN=pairs; DICT_OUT=new_pairs)
                new_pairs = dict([(t, -c) for t,c in pairs.iteritems()])
            #NEWINSTANCE(OBJ=_tmp1472; HEAD=FACTORS; DATA=new_pairs)
            _tmp1472 = cls(FACTORS, new_pairs)
            if ldata==1:
                return _tmp1472
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp1472: ldata})
            #NEWINSTANCE(OBJ=_tmp1493; HEAD=TERMS; DATA={_tmp1472: ldata})
            _tmp1493 = cls(TERMS, {_tmp1472: ldata})
            return _tmp1493
        else:
            #DIV_NUMBER_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_VALUE_SYMBOL(VALUE=ldata; RHS=other; RHSDATA=rdata)
            _tmp1514 = ldata
            if not _tmp1514:
                return cls.zero
            #NEWINSTANCE(OBJ=obj2; HEAD=FACTORS; DATA={other: -1})
            obj2 = cls(FACTORS, {other: -1})
            if _tmp1514==1:
                return obj2
            #RETURN_NEW(HEAD=TERMS; DATA={obj2: _tmp1514})
            #NEWINSTANCE(OBJ=_tmp1528; HEAD=TERMS; DATA={obj2: _tmp1514})
            _tmp1528 = cls(TERMS, {obj2: _tmp1514})
            return _tmp1528
    elif lhead is TERMS:
        if rhead is NUMBER:
            #DIV_TERMS_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_TERMS_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #MUL_TERMS_VALUE(LHS=self; LHSDATA=ldata; VALUE=div(1,rdata,cls))
            #MUL_VALUE_TERMS(VALUE=div(1,rdata,cls); RHS=self; RHSDATA=ldata)
            _tmp1563 = div(1,rdata,cls)
            if not _tmp1563:
                return cls.zero
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                c = _tmp1563 * c
                if c==1:
                    return t
                #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                #NEWINSTANCE(OBJ=_tmp1570; HEAD=TERMS; DATA={t: c})
                _tmp1570 = cls(TERMS, {t: c})
                return _tmp1570
            if _tmp1563==1:
                return self
            pairs = {}
            for t,c in ldata.iteritems():
                pairs[t] = _tmp1563 * c
            #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
            obj = cls(TERMS, pairs)
            coeff, terms = self._coeff_terms
            if terms is not None:
                c = coeff * _tmp1563
                if not c==1:
                    obj._coeff_terms = (c, terms)
            else:
                obj._coeff_terms = (_tmp1563, self)
            return obj
        elif rhead is TERMS:
            #DIV_TERMS_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            
            if self==other:
                return cls.one
            lpairs = ldata
            rpairs = rdata
            if len(lpairs)==1:
                t1, c1 = lpairs.items()[0]
                if len(rpairs)==1:
                    t2, c2 = rpairs.items()[0]
                    c = div(c1, c2, cls)
                    if t2==t1:
                        return cls(NUMBER, c)
                    if c==1:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t1:1, t2:-1})
                        #NEWINSTANCE(OBJ=_tmp1598; HEAD=FACTORS; DATA={t1:1, t2:-1})
                        _tmp1598 = cls(FACTORS, {t1:1, t2:-1})
                        return _tmp1598
                    #NEWINSTANCE(OBJ=_tmp1591; HEAD=FACTORS; DATA={t1:1, t2:-1})
                    _tmp1591 = cls(FACTORS, {t1:1, t2:-1})
                else:
                    _tmp1591 = t1 / other
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp1591:c1})
                #NEWINSTANCE(OBJ=_tmp1619; HEAD=TERMS; DATA={_tmp1591:c1})
                _tmp1619 = cls(TERMS, {_tmp1591:c1})
                return _tmp1619
            elif len(rpairs)==1:
                t2, c2 = rpairs.items()[0]
                c = div(1, c2, cls)
                if t2==self:
                    return cls(NUMBER, c)
                _tmp1591 = self / t2
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp1591:c})
                #NEWINSTANCE(OBJ=_tmp1633; HEAD=TERMS; DATA={_tmp1591:c})
                _tmp1633 = cls(TERMS, {_tmp1591:c})
                return _tmp1633
            #RETURN_NEW(HEAD=FACTORS; DATA={self:1, other:-1})
            #NEWINSTANCE(OBJ=_tmp1647; HEAD=FACTORS; DATA={self:1, other:-1})
            _tmp1647 = cls(FACTORS, {self:1, other:-1})
            return _tmp1647
        elif rhead is FACTORS:
            #DIV_TERMS_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            lpairs = ldata
            if len(lpairs)==1:
                t, c = lpairs.items()[0]
                t = t / other
                if t==cls.one:
                    return cls(NUMBER, c)
                head, data = t.pair
                if head is NUMBER:
                    #RETURN_NEW(HEAD=NUMBER; DATA=data * c)
                    #NEWINSTANCE(OBJ=_tmp1668; HEAD=NUMBER; DATA=data * c)
                    _tmp1668 = cls(NUMBER, data * c)
                    return _tmp1668
                elif head is TERMS:
                    #MUL_TERMS_VALUE(LHS=t; LHSDATA=data; VALUE=c)
                    #MUL_VALUE_TERMS(VALUE=c; RHS=t; RHSDATA=data)
                    _tmp1689 = c
                    if not _tmp1689:
                        return cls.zero
                    pairs = data
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp1689 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp1696; HEAD=TERMS; DATA={t: c})
                        _tmp1696 = cls(TERMS, {t: c})
                        return _tmp1696
                    if _tmp1689==1:
                        return t
                    pairs = {}
                    for t,c in data.iteritems():
                        pairs[t] = _tmp1689 * c
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                    obj = cls(TERMS, pairs)
                    coeff, terms = t._coeff_terms
                    if terms is not None:
                        c = coeff * _tmp1689
                        if not c==1:
                            obj._coeff_terms = (c, terms)
                    else:
                        obj._coeff_terms = (_tmp1689, t)
                    return obj
                else:
                    #MUL_SYMBOL_VALUE(LHS=t; LHSDATA=data; VALUE=c)
                    #MUL_VALUE_SYMBOL(VALUE=c; RHS=t; RHSDATA=data)
                    _tmp1724 = c
                    if not _tmp1724:
                        return cls.zero
                    if _tmp1724==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp1724})
                    #NEWINSTANCE(OBJ=_tmp1731; HEAD=TERMS; DATA={t: _tmp1724})
                    _tmp1731 = cls(TERMS, {t: _tmp1724})
                    return _tmp1731
            #DIV_SYMBOL_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==self:
                    c = 1 - c
                    if not c:
                        return cls.one
                    if c==1:
                        return t
                    else:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp1752; HEAD=FACTORS; DATA={t: c})
                        _tmp1752 = cls(FACTORS, {t: c})
                        return _tmp1752
                #RETURN_NEW(HEAD=FACTORS; DATA={t: -c, self: 1})
                #NEWINSTANCE(OBJ=_tmp1766; HEAD=FACTORS; DATA={t: -c, self: 1})
                _tmp1766 = cls(FACTORS, {t: -c, self: 1})
                return _tmp1766
            #NEG_DICT_VALUES(DICT_IN=rdata; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in rdata.iteritems()])
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self; RHSDATA=ldata)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp1794 = pairs.get(self)
            if _tmp1794 is None:
                pairs[self] =  1
            else:
                _tmp1794 = _tmp1794 + 1
                if _tmp1794:
                    pairs[self] = _tmp1794
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp1808; HEAD=FACTORS; DATA=pairs)
            _tmp1808 = cls(FACTORS, pairs)
            return _tmp1808
        else:
            #DIV_TERMS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            
            pairs = ldata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==other:
                    return cls(NUMBER, c)
                if t.head is FACTORS:
                    _tmp1822 = t / other
                    #RETURN_NEW(HEAD=TERMS; DATA={_tmp1822: c})
                    #NEWINSTANCE(OBJ=_tmp1829; HEAD=TERMS; DATA={_tmp1822: c})
                    _tmp1829 = cls(TERMS, {_tmp1822: c})
                    return _tmp1829
                #NEWINSTANCE(OBJ=_tmp1822; HEAD=FACTORS; DATA={t:1, other: -1})
                _tmp1822 = cls(FACTORS, {t:1, other: -1})
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp1822: c})
                #NEWINSTANCE(OBJ=_tmp1850; HEAD=TERMS; DATA={_tmp1822: c})
                _tmp1850 = cls(TERMS, {_tmp1822: c})
                return _tmp1850
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp1864; HEAD=FACTORS; DATA={self: 1, other: -1})
            _tmp1864 = cls(FACTORS, {self: 1, other: -1})
            return _tmp1864
    elif lhead is FACTORS:
        if rhead is NUMBER:
            #DIV_FACTORS_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_FACTORS_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #MUL_FACTORS_VALUE(LHS=self; LHSDATA=ldata; VALUE=div(1,rdata,cls))
            #MUL_SYMBOL_VALUE(VALUE=div(1,rdata,cls); LHS=self; LHSDATA=ldata)
            #MUL_VALUE_SYMBOL(VALUE=div(1,rdata,cls); RHS=self; RHSDATA=ldata)
            _tmp1906 = div(1,rdata,cls)
            if not _tmp1906:
                return cls.zero
            if _tmp1906==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp1906})
            #NEWINSTANCE(OBJ=_tmp1913; HEAD=TERMS; DATA={self: _tmp1906})
            _tmp1913 = cls(TERMS, {self: _tmp1906})
            return _tmp1913
        elif rhead is TERMS:
            #DIV_FACTORS_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            rpairs = rdata
            if len(rpairs)==1:
                t, c = rpairs.items()[0]
                t = self / t
                c = div(1, c, cls)
                if t==cls.one:
                    return cls(NUMBER, c)
                head, data = t.pair
                if head is NUMBER:
                    #RETURN_NEW(HEAD=NUMBER; DATA=data * c)
                    #NEWINSTANCE(OBJ=_tmp1934; HEAD=NUMBER; DATA=data * c)
                    _tmp1934 = cls(NUMBER, data * c)
                    return _tmp1934
                elif head is TERMS:
                    #MUL_TERMS_VALUE(LHS=t; LHSDATA=data; VALUE=c)
                    #MUL_VALUE_TERMS(VALUE=c; RHS=t; RHSDATA=data)
                    _tmp1955 = c
                    if not _tmp1955:
                        return cls.zero
                    pairs = data
                    if len(pairs)==1:
                        t, c = pairs.items()[0]
                        c = _tmp1955 * c
                        if c==1:
                            return t
                        #RETURN_NEW(HEAD=TERMS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp1962; HEAD=TERMS; DATA={t: c})
                        _tmp1962 = cls(TERMS, {t: c})
                        return _tmp1962
                    if _tmp1955==1:
                        return t
                    pairs = {}
                    for t,c in data.iteritems():
                        pairs[t] = _tmp1955 * c
                    #NEWINSTANCE(OBJ=obj; HEAD=TERMS; DATA=pairs)
                    obj = cls(TERMS, pairs)
                    coeff, terms = t._coeff_terms
                    if terms is not None:
                        c = coeff * _tmp1955
                        if not c==1:
                            obj._coeff_terms = (c, terms)
                    else:
                        obj._coeff_terms = (_tmp1955, t)
                    return obj
                else:
                    #MUL_SYMBOL_VALUE(LHS=t; LHSDATA=data; VALUE=c)
                    #MUL_VALUE_SYMBOL(VALUE=c; RHS=t; RHSDATA=data)
                    _tmp1990 = c
                    if not _tmp1990:
                        return cls.zero
                    if _tmp1990==1:
                        return t
                    #RETURN_NEW(HEAD=TERMS; DATA={t: _tmp1990})
                    #NEWINSTANCE(OBJ=_tmp1997; HEAD=TERMS; DATA={t: _tmp1990})
                    _tmp1997 = cls(TERMS, {t: _tmp1990})
                    return _tmp1997
            #DIV_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #DIV_DICT_SYMBOL(RHS=other; RHSDATA=rdata; DICT=pairs)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp2025 = pairs.get(other)
            if _tmp2025 is None:
                pairs[other] =  -1
            else:
                _tmp2025 = _tmp2025 + -1
                if _tmp2025:
                    pairs[other] = _tmp2025
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp2039; HEAD=FACTORS; DATA=pairs)
            _tmp2039 = cls(FACTORS, pairs)
            return _tmp2039
        elif rhead is FACTORS:
            #DIV_FACTORS_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            pairs_get = pairs.get
            number = 1
            for t,c in rdata.iteritems():
                #MUL_FACTOR_VALUE_DICT(FACTOR=t; SIGN=-; USIGN=-; VALUE=c; DICT=pairs; DICT_GET=pairs_get; NUMBER=number)
                _tmp2060 = pairs_get(t)
                if _tmp2060 is None:
                    pairs[t] = - c
                else:
                    _tmp2060 = _tmp2060 - c
                    if type(_tmp2060) is cls and _tmp2060.head is NUMBER:
                        _tmp2060 = _tmp2060.data
                    if _tmp2060:
                        if t.head is NUMBER:
                            del pairs[t]
                            z, sym = try_power(t.data, _tmp2060)
                            if sym:
                                for t1, c1 in sym:
                                    #NEWINSTANCE(OBJ=tt; HEAD=NUMBER; DATA=t1)
                                    tt = cls(NUMBER, t1)
                                    #ADD_TERM_VALUE_DICT(DICT=pairs; DICT_GET=pairs_get; TERM=tt; VALUE=c1; SIGN=+; USIGN=)
                                    _tmp2074 = pairs_get(tt)
                                    if _tmp2074 is None:
                                        pairs[tt] =  c1
                                    else:
                                        _tmp2074 = _tmp2074 + c1
                                        if _tmp2074:
                                            pairs[tt] = _tmp2074
                                        else:
                                            del pairs[tt]
                            number = number * z
                        else:
                            pairs[t] = _tmp2060
                    else:
                        del pairs[t]
            #CANONIZE_FACTORS_DICT(DICT=pairs; NUMBER=number)
            if not pairs:
                if number is 1:
                    return cls.one
                return number
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   if number==1:
                       return t
                   #RETURN_NEW(HEAD=TERMS; DATA={t: number})
                   #NEWINSTANCE(OBJ=_tmp2088; HEAD=TERMS; DATA={t: number})
                   _tmp2088 = cls(TERMS, {t: number})
                   return _tmp2088
               if t==cls.one:
                   return number
            if number==1:
                #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
                #NEWINSTANCE(OBJ=_tmp2102; HEAD=FACTORS; DATA=pairs)
                _tmp2102 = cls(FACTORS, pairs)
                return _tmp2102
            #NEWINSTANCE(OBJ=_tmp2053; HEAD=FACTORS; DATA=pairs)
            _tmp2053 = cls(FACTORS, pairs)
            #RETURN_NEW(HEAD=TERMS; DATA={_tmp2053: number})
            #NEWINSTANCE(OBJ=_tmp2123; HEAD=TERMS; DATA={_tmp2053: number})
            _tmp2123 = cls(TERMS, {_tmp2053: number})
            return _tmp2123
        else:
            #DIV_FACTORS_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = ldata.copy()
            #DIV_DICT_SYMBOL(RHS=other; RHSDATA=rdata; DICT=pairs)
            #ADD_TERM_VALUE_DICT(TERM=other; VALUE=-1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp2151 = pairs.get(other)
            if _tmp2151 is None:
                pairs[other] =  -1
            else:
                _tmp2151 = _tmp2151 + -1
                if _tmp2151:
                    pairs[other] = _tmp2151
                else:
                    del pairs[other]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp2165; HEAD=FACTORS; DATA=pairs)
            _tmp2165 = cls(FACTORS, pairs)
            return _tmp2165
    else:
        if rhead is NUMBER:
            #DIV_SYMBOL_NUMBER(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            #DIV_SYMBOL_VALUE(VALUE=rdata; LHS=self; LHSDATA=ldata)
            #MUL_VALUE_SYMBOL(VALUE=div(1, rdata, cls); RHS=self; RHSDATA=ldata)
            _tmp2193 = div(1, rdata, cls)
            if not _tmp2193:
                return cls.zero
            if _tmp2193==1:
                return self
            #RETURN_NEW(HEAD=TERMS; DATA={self: _tmp2193})
            #NEWINSTANCE(OBJ=_tmp2200; HEAD=TERMS; DATA={self: _tmp2193})
            _tmp2200 = cls(TERMS, {self: _tmp2193})
            return _tmp2200
        elif rhead is TERMS:
            #DIV_SYMBOL_TERMS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = rdata
            if len(pairs)==1:
                t,c = pairs.items()[0]
                if self==t:
                    return cls(NUMBER, div(1, c, cls))
                #NEWINSTANCE(OBJ=_tmp2214; HEAD=FACTORS; DATA={self:1, t:-1})
                _tmp2214 = cls(FACTORS, {self:1, t:-1})
                #RETURN_NEW(HEAD=TERMS; DATA={_tmp2214: div(1, c, cls)})
                #NEWINSTANCE(OBJ=_tmp2228; HEAD=TERMS; DATA={_tmp2214: div(1, c, cls)})
                _tmp2228 = cls(TERMS, {_tmp2214: div(1, c, cls)})
                return _tmp2228
            #RETURN_NEW(HEAD=FACTORS; DATA={self:1, other:-1})
            #NEWINSTANCE(OBJ=_tmp2242; HEAD=FACTORS; DATA={self:1, other:-1})
            _tmp2242 = cls(FACTORS, {self:1, other:-1})
            return _tmp2242
        elif rhead is FACTORS:
            #DIV_SYMBOL_FACTORS(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            pairs = rdata
            if len(pairs)==1:
                t, c = pairs.items()[0]
                if t==self:
                    c = 1 - c
                    if not c:
                        return cls.one
                    if c==1:
                        return t
                    else:
                        #RETURN_NEW(HEAD=FACTORS; DATA={t: c})
                        #NEWINSTANCE(OBJ=_tmp2263; HEAD=FACTORS; DATA={t: c})
                        _tmp2263 = cls(FACTORS, {t: c})
                        return _tmp2263
                #RETURN_NEW(HEAD=FACTORS; DATA={t: -c, self: 1})
                #NEWINSTANCE(OBJ=_tmp2277; HEAD=FACTORS; DATA={t: -c, self: 1})
                _tmp2277 = cls(FACTORS, {t: -c, self: 1})
                return _tmp2277
            #NEG_DICT_VALUES(DICT_IN=rdata; DICT_OUT=pairs)
            pairs = dict([(t, -c) for t,c in rdata.iteritems()])
            #MUL_DICT_SYMBOL(DICT=pairs; RHS=self; RHSDATA=ldata)
            #ADD_TERM_VALUE_DICT(TERM=self; VALUE=1; DICT=pairs; DICT_GET=pairs.get; SIGN=+; USIGN=)
            _tmp2305 = pairs.get(self)
            if _tmp2305 is None:
                pairs[self] =  1
            else:
                _tmp2305 = _tmp2305 + 1
                if _tmp2305:
                    pairs[self] = _tmp2305
                else:
                    del pairs[self]
            #CANONIZE_FACTORS_DICT1(DICT=pairs)
            if not pairs:
                return cls.one
            if len(pairs)==1:
               t, c = pairs.items()[0]
               if c==1:
                   return t
               if t==cls.one:
                   return t
            #RETURN_NEW(HEAD=FACTORS; DATA=pairs)
            #NEWINSTANCE(OBJ=_tmp2319; HEAD=FACTORS; DATA=pairs)
            _tmp2319 = cls(FACTORS, pairs)
            return _tmp2319
        else:
            #DIV_SYMBOL_SYMBOL(LHS=self; LHSDATA=ldata; RHS=other; RHSDATA=rdata)
            if self == other:
                return cls.one
            #RETURN_NEW(HEAD=FACTORS; DATA={self: 1, other: -1})
            #NEWINSTANCE(OBJ=_tmp2340; HEAD=FACTORS; DATA={self: 1, other: -1})
            _tmp2340 = cls(FACTORS, {self: 1, other: -1})
            return _tmp2340
